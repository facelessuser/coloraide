{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction What is ColorAide? ColorAide is a pure Python, object oriented approach to colors. >>> from coloraide import Color >>> Color . steps ([ 'lch(75% 50 0)' , 'lch(75% 50 300)' ], steps = 8 , space = 'lch' , hue = 'longer' ) [color(--lch 75 50 0 / 1), color(--lch 75 50 42.857 / 1), color(--lch 75 50 85.714 / 1), color(--lch 75 50 128.57 / 1), color(--lch 75 50 171.43 / 1), color(--lch 75 50 214.29 / 1), color(--lch 75 50 257.14 / 1), color(--lch 75 50 300 / 1)] from coloraide import Color Color.steps(['lch(75% 50 0)', 'lch(75% 50 300)'], steps=8, space='lch', hue='longer') Edit Share Run Cancel ColorAide particularly has a focus on the following: Accurate colors. Proper round tripping (where reasonable). Be generally easy to pick up for the average user. Support modern CSS color spaces and syntax. Make accessible many new and old non-CSS color spaces. Provide a number of useful utilities such as interpolation, color distancing, blending, gamut mapping, etc. Provide a plugin API to extend supported color spaces and more. Allow users to configure defaults to their liking. ColorAide is not meant to be the one library to replace all other color libraries. There are many great libraries out there such such as: Colour Science , Colorio , python-colormath , and many others. Some focus on the scientific aspects of colors and provide a wealth of various spaces, illuminants, access to complex color space visualizers, and numerous esoteric tools. Some are highly focused on speed. Some are more complex and more difficult to pick up and use for newcomers, and others are more accessible. At its heart, ColorAide was designed for convenience, flexibility, and to be very easy to pick up and work with. There are, of course, some trade offs with speed when using a pure Python, object oriented approach, but there are also many advantages as well. ColorAide might not always be the tool for every job, but hopefully it is a great tool all the same. Installation ColorAide can be installed via Python's pip : $ pip install coloraide .info-container {display: inline-block;}","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#what-is-coloraide","text":"ColorAide is a pure Python, object oriented approach to colors. >>> from coloraide import Color >>> Color . steps ([ 'lch(75% 50 0)' , 'lch(75% 50 300)' ], steps = 8 , space = 'lch' , hue = 'longer' ) [color(--lch 75 50 0 / 1), color(--lch 75 50 42.857 / 1), color(--lch 75 50 85.714 / 1), color(--lch 75 50 128.57 / 1), color(--lch 75 50 171.43 / 1), color(--lch 75 50 214.29 / 1), color(--lch 75 50 257.14 / 1), color(--lch 75 50 300 / 1)] from coloraide import Color Color.steps(['lch(75% 50 0)', 'lch(75% 50 300)'], steps=8, space='lch', hue='longer') Edit Share Run Cancel ColorAide particularly has a focus on the following: Accurate colors. Proper round tripping (where reasonable). Be generally easy to pick up for the average user. Support modern CSS color spaces and syntax. Make accessible many new and old non-CSS color spaces. Provide a number of useful utilities such as interpolation, color distancing, blending, gamut mapping, etc. Provide a plugin API to extend supported color spaces and more. Allow users to configure defaults to their liking. ColorAide is not meant to be the one library to replace all other color libraries. There are many great libraries out there such such as: Colour Science , Colorio , python-colormath , and many others. Some focus on the scientific aspects of colors and provide a wealth of various spaces, illuminants, access to complex color space visualizers, and numerous esoteric tools. Some are highly focused on speed. Some are more complex and more difficult to pick up and use for newcomers, and others are more accessible. At its heart, ColorAide was designed for convenience, flexibility, and to be very easy to pick up and work with. There are, of course, some trade offs with speed when using a pure Python, object oriented approach, but there are also many advantages as well. ColorAide might not always be the tool for every job, but hopefully it is a great tool all the same.","title":"What is ColorAide?"},{"location":"#installation","text":"ColorAide can be installed via Python's pip : $ pip install coloraide .info-container {display: inline-block;}","title":"Installation"},{"location":"cat/","text":"Chromatic Adaptation Chromatic adaptation is the human visual system's ability to adjust to changes in illumination in order to preserve the appearance of object colors. It is responsible for the stable appearance of object colors despite the wide variation of light which might be reflected from an object and observed by our eyes. A chromatic adaptation transform ( CAT ) emulates this important aspect of color perception in color appearance models. In short, colors look different under different lighting, and CATs are used to predict what a color should look like from one lighting source to another. Illuminants Viewing a color in daylight will look different than viewing it by candle light. Color spaces usually define a reference illuminant that clarifies the assumed lighting for the given space. For instance, sRGB is a color space defined with an illuminant of D65 (light in the shade - no direct sunlight - at noon). On the other hand, the ProPhoto RGB space uses a D50 illuminant (direct sunlight at noon). When translating a color from one illuminant to another, it is often desirable to represent that color under the new illuminant such that it appears to the eye the same as it did under the original illuminant. CATs are used to predict what the new color under the new illuminant should be in order to fulfill these requirements. For a quick example, we can demonstrate the basic principle when translating a color in the XYZ color space from a D50 illuminant to a D65 illuminant. Below, we can see that the colors look pretty much the same, even though they are now described under different illuminants. >>> d50 = Color ( 'color(xyz-d50 0.11627 0.07261 0.23256 / 1)' ) >>> d65 = d50 . convert ( 'xyz-d65' ) >>> d50 , d65 (color(xyz-d50 0.11627 0.07261 0.23256 / 1), color(xyz-d65 0.12413 0.07493 0.30933 / 1)) d50 = Color('color(xyz-d50 0.11627 0.07261 0.23256 / 1)') d65 = d50.convert('xyz-d65') d50, d65 Edit Share Run Cancel These transforms are usually designed for the XYZ color space as it operates in linear light making it the ideal place to apply the transform. Any color that must go through a CAT to account for differences in illuminants must pass through the XYZ color space. More specifically, ColorAide requires the color to pass through XYZ D65 space as that will trigger the chromatic adaptation. For instance, if a color space such as ProPhoto is being translated to sRGB, ProPhoto will first be transformed to XYZ D50, then XYZ D65 which will trigger the chromatic adaptation, next to Linear sRGB, and lastly sRGB. So, we can actually do this manually and compare the results to what we did above. In order to do this, we need to provide the specified \"white point\" for the source color and the \"white point\" for the destination color along with the XYZ coordinates we wish to transform. ColorAide uses the Bradford CAT by default, so we will specify that CAT for consistency. >>> from coloraide import cat >>> Color ( 'color(xyz-d50 0.11627 0.07261 0.23256 / 1)' ) . convert ( 'xyz-d65' )[: - 1 ] [0.1241272855013134, 0.07493061731402745, 0.3093325898995686] >>> Color . chromatic_adaptation ( cat . WHITES [ '2deg' ][ \"D50\" ], cat . WHITES [ '2deg' ][ \"D65\" ], [ 0.11627 , 0.07261 , 0.23256 ], method = 'bradford' ) [0.1241272855013134, 0.07493061731402745, 0.3093325898995686] from coloraide import cat Color('color(xyz-d50 0.11627 0.07261 0.23256 / 1)').convert('xyz-d65')[:-1] Color.chromatic_adaptation(cat.WHITES['2deg'][\"D50\"], cat.WHITES['2deg'][\"D65\"], [0.11627, 0.07261, 0.23256], method='bradford') Edit Share Run Cancel ColorAide, currently defines the following illuminants for both 2\u02da observer and 10\u02da observer, but most people are probably only concerned with D65 and D50 (2\u02da degree observer) which are the only the illuminants used in the default color spaces provided by ColorAide. Illuminants A B C D50 D55 D65 D75 E F2 F7 F11 Supported CATs There are various CATs , all varying in complexity and accuracy. We will not go through all of them and instead will leave that up to the user to research as needed. Suffice it to say, the Bradford CAT is currently the industry standard (in most cases), but there are a variety of options available, and research continues to try and improve upon CATs of the past to come up with better CATs for the future. Currently, ColorAide mainly supports von Kries type CATs (named after an early 20 th century color scientist), or CATs that are similar to and/or are built upon the original von Kries CAT . We also do not currently support every known von Kries CAT out there, but a good number are available. In the future, support may be expanded. CAT bradford von-kries xyz-scaling sharp cat02 cat16 cmccat97 cmccat2000 Changing the Default CAT Changing the default CAT is easy and follows the same pattern as the rest of the available class overrides . Simply derive a new Color () class from the original and override the CHROMATIC_ADAPTATION property with the name of the desired CAT . Afterwards, all color transforms will use the specified CAT . >>> class Custom ( Color ): ... CHROMATIC_ADAPTATION = 'cat02' ... >>> d50 = Custom ( 'color(xyz-d50 0.11627 0.07261 0.23256 / 1)' ) >>> d65 = d50 . convert ( 'xyz-d65' ) >>> d50 , d65 (color(xyz-d50 0.11627 0.07261 0.23256 / 1), color(xyz-d65 0.12476 0.07614 0.30581 / 1)) class Custom(Color): CHROMATIC_ADAPTATION = 'cat02' d50 = Custom('color(xyz-d50 0.11627 0.07261 0.23256 / 1)') d65 = d50.convert('xyz-d65') d50, d65 Edit Share Run Cancel .info-container {display: inline-block;}","title":"Chromatic Adaptation"},{"location":"cat/#chromatic-adaptation","text":"Chromatic adaptation is the human visual system's ability to adjust to changes in illumination in order to preserve the appearance of object colors. It is responsible for the stable appearance of object colors despite the wide variation of light which might be reflected from an object and observed by our eyes. A chromatic adaptation transform ( CAT ) emulates this important aspect of color perception in color appearance models. In short, colors look different under different lighting, and CATs are used to predict what a color should look like from one lighting source to another.","title":"Chromatic Adaptation"},{"location":"cat/#illuminants","text":"Viewing a color in daylight will look different than viewing it by candle light. Color spaces usually define a reference illuminant that clarifies the assumed lighting for the given space. For instance, sRGB is a color space defined with an illuminant of D65 (light in the shade - no direct sunlight - at noon). On the other hand, the ProPhoto RGB space uses a D50 illuminant (direct sunlight at noon). When translating a color from one illuminant to another, it is often desirable to represent that color under the new illuminant such that it appears to the eye the same as it did under the original illuminant. CATs are used to predict what the new color under the new illuminant should be in order to fulfill these requirements. For a quick example, we can demonstrate the basic principle when translating a color in the XYZ color space from a D50 illuminant to a D65 illuminant. Below, we can see that the colors look pretty much the same, even though they are now described under different illuminants. >>> d50 = Color ( 'color(xyz-d50 0.11627 0.07261 0.23256 / 1)' ) >>> d65 = d50 . convert ( 'xyz-d65' ) >>> d50 , d65 (color(xyz-d50 0.11627 0.07261 0.23256 / 1), color(xyz-d65 0.12413 0.07493 0.30933 / 1)) d50 = Color('color(xyz-d50 0.11627 0.07261 0.23256 / 1)') d65 = d50.convert('xyz-d65') d50, d65 Edit Share Run Cancel These transforms are usually designed for the XYZ color space as it operates in linear light making it the ideal place to apply the transform. Any color that must go through a CAT to account for differences in illuminants must pass through the XYZ color space. More specifically, ColorAide requires the color to pass through XYZ D65 space as that will trigger the chromatic adaptation. For instance, if a color space such as ProPhoto is being translated to sRGB, ProPhoto will first be transformed to XYZ D50, then XYZ D65 which will trigger the chromatic adaptation, next to Linear sRGB, and lastly sRGB. So, we can actually do this manually and compare the results to what we did above. In order to do this, we need to provide the specified \"white point\" for the source color and the \"white point\" for the destination color along with the XYZ coordinates we wish to transform. ColorAide uses the Bradford CAT by default, so we will specify that CAT for consistency. >>> from coloraide import cat >>> Color ( 'color(xyz-d50 0.11627 0.07261 0.23256 / 1)' ) . convert ( 'xyz-d65' )[: - 1 ] [0.1241272855013134, 0.07493061731402745, 0.3093325898995686] >>> Color . chromatic_adaptation ( cat . WHITES [ '2deg' ][ \"D50\" ], cat . WHITES [ '2deg' ][ \"D65\" ], [ 0.11627 , 0.07261 , 0.23256 ], method = 'bradford' ) [0.1241272855013134, 0.07493061731402745, 0.3093325898995686] from coloraide import cat Color('color(xyz-d50 0.11627 0.07261 0.23256 / 1)').convert('xyz-d65')[:-1] Color.chromatic_adaptation(cat.WHITES['2deg'][\"D50\"], cat.WHITES['2deg'][\"D65\"], [0.11627, 0.07261, 0.23256], method='bradford') Edit Share Run Cancel ColorAide, currently defines the following illuminants for both 2\u02da observer and 10\u02da observer, but most people are probably only concerned with D65 and D50 (2\u02da degree observer) which are the only the illuminants used in the default color spaces provided by ColorAide. Illuminants A B C D50 D55 D65 D75 E F2 F7 F11","title":"Illuminants"},{"location":"cat/#supported-cats","text":"There are various CATs , all varying in complexity and accuracy. We will not go through all of them and instead will leave that up to the user to research as needed. Suffice it to say, the Bradford CAT is currently the industry standard (in most cases), but there are a variety of options available, and research continues to try and improve upon CATs of the past to come up with better CATs for the future. Currently, ColorAide mainly supports von Kries type CATs (named after an early 20 th century color scientist), or CATs that are similar to and/or are built upon the original von Kries CAT . We also do not currently support every known von Kries CAT out there, but a good number are available. In the future, support may be expanded. CAT bradford von-kries xyz-scaling sharp cat02 cat16 cmccat97 cmccat2000","title":"Supported CATs"},{"location":"cat/#changing-the-default-cat","text":"Changing the default CAT is easy and follows the same pattern as the rest of the available class overrides . Simply derive a new Color () class from the original and override the CHROMATIC_ADAPTATION property with the name of the desired CAT . Afterwards, all color transforms will use the specified CAT . >>> class Custom ( Color ): ... CHROMATIC_ADAPTATION = 'cat02' ... >>> d50 = Custom ( 'color(xyz-d50 0.11627 0.07261 0.23256 / 1)' ) >>> d65 = d50 . convert ( 'xyz-d65' ) >>> d50 , d65 (color(xyz-d50 0.11627 0.07261 0.23256 / 1), color(xyz-d65 0.12476 0.07614 0.30581 / 1)) class Custom(Color): CHROMATIC_ADAPTATION = 'cat02' d50 = Custom('color(xyz-d50 0.11627 0.07261 0.23256 / 1)') d65 = d50.convert('xyz-d65') d50, d65 Edit Share Run Cancel .info-container {display: inline-block;}","title":"Changing the Default CAT"},{"location":"color/","text":"The Color Object The Color object is where all the magic of ColorAide happens. In order to manipulate, interpolate, or perform any action on a color, we must first create one. There are a number of ways to instantiate new colors. Here we will cover basic creating, cloning, and updating of the Color class object and a few other class specific topics. Importing The Color object contains all the logic to create and manipulate colors. It can be imported from coloraide . from coloraide import Color By default, the Color object contains only a subset of the available color spaces, related distancing algorithms, etc. This is done in order to keep the Color object lighter. If desired, the ColorAll object can be used which includes everything . This is generally not recommended as most users do not need everything . In general, it is recommended to subclass the Color object and cherry pick any additional plugins that are required, but if you'd like to have access to all the color spaces that are available, along with any other optional plugins, you can import and use ColorAll . from coloraide.everything import ColorAll as Color Custom Color Objects To add more plugins or tweak color defaults, see Custom Color Classes for more. Creating Colors Once the Color class is imported, colors can be created using various forms of input. Colors can be created from strings, raw data input, and even simple raw data wrapped in dictionaries. As far as strings are concerned, ColorAide has the ability to parse valid CSS syntax. Syntax includes legacy formats as defined in CSS Level 3, but also contains CSS Level 4! >>> Color ( \"red\" ) color(srgb 1 0 0 / 1) >>> Color ( \"#00ff00\" ) color(srgb 0 1 0 / 1) >>> Color ( \"rgb(0 0 255 / 1)\" ) color(srgb 0 0 1 / 1) Color(\"red\") Color(\"#00ff00\") Color(\"rgb(0 0 255 / 1)\") Edit Share Run Cancel Warning: CSS Level 4 Though CSS Level 4 is supported, the CSS spec is not finalized and there could be some churn in relation to the syntax as browsers begin to implement the spec. ColorAide not only supports colors in the CSS spec, but also some other additional color spaces as well. To bridge the gap with syntax, ColorAide allows all colors, whether in the CSS spec or not, to be recognized using the CSS color function ( color ( space coord ... / alpha ) ). Even if the color is in the CSS spec and is not currently specified to use the color () function, we still allow it. Essentially, we've adopted the color () function as the universal way in which to serialize color strings. If the CSS spec does not formally recognize a color in this form, the color identifier will use two dashes as a prefix ( --color-id ). Check the documentation of the given color space to discover the appropriate CSS identifier name as the CSS identifier may not always match the color space name as specified in ColorAide. >>> Color ( 'color(--hsl 130 40 % 75% / 0.5)' ) color(--hsl 130 0.4 0.75 / 0.5) Color('color(--hsl 130 40% 75% / 0.5)') Edit Share Run Cancel While CSS input is useful, we can also insert raw data points directly. When doing things this way, we must be mindful of the actual accepted input range. For instance, RGB colors are not specified in ranges from 0 - 255, but from 0 - 1. >>> Color ( \"srgb\" , [ 0.5 , 0 , 1 ], 0.3 ) color(srgb 0.5 0 1 / 0.3) Color(\"srgb\", [0.5, 0, 1], 0.3) Edit Share Run Cancel Colors can also be exported to and receive input from simple dictionaries. These can be useful when serializing to JSON or various other reasons. Dictionaries include the space key and all relevant color channels as a list under the coords key, and an optional alpha key will be assumed as 1 if omitted. >>> d = Color ( 'red' ) . to_dict () >>> print ( d ) {'space': 'srgb', 'coords': [1.0, 0.0, 0.0], 'alpha': 1.0} >>> Color ( d ) color(srgb 1 0 0 / 1) d = Color('red').to_dict() print(d) Color(d) Edit Share Run Cancel If another color instance is passed as the input, a new color will be created, essentially cloning the passed object. >>> c1 = Color ( 'red' ) >>> c2 = Color ( c1 ) >>> c1 , c2 (color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1)) c1 = Color('red') c2 = Color(c1) c1, c2 Edit Share Run Cancel You can also use the new method to generate new colors from already instantiated color objects. >>> color1 = Color ( \"red\" ) >>> color1 color(srgb 1 0 0 / 1) >>> color1 . new ( \"blue\" ) color(srgb 0 0 1 / 1) color1 = Color(\"red\") color1 color1.new(\"blue\") Edit Share Run Cancel Random If you'd like to generate a random color, simply call Color.random with a given color space and one will be generated. >>> [ Color . random ( 'srgb' ) for _ in range ( 10 )] [color(srgb 0.86996 0.51825 0.37957 / 1), color(srgb 0.54931 0.2292 0.34646 / 1), color(srgb 0.06195 0.87249 0.02403 / 1), color(srgb 0.45498 0.47461 0.0028 / 1), color(srgb 0.92058 0.35394 0.22484 / 1), color(srgb 0.61111 0.33294 0.06272 / 1), color(srgb 0.31623 0.35977 0.3091 / 1), color(srgb 0.89656 0.5794 0.50409 / 1), color(srgb 0.75309 0.2473 0.95572 / 1), color(srgb 0.0864 0.68144 0.28626 / 1)] [Color.random('srgb') for _ in range(10)] Edit Share Run Cancel Ranges are based on the color space's defined channel range. For color spaces with defined gamuts, the values will be confined to appropriate ranges. For color space's without defined gamuts, the ranges may be quite arbitrary. For color spaces with no hard, defined gamut, it is recommend to fit the colors to whatever gamut you'd like, or simply use a target space with a clear defined gamut. >>> Color . random ( 'lab' ) . fit ( 'srgb' ) color(--lab 89.388 -0.77668 87.821 / 1) Color.random('lab').fit('srgb') Edit Share Run Cancel Lastly, if you'd like to further constrain the limits, you can provide a list of constraints. A constraint should be a sequence of two values specifying the minimum and maximum for the channel. If None is provided, that constraint will be ignored. If the list doesn't have enough values, those missing indexes will be ignored. If the list has too many values, those extra values will be ignored. >>> Color . random ( 'srgb' , limits = [( 0.25 , 0.75 )] * 3 ) color(srgb 0.6171 0.62622 0.59382 / 1) Color.random('srgb', limits=[(0.25, 0.75)] * 3) Edit Share Run Cancel Cloning The clone method is an easy way to duplicate the current color object. Here we clone the green color object, giving us two. >>> c1 = Color ( \"green\" ) >>> c1 color(srgb 0 0.50196 0 / 1) >>> c1 . clone () color(srgb 0 0.50196 0 / 1) c1 = Color(\"green\") c1 c1.clone() Edit Share Run Cancel Updating A color can be \"updated\" using another color input. When an update occurs, the current color space is updated from the data of the second color, but the color space does not change. Using update is the equivalent of converting the second color to the color space of the first and then updating all the coordinates (including alpha). The input parameters are identical to the new method, so we can use a color object, a color string, dictionary, or even raw data points. Here we update the color red to the color blue : >>> Color ( \"red\" ) color(srgb 1 0 0 / 1) >>> Color ( \"red\" ) . update ( Color ( \"blue\" )) color(srgb 0 0 1 / 1) Color(\"red\") Color(\"red\").update(Color(\"blue\")) Edit Share Run Cancel Here we update the sRGB red with the color lch ( 80 % 50 130 ) . >>> Color ( \"red\" ) . update ( \"lch(80% 50 130)\" ) color(srgb 0.60392 0.8398 0.48396 / 1) Color(\"red\").update(\"lch(80% 50 130)\") Edit Share Run Cancel Mutating \"Mutating\" is similar to updating except that it will update the color and the color space from another color. The input parameters are identical to the new method, so we can use a color object, a color string, dictionary, or even raw data points. In this example, the red color object literally becomes the specified CIELCh color of lch ( 80 % 50 130 ) . >>> Color ( \"red\" ) . mutate ( \"lch(80% 50 130)\" ) color(--lch 80 50 130 / 1) Color(\"red\").mutate(\"lch(80% 50 130)\") Edit Share Run Cancel Converting Colors can be converted to other color spaces as needed. Converting will always return a new color unless the in_place parameter is set to True , in which case, the current color will be mutated to the new converted color and a reference to itself is returned. For instance, if we had a color yellow , and we needed to work with it in another color space, such as CIELab, we could simply call the convert method with the desired color space. >>> Color ( 'yellow' ) . convert ( \"lab\" ) color(--lab 97.607 -15.75 93.394 / 1) Color('yellow').convert(\"lab\") Edit Share Run Cancel Notes on Round Tripping Accuracy In general, ColorAide is careful to provide good round trip conversions where practical. What this means is that we try to maintain a high level of accuracy so that when a color is converted to a different color and then back, that it will be very close, if not exactly, the same. We accomplish this by not not clipping values during conversion and maintaining as high of precision as we can, but there are some cases where the round tripping accuracy cannot be maintained at the same high level, or when round tripping cannot be maintained at all. One situation that can cause bad round tripping is when one color model cannot properly handle a color due to its gamut being beyond the conversion algorithms limits. Consider a wide gamut, HDR color space like Jzazbz. When it is converted to HSLuv, whose algorithm clamps any lightness that exceeds the SDR range, the round trip is broken. This is just the nature of the HSLuv algorithm as it adheres to an sRGB gamut that does not support HDR lightness. >>> jz = Color ( 'color(--jzazbz 0.25 0 0)' ) >>> jz color(--jzazbz 0.25 0 0 / 1) >>> hsluv = jz . convert ( 'hsluv' ) >>> hsluv color(--hsluv none 0 100 / 1) >>> hsluv . convert ( 'jzazbz' ) color(--jzazbz 0.22207 -0.00016 -0.00012 / 1) jz = Color('color(--jzazbz 0.25 0 0)') jz hsluv = jz.convert('hsluv') hsluv hsluv.convert('jzazbz') Edit Share Run Cancel Sometimes, round tripping can be compromised for practical reasons. This does not mean round tripping breaks, but the high degree of accuracy can drop some. A common case where this happens is with LCh-like color models: LCh, OkLCh, JzCzhz, etc. By definition, a color within an LCh-like color model is determined to be achromatic when chroma is 0 . These color models usually calculate chroma by taking a Lab-like color space's a and b components (or some equivalent) and calculating the chroma with chroma = math . sqrt ( a ** 2 + b ** 2 ) . This requires both a and b to be exactly 0 or chroma will not be 0 . Many of these Lab-like color spaces do not resolve such that a and b are perfectly 0 . Due to the complexity of the conversion to these Lab-like color spaces, coupled with inherent issues with floating point arithmetic, you will sometimes get very close to 0 , but not exactly 0 . What is more a problem is not that chroma doesn't resolve to 0 , but that you can get nonsensical hues as chroma gets very close to zero. Because of this, we simply set hue to undefined when chroma is deemed very close for the color model. But this small change can affect the outcome slightly when doing a round trip back to the original color, though, not usually enough to impact the value in any significant, meaningful way. The definition of very close to 0 can be different from color space to color space, so the impact of such a change can be more significant for certain color spaces. Consider the conversion of the color gray to both Oklab and Jzazbz. >>> c1 = Color ( 'gray' ) . convert ( 'oklab' ) >>> c2 = Color ( 'gray' ) . convert ( 'jzazbz' ) >>> c1 , c2 (color(--oklab 0.59987 0 0 / 1), color(--jzazbz 0.11827 -0.00012 -0.00008 / 1)) >>> list ( c1 ) [0.5998708017229867, -5.551115123125783e-17, 2.2375181041311976e-08, 1.0] >>> list ( c2 ) [0.11827024942185417, -0.00011630238498622214, -8.474411299219664e-05, 1.0] c1 = Color('gray').convert('oklab') c2 = Color('gray').convert('jzazbz') c1, c2 list(c1) list(c2) Edit Share Run Cancel Jzazbz simply doesn't resolve as close to zero as Oklab; therefore, it's cylindrical counter part (JzCzhz) will be more sensitive during the round trip than Oklab's cylindrical counterpart (OkLCh). It should be noted that the difference is still not perceivable to the human eye. >>> jz = Color ( 'gray' ) . convert ( 'jzazbz' ) >>> jz color(--jzazbz 0.11827 -0.00012 -0.00008 / 1) >>> jz2 = jz . convert ( 'jzczhz' ) . convert ( 'jzazbz' ) >>> jz . delta_e ( jz2 , method = 'jz' ) 0.0002736565909198003 jz = Color('gray').convert('jzazbz') jz jz2 = jz.convert('jzczhz').convert('jzazbz') jz.delta_e(jz2, method='jz') Edit Share Run Cancel Color Matching As previously mentioned, the Color () object can parse CSS style string inputs. The string matching logic is exposed via the match method. We can simply pass match a string, and, if the string is a valid color, a ColorMatch object will be returned. The ColorMatch object has a simple structure that contains the matched color as a Color object, and the start and end points it was located at. >>> Color . match ( \"red\" ) ColorMatch(color=color(srgb 1 0 0 / 1), start=0, end=3) Color.match(\"red\") Edit Share Run Cancel By default it matches at the start of the buffer and returns a color if it finds one. If desired, we can do a fullmatch which requires the entire buffer to match a color. >>> Color . match ( \"red and yellow\" ) ColorMatch(color=color(srgb 1 0 0 / 1), start=0, end=3) >>> Color . match ( \"red and yellow\" , fullmatch = True ) Color.match(\"red and yellow\") Color.match(\"red and yellow\", fullmatch=True) Edit Share Run Cancel We can also adjust the start position of the search. In this case, by adjusting the start position to 8 characters later, we will match yellow instead of red . >>> Color . match ( \"red and yellow\" , start = 8 ) ColorMatch(color=color(srgb 1 1 0 / 1), start=8, end=14) Color.match(\"red and yellow\", start=8) Edit Share Run Cancel A method to find all colors in a buffer is not currently provided as looping through all the color spaces and matching all potential colors on every character is not really efficient. Additionally, some buffers may require additional context that is not available to the match function. If such behavior is desired, it is recommended to apply some additional logic to sniff out areas with high likelihood of having a color. In the following example, we construct a regular expression to find places within the buffer that potentially have a valid color. As the buffer is an HTML document we also want to incorporate some context to avoid matching HTML entities or color names that are part of a CSS variable. Once we've crafted our regular expression, we can search the buffer to find locations in the buffer that are likely to be colors. Then we can run Color.match() on those positions within the buffer to see if we find a valid color! >>> import re >>> from coloraide import Color >>> RE_COLOR_START = re . compile ( r \"(?i)(?:\\b(?<![-#&$])(?:color\\((?!\\s*-)|(?:hsla?|lch|lab|hwb|rgba?)\\()|\\b(?<![-#&$])[\\w]{3,}(?![(-])\\b|(?<![&])#)\" ) >>> text = \"\"\" ... <html> ... <head> ... <style> ... body { ... background-color: red; ... color: yellow; ... } ... </style> ... </head> ... <body> ... <p>This is a test <span style=\"background-color: #000088; color: lch(75% 50 50)\">test</span></p> ... </body> ... </html> ... \"\"\" >>> colors = [] >>> for m in RE_COLOR_START . finditer ( text ): ... start = m . start () ... mcolor = Color . match ( text , start = start ) ... if mcolor is not None : ... colors . append ( mcolor . color ) ... >>> [ x . to_string () for x in colors ] ['rgb(255 0 0)', 'rgb(255 255 0)', 'rgb(0 0 136)', 'lch(75 50 50)'] import re from coloraide import Color RE_COLOR_START = re.compile(r\"(?i)(?:\\b(?<![-#&$])(?:color\\((?!\\s*-)|(?:hsla?|lch|lab|hwb|rgba?)\\()|\\b(?<![-#&$])[\\w]{3,}(?![(-])\\b|(?<![&])#)\") text = \"\"\" <html> <head> <style> body { background-color: red; color: yellow; } </style> </head> <body> <p>This is a test <span style=\"background-color: #000088; color: lch(75% 50 50)\">test</span></p> </body> </html> \"\"\" colors = [] for m in RE_COLOR_START.finditer(text): start = m.start() mcolor = Color.match(text, start=start) if mcolor is not None: colors.append(mcolor.color) [x.to_string() for x in colors] Edit Share Run Cancel Custom Color Classes The Color object was created to be extensible and has implemented various functionalities as plugins. Things like color spaces, distancing algorithms, filters, etc. are all implemented as plugins. In order to keep things light, ColorAide does not register all the of the plugins by default unless the user as imported the ColorAll object. Additionally, ColorAide as implemented a number of defaults that can be tweaked within the Color class to alter how things are handled. Creating a custom class allows for a user to change some of the default settings and add or remove plugins to gain access to more color spaces, distancing algorithms, filters, etc. In general, it is always recommended to subclass the Color object when setting up custom preferences or adding or removing plugins. This prevents modifying the base class which may affect other libraries relying on the module. When Color is subclassed, it is safe to then update global overrides or register and deregister plugins without the worry of affecting the base class. Override Default Settings ColorAide has a number of preferences that can be altered in the Color class. Most of these options can be configured on demand when calling into a related function that uses them, but it may be useful to set them up one time on a new Color object. >>> class Color2 ( Color ): ... PRECISION = 3 ... >>> Color ( 'rgb(128.12345 0 128.12345)' ) . to_string () rgb(128.12 0 128.12) >>> Color2 ( 'rgb(128.12345 0 128.12345)' ) . to_string () rgb(128 0 128) class Color2(Color): PRECISION = 3 Color('rgb(128.12345 0 128.12345)').to_string() Color2('rgb(128.12345 0 128.12345)').to_string() Edit Share Run Cancel Properties Defaults Description FIT \"lch-chroma\" The default gamut mapping method used by the Color object. INTERPOLATE \"oklab\" The default color space used for interpolation. DELTA_E \"76\" The default \u2206E algorithm used. This applies to when delta_e() is called without specifying a method or when using color distancing to separate color when using the interpolation method called steps . PRECISION 5 The default precision for string outputs. CHROMATIC_ADAPTATION \"bradford\" Chromatic adaptation method used when converting between two color spaces with different white points. See Chromatic Adaptation for more information. HARMONY \"oklch\" Default color space to use for calculating color harmonies. This should be a cylindrical color space. CONTRAST \"wcag21\" Default contrast algorithm. Plugins Currently, color spaces, delta E methods, chromatic adaptation, filters, contrast, and gamut mapping methods are exposed as plugins. As previously mentioned, Color does not register all plugins, and ColorAll is often more than a user needs by default. Registering exactly what you need is normally the recommend way. While we won't go into a lot of details about creating plugins here, we will go over how to register new plugins and deregister existing plugins. To learn more about creating plugins, checkout the plugin documentation . Registration is performed by the register method. It can take a single plugin or a list of plugins. Based on the plugin's type, The Color object will determine how to properly register the plugin. If the plugin attempts to overwrite a plugin already registered with the same name (as dictated by the plugin) the operation will fail. If overwrite is set to True , the overwrite will not fail and the new plugin will be registered with the specified name in place of the existing plugin. As previously mentioned, the Color object does not include all plugins. This example shows how to register one of the many additional color spaces provided by ColorAide. >>> from coloraide import Color >>> from coloraide.spaces.xyy import xyY >>> try : ... Color ( 'red' ) . convert ( 'xyy' ) ... except : ... print ( 'Nope' ) ... Nope >>> class Custom ( Color ): ... ... >>> Custom . register ( xyY ()) >>> Custom ( 'red' ) . convert ( 'xyy' ) color(--xyy 0.64 0.33 0.21264 / 1) from coloraide import Color from coloraide.spaces.xyy import xyY try: Color('red').convert('xyy') except: print('Nope') class Custom(Color): ... Custom.register(xyY()) Custom('red').convert('xyy') Edit Share Run Cancel Used in conjunction with default settings override , we can not only change a default \u2206E, but we can alter a \u2206E method's configuration by registering it with different defaults: >>> Color ( 'red' ) . delta_e ( 'blue' , method = 'cmc' ) 114.23012812016573 >>> from coloraide.distance.delta_e_cmc import DECMC >>> class Custom ( Color ): ... DELTA_E = \"cmc\" ... >>> Custom . register ( DECMC ( l = 1 , c = 1 ), overwrite = True ) >>> Custom ( 'red' ) . delta_e ( 'blue' ) 115.77446003768313 Color('red').delta_e('blue', method='cmc') from coloraide.distance.delta_e_cmc import DECMC class Custom(Color): DELTA_E = \"cmc\" Custom.register(DECMC(l=1, c=1), overwrite=True) Custom('red').delta_e('blue') Edit Share Run Cancel If a deregistration was desired, the deregister method can be used. It takes a string that describes the plugin to deregister: category:name . Valid categories are space , delta-e , cat , filter , and fit . If the given plugin is not found, an error will be thrown, but if this notification is found to be unnecessary, silent can be enabled and the there will be no error thrown. >>> class Custom ( Color ): ... ... >>> Custom . deregister ( 'space:lab-d65' ) >>> try : ... Custom ( 'red' ) . convert ( 'lab-d65' ) ... except ValueError : ... print ( 'Could not convert to Lab D65 as it is no longer registered' ) ... Could not convert to Lab D65 as it is no longer registered class Custom(Color): ... Custom.deregister('space:lab-d65') try: Custom('red').convert('lab-d65') except ValueError: print('Could not convert to Lab D65 as it is no longer registered') Edit Share Run Cancel Use of * with deregister will remove all plugins. Use of category:* will remove all plugins of that category. .info-container {display: inline-block;}","title":"The Color Object"},{"location":"color/#the-color-object","text":"The Color object is where all the magic of ColorAide happens. In order to manipulate, interpolate, or perform any action on a color, we must first create one. There are a number of ways to instantiate new colors. Here we will cover basic creating, cloning, and updating of the Color class object and a few other class specific topics.","title":"The Color Object"},{"location":"color/#importing","text":"The Color object contains all the logic to create and manipulate colors. It can be imported from coloraide . from coloraide import Color By default, the Color object contains only a subset of the available color spaces, related distancing algorithms, etc. This is done in order to keep the Color object lighter. If desired, the ColorAll object can be used which includes everything . This is generally not recommended as most users do not need everything . In general, it is recommended to subclass the Color object and cherry pick any additional plugins that are required, but if you'd like to have access to all the color spaces that are available, along with any other optional plugins, you can import and use ColorAll . from coloraide.everything import ColorAll as Color Custom Color Objects To add more plugins or tweak color defaults, see Custom Color Classes for more.","title":"Importing"},{"location":"color/#creating-colors","text":"Once the Color class is imported, colors can be created using various forms of input. Colors can be created from strings, raw data input, and even simple raw data wrapped in dictionaries. As far as strings are concerned, ColorAide has the ability to parse valid CSS syntax. Syntax includes legacy formats as defined in CSS Level 3, but also contains CSS Level 4! >>> Color ( \"red\" ) color(srgb 1 0 0 / 1) >>> Color ( \"#00ff00\" ) color(srgb 0 1 0 / 1) >>> Color ( \"rgb(0 0 255 / 1)\" ) color(srgb 0 0 1 / 1) Color(\"red\") Color(\"#00ff00\") Color(\"rgb(0 0 255 / 1)\") Edit Share Run Cancel Warning: CSS Level 4 Though CSS Level 4 is supported, the CSS spec is not finalized and there could be some churn in relation to the syntax as browsers begin to implement the spec. ColorAide not only supports colors in the CSS spec, but also some other additional color spaces as well. To bridge the gap with syntax, ColorAide allows all colors, whether in the CSS spec or not, to be recognized using the CSS color function ( color ( space coord ... / alpha ) ). Even if the color is in the CSS spec and is not currently specified to use the color () function, we still allow it. Essentially, we've adopted the color () function as the universal way in which to serialize color strings. If the CSS spec does not formally recognize a color in this form, the color identifier will use two dashes as a prefix ( --color-id ). Check the documentation of the given color space to discover the appropriate CSS identifier name as the CSS identifier may not always match the color space name as specified in ColorAide. >>> Color ( 'color(--hsl 130 40 % 75% / 0.5)' ) color(--hsl 130 0.4 0.75 / 0.5) Color('color(--hsl 130 40% 75% / 0.5)') Edit Share Run Cancel While CSS input is useful, we can also insert raw data points directly. When doing things this way, we must be mindful of the actual accepted input range. For instance, RGB colors are not specified in ranges from 0 - 255, but from 0 - 1. >>> Color ( \"srgb\" , [ 0.5 , 0 , 1 ], 0.3 ) color(srgb 0.5 0 1 / 0.3) Color(\"srgb\", [0.5, 0, 1], 0.3) Edit Share Run Cancel Colors can also be exported to and receive input from simple dictionaries. These can be useful when serializing to JSON or various other reasons. Dictionaries include the space key and all relevant color channels as a list under the coords key, and an optional alpha key will be assumed as 1 if omitted. >>> d = Color ( 'red' ) . to_dict () >>> print ( d ) {'space': 'srgb', 'coords': [1.0, 0.0, 0.0], 'alpha': 1.0} >>> Color ( d ) color(srgb 1 0 0 / 1) d = Color('red').to_dict() print(d) Color(d) Edit Share Run Cancel If another color instance is passed as the input, a new color will be created, essentially cloning the passed object. >>> c1 = Color ( 'red' ) >>> c2 = Color ( c1 ) >>> c1 , c2 (color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1)) c1 = Color('red') c2 = Color(c1) c1, c2 Edit Share Run Cancel You can also use the new method to generate new colors from already instantiated color objects. >>> color1 = Color ( \"red\" ) >>> color1 color(srgb 1 0 0 / 1) >>> color1 . new ( \"blue\" ) color(srgb 0 0 1 / 1) color1 = Color(\"red\") color1 color1.new(\"blue\") Edit Share Run Cancel","title":"Creating Colors"},{"location":"color/#random","text":"If you'd like to generate a random color, simply call Color.random with a given color space and one will be generated. >>> [ Color . random ( 'srgb' ) for _ in range ( 10 )] [color(srgb 0.86996 0.51825 0.37957 / 1), color(srgb 0.54931 0.2292 0.34646 / 1), color(srgb 0.06195 0.87249 0.02403 / 1), color(srgb 0.45498 0.47461 0.0028 / 1), color(srgb 0.92058 0.35394 0.22484 / 1), color(srgb 0.61111 0.33294 0.06272 / 1), color(srgb 0.31623 0.35977 0.3091 / 1), color(srgb 0.89656 0.5794 0.50409 / 1), color(srgb 0.75309 0.2473 0.95572 / 1), color(srgb 0.0864 0.68144 0.28626 / 1)] [Color.random('srgb') for _ in range(10)] Edit Share Run Cancel Ranges are based on the color space's defined channel range. For color spaces with defined gamuts, the values will be confined to appropriate ranges. For color space's without defined gamuts, the ranges may be quite arbitrary. For color spaces with no hard, defined gamut, it is recommend to fit the colors to whatever gamut you'd like, or simply use a target space with a clear defined gamut. >>> Color . random ( 'lab' ) . fit ( 'srgb' ) color(--lab 89.388 -0.77668 87.821 / 1) Color.random('lab').fit('srgb') Edit Share Run Cancel Lastly, if you'd like to further constrain the limits, you can provide a list of constraints. A constraint should be a sequence of two values specifying the minimum and maximum for the channel. If None is provided, that constraint will be ignored. If the list doesn't have enough values, those missing indexes will be ignored. If the list has too many values, those extra values will be ignored. >>> Color . random ( 'srgb' , limits = [( 0.25 , 0.75 )] * 3 ) color(srgb 0.6171 0.62622 0.59382 / 1) Color.random('srgb', limits=[(0.25, 0.75)] * 3) Edit Share Run Cancel","title":"Random"},{"location":"color/#cloning","text":"The clone method is an easy way to duplicate the current color object. Here we clone the green color object, giving us two. >>> c1 = Color ( \"green\" ) >>> c1 color(srgb 0 0.50196 0 / 1) >>> c1 . clone () color(srgb 0 0.50196 0 / 1) c1 = Color(\"green\") c1 c1.clone() Edit Share Run Cancel","title":"Cloning"},{"location":"color/#updating","text":"A color can be \"updated\" using another color input. When an update occurs, the current color space is updated from the data of the second color, but the color space does not change. Using update is the equivalent of converting the second color to the color space of the first and then updating all the coordinates (including alpha). The input parameters are identical to the new method, so we can use a color object, a color string, dictionary, or even raw data points. Here we update the color red to the color blue : >>> Color ( \"red\" ) color(srgb 1 0 0 / 1) >>> Color ( \"red\" ) . update ( Color ( \"blue\" )) color(srgb 0 0 1 / 1) Color(\"red\") Color(\"red\").update(Color(\"blue\")) Edit Share Run Cancel Here we update the sRGB red with the color lch ( 80 % 50 130 ) . >>> Color ( \"red\" ) . update ( \"lch(80% 50 130)\" ) color(srgb 0.60392 0.8398 0.48396 / 1) Color(\"red\").update(\"lch(80% 50 130)\") Edit Share Run Cancel","title":"Updating"},{"location":"color/#mutating","text":"\"Mutating\" is similar to updating except that it will update the color and the color space from another color. The input parameters are identical to the new method, so we can use a color object, a color string, dictionary, or even raw data points. In this example, the red color object literally becomes the specified CIELCh color of lch ( 80 % 50 130 ) . >>> Color ( \"red\" ) . mutate ( \"lch(80% 50 130)\" ) color(--lch 80 50 130 / 1) Color(\"red\").mutate(\"lch(80% 50 130)\") Edit Share Run Cancel","title":"Mutating"},{"location":"color/#converting","text":"Colors can be converted to other color spaces as needed. Converting will always return a new color unless the in_place parameter is set to True , in which case, the current color will be mutated to the new converted color and a reference to itself is returned. For instance, if we had a color yellow , and we needed to work with it in another color space, such as CIELab, we could simply call the convert method with the desired color space. >>> Color ( 'yellow' ) . convert ( \"lab\" ) color(--lab 97.607 -15.75 93.394 / 1) Color('yellow').convert(\"lab\") Edit Share Run Cancel Notes on Round Tripping Accuracy In general, ColorAide is careful to provide good round trip conversions where practical. What this means is that we try to maintain a high level of accuracy so that when a color is converted to a different color and then back, that it will be very close, if not exactly, the same. We accomplish this by not not clipping values during conversion and maintaining as high of precision as we can, but there are some cases where the round tripping accuracy cannot be maintained at the same high level, or when round tripping cannot be maintained at all. One situation that can cause bad round tripping is when one color model cannot properly handle a color due to its gamut being beyond the conversion algorithms limits. Consider a wide gamut, HDR color space like Jzazbz. When it is converted to HSLuv, whose algorithm clamps any lightness that exceeds the SDR range, the round trip is broken. This is just the nature of the HSLuv algorithm as it adheres to an sRGB gamut that does not support HDR lightness. >>> jz = Color ( 'color(--jzazbz 0.25 0 0)' ) >>> jz color(--jzazbz 0.25 0 0 / 1) >>> hsluv = jz . convert ( 'hsluv' ) >>> hsluv color(--hsluv none 0 100 / 1) >>> hsluv . convert ( 'jzazbz' ) color(--jzazbz 0.22207 -0.00016 -0.00012 / 1) jz = Color('color(--jzazbz 0.25 0 0)') jz hsluv = jz.convert('hsluv') hsluv hsluv.convert('jzazbz') Edit Share Run Cancel Sometimes, round tripping can be compromised for practical reasons. This does not mean round tripping breaks, but the high degree of accuracy can drop some. A common case where this happens is with LCh-like color models: LCh, OkLCh, JzCzhz, etc. By definition, a color within an LCh-like color model is determined to be achromatic when chroma is 0 . These color models usually calculate chroma by taking a Lab-like color space's a and b components (or some equivalent) and calculating the chroma with chroma = math . sqrt ( a ** 2 + b ** 2 ) . This requires both a and b to be exactly 0 or chroma will not be 0 . Many of these Lab-like color spaces do not resolve such that a and b are perfectly 0 . Due to the complexity of the conversion to these Lab-like color spaces, coupled with inherent issues with floating point arithmetic, you will sometimes get very close to 0 , but not exactly 0 . What is more a problem is not that chroma doesn't resolve to 0 , but that you can get nonsensical hues as chroma gets very close to zero. Because of this, we simply set hue to undefined when chroma is deemed very close for the color model. But this small change can affect the outcome slightly when doing a round trip back to the original color, though, not usually enough to impact the value in any significant, meaningful way. The definition of very close to 0 can be different from color space to color space, so the impact of such a change can be more significant for certain color spaces. Consider the conversion of the color gray to both Oklab and Jzazbz. >>> c1 = Color ( 'gray' ) . convert ( 'oklab' ) >>> c2 = Color ( 'gray' ) . convert ( 'jzazbz' ) >>> c1 , c2 (color(--oklab 0.59987 0 0 / 1), color(--jzazbz 0.11827 -0.00012 -0.00008 / 1)) >>> list ( c1 ) [0.5998708017229867, -5.551115123125783e-17, 2.2375181041311976e-08, 1.0] >>> list ( c2 ) [0.11827024942185417, -0.00011630238498622214, -8.474411299219664e-05, 1.0] c1 = Color('gray').convert('oklab') c2 = Color('gray').convert('jzazbz') c1, c2 list(c1) list(c2) Edit Share Run Cancel Jzazbz simply doesn't resolve as close to zero as Oklab; therefore, it's cylindrical counter part (JzCzhz) will be more sensitive during the round trip than Oklab's cylindrical counterpart (OkLCh). It should be noted that the difference is still not perceivable to the human eye. >>> jz = Color ( 'gray' ) . convert ( 'jzazbz' ) >>> jz color(--jzazbz 0.11827 -0.00012 -0.00008 / 1) >>> jz2 = jz . convert ( 'jzczhz' ) . convert ( 'jzazbz' ) >>> jz . delta_e ( jz2 , method = 'jz' ) 0.0002736565909198003 jz = Color('gray').convert('jzazbz') jz jz2 = jz.convert('jzczhz').convert('jzazbz') jz.delta_e(jz2, method='jz') Edit Share Run Cancel","title":"Converting"},{"location":"color/#color-matching","text":"As previously mentioned, the Color () object can parse CSS style string inputs. The string matching logic is exposed via the match method. We can simply pass match a string, and, if the string is a valid color, a ColorMatch object will be returned. The ColorMatch object has a simple structure that contains the matched color as a Color object, and the start and end points it was located at. >>> Color . match ( \"red\" ) ColorMatch(color=color(srgb 1 0 0 / 1), start=0, end=3) Color.match(\"red\") Edit Share Run Cancel By default it matches at the start of the buffer and returns a color if it finds one. If desired, we can do a fullmatch which requires the entire buffer to match a color. >>> Color . match ( \"red and yellow\" ) ColorMatch(color=color(srgb 1 0 0 / 1), start=0, end=3) >>> Color . match ( \"red and yellow\" , fullmatch = True ) Color.match(\"red and yellow\") Color.match(\"red and yellow\", fullmatch=True) Edit Share Run Cancel We can also adjust the start position of the search. In this case, by adjusting the start position to 8 characters later, we will match yellow instead of red . >>> Color . match ( \"red and yellow\" , start = 8 ) ColorMatch(color=color(srgb 1 1 0 / 1), start=8, end=14) Color.match(\"red and yellow\", start=8) Edit Share Run Cancel A method to find all colors in a buffer is not currently provided as looping through all the color spaces and matching all potential colors on every character is not really efficient. Additionally, some buffers may require additional context that is not available to the match function. If such behavior is desired, it is recommended to apply some additional logic to sniff out areas with high likelihood of having a color. In the following example, we construct a regular expression to find places within the buffer that potentially have a valid color. As the buffer is an HTML document we also want to incorporate some context to avoid matching HTML entities or color names that are part of a CSS variable. Once we've crafted our regular expression, we can search the buffer to find locations in the buffer that are likely to be colors. Then we can run Color.match() on those positions within the buffer to see if we find a valid color! >>> import re >>> from coloraide import Color >>> RE_COLOR_START = re . compile ( r \"(?i)(?:\\b(?<![-#&$])(?:color\\((?!\\s*-)|(?:hsla?|lch|lab|hwb|rgba?)\\()|\\b(?<![-#&$])[\\w]{3,}(?![(-])\\b|(?<![&])#)\" ) >>> text = \"\"\" ... <html> ... <head> ... <style> ... body { ... background-color: red; ... color: yellow; ... } ... </style> ... </head> ... <body> ... <p>This is a test <span style=\"background-color: #000088; color: lch(75% 50 50)\">test</span></p> ... </body> ... </html> ... \"\"\" >>> colors = [] >>> for m in RE_COLOR_START . finditer ( text ): ... start = m . start () ... mcolor = Color . match ( text , start = start ) ... if mcolor is not None : ... colors . append ( mcolor . color ) ... >>> [ x . to_string () for x in colors ] ['rgb(255 0 0)', 'rgb(255 255 0)', 'rgb(0 0 136)', 'lch(75 50 50)'] import re from coloraide import Color RE_COLOR_START = re.compile(r\"(?i)(?:\\b(?<![-#&$])(?:color\\((?!\\s*-)|(?:hsla?|lch|lab|hwb|rgba?)\\()|\\b(?<![-#&$])[\\w]{3,}(?![(-])\\b|(?<![&])#)\") text = \"\"\" <html> <head> <style> body { background-color: red; color: yellow; } </style> </head> <body> <p>This is a test <span style=\"background-color: #000088; color: lch(75% 50 50)\">test</span></p> </body> </html> \"\"\" colors = [] for m in RE_COLOR_START.finditer(text): start = m.start() mcolor = Color.match(text, start=start) if mcolor is not None: colors.append(mcolor.color) [x.to_string() for x in colors] Edit Share Run Cancel","title":"Color Matching"},{"location":"color/#custom-color-classes","text":"The Color object was created to be extensible and has implemented various functionalities as plugins. Things like color spaces, distancing algorithms, filters, etc. are all implemented as plugins. In order to keep things light, ColorAide does not register all the of the plugins by default unless the user as imported the ColorAll object. Additionally, ColorAide as implemented a number of defaults that can be tweaked within the Color class to alter how things are handled. Creating a custom class allows for a user to change some of the default settings and add or remove plugins to gain access to more color spaces, distancing algorithms, filters, etc. In general, it is always recommended to subclass the Color object when setting up custom preferences or adding or removing plugins. This prevents modifying the base class which may affect other libraries relying on the module. When Color is subclassed, it is safe to then update global overrides or register and deregister plugins without the worry of affecting the base class.","title":"Custom Color Classes"},{"location":"color/#override-default-settings","text":"ColorAide has a number of preferences that can be altered in the Color class. Most of these options can be configured on demand when calling into a related function that uses them, but it may be useful to set them up one time on a new Color object. >>> class Color2 ( Color ): ... PRECISION = 3 ... >>> Color ( 'rgb(128.12345 0 128.12345)' ) . to_string () rgb(128.12 0 128.12) >>> Color2 ( 'rgb(128.12345 0 128.12345)' ) . to_string () rgb(128 0 128) class Color2(Color): PRECISION = 3 Color('rgb(128.12345 0 128.12345)').to_string() Color2('rgb(128.12345 0 128.12345)').to_string() Edit Share Run Cancel Properties Defaults Description FIT \"lch-chroma\" The default gamut mapping method used by the Color object. INTERPOLATE \"oklab\" The default color space used for interpolation. DELTA_E \"76\" The default \u2206E algorithm used. This applies to when delta_e() is called without specifying a method or when using color distancing to separate color when using the interpolation method called steps . PRECISION 5 The default precision for string outputs. CHROMATIC_ADAPTATION \"bradford\" Chromatic adaptation method used when converting between two color spaces with different white points. See Chromatic Adaptation for more information. HARMONY \"oklch\" Default color space to use for calculating color harmonies. This should be a cylindrical color space. CONTRAST \"wcag21\" Default contrast algorithm.","title":"Override Default Settings"},{"location":"color/#plugins","text":"Currently, color spaces, delta E methods, chromatic adaptation, filters, contrast, and gamut mapping methods are exposed as plugins. As previously mentioned, Color does not register all plugins, and ColorAll is often more than a user needs by default. Registering exactly what you need is normally the recommend way. While we won't go into a lot of details about creating plugins here, we will go over how to register new plugins and deregister existing plugins. To learn more about creating plugins, checkout the plugin documentation . Registration is performed by the register method. It can take a single plugin or a list of plugins. Based on the plugin's type, The Color object will determine how to properly register the plugin. If the plugin attempts to overwrite a plugin already registered with the same name (as dictated by the plugin) the operation will fail. If overwrite is set to True , the overwrite will not fail and the new plugin will be registered with the specified name in place of the existing plugin. As previously mentioned, the Color object does not include all plugins. This example shows how to register one of the many additional color spaces provided by ColorAide. >>> from coloraide import Color >>> from coloraide.spaces.xyy import xyY >>> try : ... Color ( 'red' ) . convert ( 'xyy' ) ... except : ... print ( 'Nope' ) ... Nope >>> class Custom ( Color ): ... ... >>> Custom . register ( xyY ()) >>> Custom ( 'red' ) . convert ( 'xyy' ) color(--xyy 0.64 0.33 0.21264 / 1) from coloraide import Color from coloraide.spaces.xyy import xyY try: Color('red').convert('xyy') except: print('Nope') class Custom(Color): ... Custom.register(xyY()) Custom('red').convert('xyy') Edit Share Run Cancel Used in conjunction with default settings override , we can not only change a default \u2206E, but we can alter a \u2206E method's configuration by registering it with different defaults: >>> Color ( 'red' ) . delta_e ( 'blue' , method = 'cmc' ) 114.23012812016573 >>> from coloraide.distance.delta_e_cmc import DECMC >>> class Custom ( Color ): ... DELTA_E = \"cmc\" ... >>> Custom . register ( DECMC ( l = 1 , c = 1 ), overwrite = True ) >>> Custom ( 'red' ) . delta_e ( 'blue' ) 115.77446003768313 Color('red').delta_e('blue', method='cmc') from coloraide.distance.delta_e_cmc import DECMC class Custom(Color): DELTA_E = \"cmc\" Custom.register(DECMC(l=1, c=1), overwrite=True) Custom('red').delta_e('blue') Edit Share Run Cancel If a deregistration was desired, the deregister method can be used. It takes a string that describes the plugin to deregister: category:name . Valid categories are space , delta-e , cat , filter , and fit . If the given plugin is not found, an error will be thrown, but if this notification is found to be unnecessary, silent can be enabled and the there will be no error thrown. >>> class Custom ( Color ): ... ... >>> Custom . deregister ( 'space:lab-d65' ) >>> try : ... Custom ( 'red' ) . convert ( 'lab-d65' ) ... except ValueError : ... print ( 'Could not convert to Lab D65 as it is no longer registered' ) ... Could not convert to Lab D65 as it is no longer registered class Custom(Color): ... Custom.deregister('space:lab-d65') try: Custom('red').convert('lab-d65') except ValueError: print('Could not convert to Lab D65 as it is no longer registered') Edit Share Run Cancel Use of * with deregister will remove all plugins. Use of category:* will remove all plugins of that category. .info-container {display: inline-block;}","title":"Plugins"},{"location":"compositing/","text":"Compositing and Blending Alpha compositing and blending are tied together under the umbrella of compositing. Each is just an aspect of the overall compositing of colors. Blend is run first, followed by alpha compositing. ColorAide implements both alpha compositing and blending as described in the Compositing and Blending Level 1 specification. Alpha composting is based on Porter Duff compositing . By default, the compose method uses the normal blend mode and the source-over Porter Duff operator. Blending Blending is the aspect of compositing that calculates the mixing of colors where the source element and backdrop overlap. Conceptually, the colors in the source element (top layer) are blended in place with the backdrop (bottom layer). There are various blend modes, the most common is the normal blend mode which is the default blending mode for browsers. The normal blend mode simply returns the top layer's color when one is overlaid onto another. But there are many blend modes that could be used, all of which yield different results. If we were to apply a multiply blend mode, we would get something very different: When composing, the blend mode can be controlled separately in ColorAide. Here, we again use the multiply example and replicate it in ColorAide. To apply blending in ColorAide, simply call compose with a backdrop color, and the calling color will be used as the source. Display P3 sRGB >>> c1 = Color ( '#07c7ed' ) >>> c2 = Color ( '#fc3d99' ) >>> c1 , c2 (color(srgb 0.02745 0.78039 0.92941 / 1), color(srgb 0.98824 0.23922 0.6 / 1)) >>> c1 . compose ( c2 , blend = 'multiply' , space = \"display-p3\" ) color(srgb 0.33867 0.23261 0.55966 / 1) c1 = Color('#07c7ed') c2 = Color('#fc3d99') c1, c2 c1.compose(c2, blend='multiply', space=\"display-p3\") Edit Share Run Cancel >>> c1 = Color ( '#07c7ed' ) >>> c2 = Color ( '#fc3d99' ) >>> c1 , c2 (color(srgb 0.02745 0.78039 0.92941 / 1), color(srgb 0.98824 0.23922 0.6 / 1)) >>> c1 . compose ( c2 , blend = 'multiply' , space = \"srgb\" ) color(srgb 0.02713 0.18668 0.55765 / 1) c1 = Color('#07c7ed') c2 = Color('#fc3d99') c1, c2 c1.compose(c2, blend='multiply', space=\"srgb\") Edit Share Run Cancel Display Differences As some browsers apply compositing based on the display's current color space, we've provided examples in both sRGB and Display P3 so that the examples can be compared on different displays. Which of the above matches your browser? ColorAide allows you to blend a source over multiple backdrops quite easily as well. Simply send in a list, and the colors will be blended from right to left with the right most color being on the bottom of the stack, and the base color being used as the source (on the very top). Display P3 sRGB >>> c1 = Color ( '#07c7ed' ) >>> c2 = Color ( '#fc3d99' ) >>> c3 = Color ( '#f5d311' ) >>> c1 , c2 , c3 (color(srgb 0.02745 0.78039 0.92941 / 1), color(srgb 0.98824 0.23922 0.6 / 1), color(srgb 0.96078 0.82745 0.06667 / 1)) >>> c1 . compose ([ c2 , c3 ], blend = 'multiply' , space = \"display-p3\" ) color(srgb 0.32151 0.19137 0.14794 / 1) c1 = Color('#07c7ed') c2 = Color('#fc3d99') c3 = Color('#f5d311') c1, c2, c3 c1.compose([c2, c3], blend='multiply', space=\"display-p3\") Edit Share Run Cancel >>> c1 = Color ( '#07c7ed' ) >>> c2 = Color ( '#fc3d99' ) >>> c3 = Color ( '#f5d311' ) >>> c1 , c2 , c3 (color(srgb 0.02745 0.78039 0.92941 / 1), color(srgb 0.98824 0.23922 0.6 / 1), color(srgb 0.96078 0.82745 0.06667 / 1)) >>> c1 . compose ([ c2 , c3 ], blend = 'multiply' , space = \"srgb\" ) color(srgb 0.02606 0.15447 0.03718 / 1) c1 = Color('#07c7ed') c2 = Color('#fc3d99') c3 = Color('#f5d311') c1, c2, c3 c1.compose([c2, c3], blend='multiply', space=\"srgb\") Edit Share Run Cancel Lastly, if for any reason, it is desired to compose with blending disabled (e.g. just run alpha compositing), then you can simply set blend to False . multiply is just one of many blend modes that are offered in ColorAide, check out Blend Modes to learn about other blend modes. Alpha Compositing Alpha compositing or alpha blending is the process of combining one image with a background to create the appearance of partial or full transparency. When dealing with layers, there are many possible ways to handle them: Porter Duff compositing covers all possible configurations of layers. Many of these configurations can be useful for all sorts of operations, such as masking. While this library supports all of them , the most commonly used one is source-over which is used to implement simple alpha compositing to simulate semi-transparent layers on top of each other. Given two colors, ColorAide can replicate this behavior and determine the resultant color by applying compositing. We will use the demonstration above and replicate the result in the example below. Below we set the source color to rgb ( 7 199 237 / 0 . 5 ) and the backdrop color to # fc3d99 and run it through the compose method. It should be noted that the default blend mode of normal is used in conjunction by default. Display P3 sRGB >>> c1 = Color ( '#07c7ed' ) . set ( 'alpha' , 0.5 ) >>> c2 = Color ( '#fc3d99' ) >>> c1 , c2 (color(srgb 0.02745 0.78039 0.92941 / 0.5), color(srgb 0.98824 0.23922 0.6 / 1)) >>> c1 . compose ( c2 , space = \"display-p3\" ) color(srgb 0.65142 0.53412 0.76833 / 1) c1 = Color('#07c7ed').set('alpha', 0.5) c2 = Color('#fc3d99') c1, c2 c1.compose(c2, space=\"display-p3\") Edit Share Run Cancel >>> c1 = Color ( '#07c7ed' ) . set ( 'alpha' , 0.5 ) >>> c2 = Color ( '#fc3d99' ) >>> c1 , c2 (color(srgb 0.02745 0.78039 0.92941 / 0.5), color(srgb 0.98824 0.23922 0.6 / 1)) >>> c1 . compose ( c2 , space = \"srgb\" ) color(srgb 0.50784 0.5098 0.76471 / 1) c1 = Color('#07c7ed').set('alpha', 0.5) c2 = Color('#fc3d99') c1, c2 c1.compose(c2, space=\"srgb\") Edit Share Run Cancel Display Differences As some browsers apply compositing based on the display's current color space, we've provided examples in both sRGB and Display P3 so that the examples can be compared on different displays. Which of the above matches your browser? While the average user will be content with the default alpha compositing, Porter Duff offers many other configurations. If desired, we can change the Porter Duff operator used and apply different composite logic. For instance, in this case we can get the resultant of the backdrop over the source color by setting the operator to destination-over . As the backdrop is fully opaque, we just get the backdrop color unaltered. Display P3 sRGB >>> c1 = Color ( '#07c7ed' ) . set ( 'alpha' , 0.5 ) >>> c2 = Color ( '#fc3d99' ) >>> c1 , c2 (color(srgb 0.02745 0.78039 0.92941 / 0.5), color(srgb 0.98824 0.23922 0.6 / 1)) >>> c1 . compose ( c2 , operator = 'destination-over' , space = \"display-p3\" ) color(srgb 0.98824 0.23922 0.6 / 1) c1 = Color('#07c7ed').set('alpha', 0.5) c2 = Color('#fc3d99') c1, c2 c1.compose(c2, operator='destination-over', space=\"display-p3\") Edit Share Run Cancel >>> c1 = Color ( '#07c7ed' ) . set ( 'alpha' , 0.5 ) >>> c2 = Color ( '#fc3d99' ) >>> c1 , c2 (color(srgb 0.02745 0.78039 0.92941 / 0.5), color(srgb 0.98824 0.23922 0.6 / 1)) >>> c1 . compose ( c2 , operator = 'destination-over' , space = \"srgb\" ) color(srgb 0.98824 0.23922 0.6 / 1) c1 = Color('#07c7ed').set('alpha', 0.5) c2 = Color('#fc3d99') c1, c2 c1.compose(c2, operator='destination-over', space=\"srgb\") Edit Share Run Cancel You can also apply alpha compositing to multiple layers at once. Simply send in a list of colors as the backdrop, and the colors will be composed from right to left with the right most color being on the bottom of the stack and the base color (the source) being on the very top. Here we are using the normal blend mode and 50% transparency on all the circles with an opaque white background. We will calculate the center color where all three layers overlap. Display P3 sRGB >>> c1 = Color ( '#07c7ed' ) . set ( 'alpha' , 0.5 ) >>> c2 = Color ( '#fc3d99' ) . set ( 'alpha' , 0.5 ) >>> c3 = Color ( '#f5d311' ) . set ( 'alpha' , 0.5 ) >>> bg = Color ( 'white' ) >>> c1 , c2 , c3 , bg (color(srgb 0.02745 0.78039 0.92941 / 0.5), color(srgb 0.98824 0.23922 0.6 / 0.5), color(srgb 0.96078 0.82745 0.06667 / 0.5), color(srgb 1 1 1 / 1)) >>> c1 . compose ([ c2 , c3 , bg ], blend = 'normal' , space = \"display-p3\" ) color(srgb 0.63703 0.69225 0.77313 / 1) c1 = Color('#07c7ed').set('alpha', 0.5) c2 = Color('#fc3d99').set('alpha', 0.5) c3 = Color('#f5d311').set('alpha', 0.5) bg = Color('white') c1, c2, c3, bg c1.compose([c2, c3, bg], blend='normal', space=\"display-p3\") Edit Share Run Cancel >>> c1 = Color ( '#07c7ed' ) . set ( 'alpha' , 0.5 ) >>> c2 = Color ( '#fc3d99' ) . set ( 'alpha' , 0.5 ) >>> c3 = Color ( '#f5d311' ) . set ( 'alpha' , 0.5 ) >>> bg = Color ( 'white' ) >>> c1 , c2 , c3 , bg (color(srgb 0.02745 0.78039 0.92941 / 0.5), color(srgb 0.98824 0.23922 0.6 / 0.5), color(srgb 0.96078 0.82745 0.06667 / 0.5), color(srgb 1 1 1 / 1)) >>> c1 . compose ([ c2 , c3 , bg ], blend = 'normal' , space = \"srgb\" ) color(srgb 0.50588 0.67843 0.74804 / 1) c1 = Color('#07c7ed').set('alpha', 0.5) c2 = Color('#fc3d99').set('alpha', 0.5) c3 = Color('#f5d311').set('alpha', 0.5) bg = Color('white') c1, c2, c3, bg c1.compose([c2, c3, bg], blend='normal', space=\"srgb\") Edit Share Run Cancel Lastly, if for any reason, it is desired to run compose with alpha compositing disabled (e.g. just run blending), then you can simply set operator to False . Check out Compositing Operators to learn about the many variations that are supported. Complex Compositing We've covered alpha compositing and blending and have demonstrated their use with simple two color examples and multi-layered examples, but what about different blend modes mixed with alpha compositing? In this example, we will consider three circles, each with a unique color: # 07c7ed , # fc3d99 , and # f5d311 . We apply 50% transparency to all the circles and place them on a white background. We then perform a multiply blend on all the circles but isolate them so the multiply blend does not apply to the background. The circles are all represented with CSS. We will now try and replicate the colors with ColorAide. So in the code below, we work our way from the bottom of the stack to the top. Since the background is isolated from the multiply blending, in each region, we start by performing a normal blend on the bottom circle against the background. We then apply multiply blending on each color that is stacked on top. We've provided both the P3 and sRGB outputs to make it easy to compare in case your browser blends in one instead of the other. Display P3 sRGB >>> c1 = Color ( '#07c7ed' ) . set ( 'alpha' , 0.5 ) >>> c2 = Color ( '#fc3d99' ) . set ( 'alpha' , 0.5 ) >>> c3 = Color ( '#f5d311' ) . set ( 'alpha' , 0.5 ) >>> cw2 = c2 . compose ( 'white' , blend = 'normal' , space = 'display-p3' ) >>> cw3 = c3 . compose ( 'white' , blend = 'normal' , space = 'display-p3' ) >>> r1 = c2 . compose ( cw3 , blend = 'multiply' , space = 'display-p3' ) >>> r2 = c1 . compose ( cw2 , blend = 'multiply' , space = 'display-p3' ) >>> r3 = c1 . compose ( cw3 , blend = 'multiply' , space = 'display-p3' ) >>> r1 , r2 , r3 (color(srgb 0.98122 0.58007 0.49257 / 1), color(srgb 0.66117 0.57542 0.77558 / 1), color(srgb 0.61489 0.8159 0.59659 / 1)) >>> c1 . compose ([ c2 , cw3 ], blend = 'multiply' , space = 'display-p3' ) color(srgb 0.64659 0.52543 0.48429 / 1) c1 = Color('#07c7ed').set('alpha', 0.5) c2 = Color('#fc3d99').set('alpha', 0.5) c3 = Color('#f5d311').set('alpha', 0.5) cw2 = c2.compose('white', blend='normal', space='display-p3') cw3 = c3.compose('white', blend='normal', space='display-p3') r1 = c2.compose(cw3, blend='multiply', space='display-p3') r2 = c1.compose(cw2, blend='multiply', space='display-p3') r3 = c1.compose(cw3, blend='multiply', space='display-p3') r1, r2, r3 c1.compose([c2, cw3], blend='multiply', space='display-p3') Edit Share Run Cancel >>> c1 = Color ( '#07c7ed' ) . set ( 'alpha' , 0.5 ) >>> c2 = Color ( '#fc3d99' ) . set ( 'alpha' , 0.5 ) >>> c3 = Color ( '#f5d311' ) . set ( 'alpha' , 0.5 ) >>> cw2 = c2 . compose ( 'white' , blend = 'normal' , space = 'srgb' ) >>> cw3 = c3 . compose ( 'white' , blend = 'normal' , space = 'srgb' ) >>> r1 = c2 . compose ( cw3 , blend = 'multiply' , space = 'srgb' ) >>> r2 = c1 . compose ( cw2 , blend = 'multiply' , space = 'srgb' ) >>> r3 = c1 . compose ( cw3 , blend = 'multiply' , space = 'srgb' ) >>> r1 , r2 , r3 (color(srgb 0.97463 0.56615 0.42667 / 1), color(srgb 0.5107 0.55157 0.77176 / 1), color(srgb 0.50365 0.81339 0.51451 / 1)) >>> c1 . compose ([ c2 , cw3 ], blend = 'multiply' , space = 'srgb' ) color(srgb 0.50069 0.50399 0.41161 / 1) c1 = Color('#07c7ed').set('alpha', 0.5) c2 = Color('#fc3d99').set('alpha', 0.5) c3 = Color('#f5d311').set('alpha', 0.5) cw2 = c2.compose('white', blend='normal', space='srgb') cw3 = c3.compose('white', blend='normal', space='srgb') r1 = c2.compose(cw3, blend='multiply', space='srgb') r2 = c1.compose(cw2, blend='multiply', space='srgb') r3 = c1.compose(cw3, blend='multiply', space='srgb') r1, r2, r3 c1.compose([c2, cw3], blend='multiply', space='srgb') Edit Share Run Cancel Results may vary depending on the browser, but we can see (ignoring rounding differences) that the colors match up. This was performed on Chrome in macOS using a display that uses display-p3 . Blend Modes Normal The blending formula simply selects the source color. Specified as 'normal' . Multiply The source color is multiplied by the destination color and replaces the destination. The resultant color is always at least as dark as either the source or destination color. Multiplying any color with black results in black. Multiplying any color with white preserves the original color. Specified as 'multiply' . Screen Multiplies the complements of the backdrop and source color values, then complements the result. The result color is always at least as light as either of the two constituent colors. Screening any color with white produces white; screening with black leaves the original color unchanged. The effect is similar to projecting multiple photographic slides simultaneously onto a single screen. Specified as 'screen' . Overlay Multiplies or screens the colors, depending on the backdrop color value. Source colors overlay the backdrop while preserving its highlights and shadows. The backdrop color is not replaced but is mixed with the source color to reflect the lightness or darkness of the backdrop. Specified as 'overlay' . Darken Selects the darker of the backdrop and source colors. The backdrop is replaced with the source where the source is darker; otherwise, it is left unchanged. Specified as 'darken' . Lighten Selects the lighter of the backdrop and source colors. The backdrop is replaced with the source where the source is lighter; otherwise, it is left unchanged. Specified as 'lighten' . Color Dodge Brightens the backdrop color to reflect the source color. Painting with black produces no changes. Specified as 'color-dodge' . Color Burn Darkens the backdrop color to reflect the source color. Painting with white produces no change. Specified as 'color-burn' . Hard Light Multiplies or screens the colors, depending on the source color value. The effect is similar to shining a harsh spotlight on the backdrop. Specified as 'hard-light' . Soft Light Darkens or lightens the colors, depending on the source color value. The effect is similar to shining a diffused spotlight on the backdrop. Specified as 'soft-light' . Difference Subtracts the darker of the two constituent colors from the lighter color. Painting with white inverts the backdrop color; painting with black produces no change. Specified as 'difference' . Exclusion Produces an effect similar to that of the Difference mode but lower in contrast. Painting with white inverts the backdrop color; painting with black produces no change. Specified as 'exclusion' . Hue Creates a color with the hue of the source color and the saturation and luminosity of the backdrop color. Specified as 'hue' . Saturation Creates a color with the saturation of the source color and the hue and luminosity of the backdrop color. Painting with this mode in an area of the backdrop that is a pure gray (no saturation) produces no change. Specified as 'saturation' . Luminosity Creates a color with the luminosity of the source color and the hue and saturation of the backdrop color. This produces an inverse effect to that of the Color mode. This mode is the one you can use to create monochrome \"tinted\" image effects like the ones you can see in different website headers. Specified as 'luminosity' . Color Creates a color with the hue and saturation of the source color and the luminosity of the backdrop color. This preserves the gray levels of the backdrop and is useful for coloring monochrome images or tinting color images. Specified as 'color' . Compositing Operators Clear No regions are enabled. Source Destination Result Specified as 'clear' . Copy Only the source will be present. Source Destination Result Specified as 'copy' . Destination Only the destination will be present. Source Destination Result Specified as 'destination' . Source Over Source is placed over the destination. Source Destination Result Specified as 'source-over' . Destination Over Destination is placed over the source. Source Destination Result Specified as 'destination-over' . Source In The source that overlaps the destination, replaces the destination. Source Destination Result Specified as 'source-in' . Destination In Destination which overlaps the source, replaces the source. Source Destination Result Specified as 'destination-in' . Source Out Source is placed, where it falls outside of the destination. Source Destination Result Specified as 'source-out' . Destination Out Destination is placed, where it falls outside of the source. Source Destination Result Specified as 'destination-out' . Source Atop Source which overlaps the destination, replaces the destination. Destination is placed elsewhere. Source Destination Result Specified as 'source-atop' . Destination Atop Destination which overlaps the source replaces the source. Source is placed elsewhere. Source Destination Result Specified as 'destination-atop' . XOR Destination which overlaps the source replaces the source. Source is placed elsewhere. Source Destination Result Specified as 'xor' . Lighter Display the sum of the source image and destination image. Source Destination Result Specified as 'lighter' . img { background: white; } .circle { display: block; width: 80px; height: 80px; border-radius: 50%; position: absolute; transition: all 0.5s ease; z-index: 10; } .isolate label { position: absolute; bottom: 0; width: 100%; text-align: center; } .circle-1 { background: #f5d311; } .dual .circle-1 { background: #fc3d99; } .isolate:not(.dual):hover .circle-1 { transform: translateX(-10px) translateY(-7.5px); } .isolate.dual:hover .circle-1 { transform: translateX(-10px); } .circle-2 { background: #fc3d99; left: 40px; } .dual .circle-2 { background: #07c7ed; } .isolate:not(.dual):hover .circle-2 { transform: translateX(10px) translateY(-7.5px); } .isolate.dual:hover .circle-2 { transform: translateX(20px); } .circle-3 { background: #07c7ed; left: 20px; top: 40px; } .isolate:not(.dual):hover .circle-3 { transform: translateY(7.5px); } .isolate { display: block; height: 120px; width: 120px; isolation: isolate; position: relative; margin: 0 10px; } .isolate.dual { height: 80px; } div.blend-wrap { display: flex; min-height: calc(120px + 0.8em); width: 100%; } div.blend-wrap > :not(.blend-content) { order: 0; } div.blend-wrap .isolate { margin-top: 0.8em; } div.blend-wrap > .blend-content { order: 1; } .blend-normal .circle { mix-blend-mode: normal; } .blend-multiply .circle { mix-blend-mode: multiply; } .blend-screen .circle { mix-blend-mode: screen; } .blend-overlay .circle { mix-blend-mode: overlay; } .blend-color-burn .circle { mix-blend-mode: color-burn; } .blend-color-dodge .circle { mix-blend-mode: color-dodge; } .blend-exclusion .circle { mix-blend-mode: exclusion; } .blend-difference .circle { mix-blend-mode: difference; } .blend-darken .circle { mix-blend-mode: darken; } .blend-lighten .circle { mix-blend-mode: lighten; } .blend-soft-light .circle { mix-blend-mode: soft-light; } .blend-hard-light .circle { mix-blend-mode: hard-light; } .blend-hue .circle { mix-blend-mode: hue; } .blend-saturation .circle { mix-blend-mode: saturation; } .blend-luminosity .circle { mix-blend-mode: luminosity; } .blend-color .circle { mix-blend-mode: color; } img.trans-bg { background-color: var(--swatch-bg-color); background-image: linear-gradient(45deg,var(--swatch-bg-alt-color) 25%,transparent 25%),linear-gradient(-45deg,var(--swatch-bg-alt-color) 25%,transparent 25%),linear-gradient(45deg,transparent 75%,var(--swatch-bg-alt-color) 75%),linear-gradient(-45deg,transparent 75%, var(--swatch-bg-alt-color) 75%); background-position: 0 0,0 0.49em,0.49em -0.49em,-0.49em 0; background-size: 1em 1em; } .info-container {display: inline-block;}","title":"Compositing and Blending"},{"location":"compositing/#compositing-and-blending","text":"Alpha compositing and blending are tied together under the umbrella of compositing. Each is just an aspect of the overall compositing of colors. Blend is run first, followed by alpha compositing. ColorAide implements both alpha compositing and blending as described in the Compositing and Blending Level 1 specification. Alpha composting is based on Porter Duff compositing . By default, the compose method uses the normal blend mode and the source-over Porter Duff operator.","title":"Compositing and Blending"},{"location":"compositing/#blending","text":"Blending is the aspect of compositing that calculates the mixing of colors where the source element and backdrop overlap. Conceptually, the colors in the source element (top layer) are blended in place with the backdrop (bottom layer). There are various blend modes, the most common is the normal blend mode which is the default blending mode for browsers. The normal blend mode simply returns the top layer's color when one is overlaid onto another. But there are many blend modes that could be used, all of which yield different results. If we were to apply a multiply blend mode, we would get something very different: When composing, the blend mode can be controlled separately in ColorAide. Here, we again use the multiply example and replicate it in ColorAide. To apply blending in ColorAide, simply call compose with a backdrop color, and the calling color will be used as the source. Display P3 sRGB >>> c1 = Color ( '#07c7ed' ) >>> c2 = Color ( '#fc3d99' ) >>> c1 , c2 (color(srgb 0.02745 0.78039 0.92941 / 1), color(srgb 0.98824 0.23922 0.6 / 1)) >>> c1 . compose ( c2 , blend = 'multiply' , space = \"display-p3\" ) color(srgb 0.33867 0.23261 0.55966 / 1) c1 = Color('#07c7ed') c2 = Color('#fc3d99') c1, c2 c1.compose(c2, blend='multiply', space=\"display-p3\") Edit Share Run Cancel >>> c1 = Color ( '#07c7ed' ) >>> c2 = Color ( '#fc3d99' ) >>> c1 , c2 (color(srgb 0.02745 0.78039 0.92941 / 1), color(srgb 0.98824 0.23922 0.6 / 1)) >>> c1 . compose ( c2 , blend = 'multiply' , space = \"srgb\" ) color(srgb 0.02713 0.18668 0.55765 / 1) c1 = Color('#07c7ed') c2 = Color('#fc3d99') c1, c2 c1.compose(c2, blend='multiply', space=\"srgb\") Edit Share Run Cancel Display Differences As some browsers apply compositing based on the display's current color space, we've provided examples in both sRGB and Display P3 so that the examples can be compared on different displays. Which of the above matches your browser? ColorAide allows you to blend a source over multiple backdrops quite easily as well. Simply send in a list, and the colors will be blended from right to left with the right most color being on the bottom of the stack, and the base color being used as the source (on the very top). Display P3 sRGB >>> c1 = Color ( '#07c7ed' ) >>> c2 = Color ( '#fc3d99' ) >>> c3 = Color ( '#f5d311' ) >>> c1 , c2 , c3 (color(srgb 0.02745 0.78039 0.92941 / 1), color(srgb 0.98824 0.23922 0.6 / 1), color(srgb 0.96078 0.82745 0.06667 / 1)) >>> c1 . compose ([ c2 , c3 ], blend = 'multiply' , space = \"display-p3\" ) color(srgb 0.32151 0.19137 0.14794 / 1) c1 = Color('#07c7ed') c2 = Color('#fc3d99') c3 = Color('#f5d311') c1, c2, c3 c1.compose([c2, c3], blend='multiply', space=\"display-p3\") Edit Share Run Cancel >>> c1 = Color ( '#07c7ed' ) >>> c2 = Color ( '#fc3d99' ) >>> c3 = Color ( '#f5d311' ) >>> c1 , c2 , c3 (color(srgb 0.02745 0.78039 0.92941 / 1), color(srgb 0.98824 0.23922 0.6 / 1), color(srgb 0.96078 0.82745 0.06667 / 1)) >>> c1 . compose ([ c2 , c3 ], blend = 'multiply' , space = \"srgb\" ) color(srgb 0.02606 0.15447 0.03718 / 1) c1 = Color('#07c7ed') c2 = Color('#fc3d99') c3 = Color('#f5d311') c1, c2, c3 c1.compose([c2, c3], blend='multiply', space=\"srgb\") Edit Share Run Cancel Lastly, if for any reason, it is desired to compose with blending disabled (e.g. just run alpha compositing), then you can simply set blend to False . multiply is just one of many blend modes that are offered in ColorAide, check out Blend Modes to learn about other blend modes.","title":"Blending"},{"location":"compositing/#alpha-compositing","text":"Alpha compositing or alpha blending is the process of combining one image with a background to create the appearance of partial or full transparency. When dealing with layers, there are many possible ways to handle them: Porter Duff compositing covers all possible configurations of layers. Many of these configurations can be useful for all sorts of operations, such as masking. While this library supports all of them , the most commonly used one is source-over which is used to implement simple alpha compositing to simulate semi-transparent layers on top of each other. Given two colors, ColorAide can replicate this behavior and determine the resultant color by applying compositing. We will use the demonstration above and replicate the result in the example below. Below we set the source color to rgb ( 7 199 237 / 0 . 5 ) and the backdrop color to # fc3d99 and run it through the compose method. It should be noted that the default blend mode of normal is used in conjunction by default. Display P3 sRGB >>> c1 = Color ( '#07c7ed' ) . set ( 'alpha' , 0.5 ) >>> c2 = Color ( '#fc3d99' ) >>> c1 , c2 (color(srgb 0.02745 0.78039 0.92941 / 0.5), color(srgb 0.98824 0.23922 0.6 / 1)) >>> c1 . compose ( c2 , space = \"display-p3\" ) color(srgb 0.65142 0.53412 0.76833 / 1) c1 = Color('#07c7ed').set('alpha', 0.5) c2 = Color('#fc3d99') c1, c2 c1.compose(c2, space=\"display-p3\") Edit Share Run Cancel >>> c1 = Color ( '#07c7ed' ) . set ( 'alpha' , 0.5 ) >>> c2 = Color ( '#fc3d99' ) >>> c1 , c2 (color(srgb 0.02745 0.78039 0.92941 / 0.5), color(srgb 0.98824 0.23922 0.6 / 1)) >>> c1 . compose ( c2 , space = \"srgb\" ) color(srgb 0.50784 0.5098 0.76471 / 1) c1 = Color('#07c7ed').set('alpha', 0.5) c2 = Color('#fc3d99') c1, c2 c1.compose(c2, space=\"srgb\") Edit Share Run Cancel Display Differences As some browsers apply compositing based on the display's current color space, we've provided examples in both sRGB and Display P3 so that the examples can be compared on different displays. Which of the above matches your browser? While the average user will be content with the default alpha compositing, Porter Duff offers many other configurations. If desired, we can change the Porter Duff operator used and apply different composite logic. For instance, in this case we can get the resultant of the backdrop over the source color by setting the operator to destination-over . As the backdrop is fully opaque, we just get the backdrop color unaltered. Display P3 sRGB >>> c1 = Color ( '#07c7ed' ) . set ( 'alpha' , 0.5 ) >>> c2 = Color ( '#fc3d99' ) >>> c1 , c2 (color(srgb 0.02745 0.78039 0.92941 / 0.5), color(srgb 0.98824 0.23922 0.6 / 1)) >>> c1 . compose ( c2 , operator = 'destination-over' , space = \"display-p3\" ) color(srgb 0.98824 0.23922 0.6 / 1) c1 = Color('#07c7ed').set('alpha', 0.5) c2 = Color('#fc3d99') c1, c2 c1.compose(c2, operator='destination-over', space=\"display-p3\") Edit Share Run Cancel >>> c1 = Color ( '#07c7ed' ) . set ( 'alpha' , 0.5 ) >>> c2 = Color ( '#fc3d99' ) >>> c1 , c2 (color(srgb 0.02745 0.78039 0.92941 / 0.5), color(srgb 0.98824 0.23922 0.6 / 1)) >>> c1 . compose ( c2 , operator = 'destination-over' , space = \"srgb\" ) color(srgb 0.98824 0.23922 0.6 / 1) c1 = Color('#07c7ed').set('alpha', 0.5) c2 = Color('#fc3d99') c1, c2 c1.compose(c2, operator='destination-over', space=\"srgb\") Edit Share Run Cancel You can also apply alpha compositing to multiple layers at once. Simply send in a list of colors as the backdrop, and the colors will be composed from right to left with the right most color being on the bottom of the stack and the base color (the source) being on the very top. Here we are using the normal blend mode and 50% transparency on all the circles with an opaque white background. We will calculate the center color where all three layers overlap. Display P3 sRGB >>> c1 = Color ( '#07c7ed' ) . set ( 'alpha' , 0.5 ) >>> c2 = Color ( '#fc3d99' ) . set ( 'alpha' , 0.5 ) >>> c3 = Color ( '#f5d311' ) . set ( 'alpha' , 0.5 ) >>> bg = Color ( 'white' ) >>> c1 , c2 , c3 , bg (color(srgb 0.02745 0.78039 0.92941 / 0.5), color(srgb 0.98824 0.23922 0.6 / 0.5), color(srgb 0.96078 0.82745 0.06667 / 0.5), color(srgb 1 1 1 / 1)) >>> c1 . compose ([ c2 , c3 , bg ], blend = 'normal' , space = \"display-p3\" ) color(srgb 0.63703 0.69225 0.77313 / 1) c1 = Color('#07c7ed').set('alpha', 0.5) c2 = Color('#fc3d99').set('alpha', 0.5) c3 = Color('#f5d311').set('alpha', 0.5) bg = Color('white') c1, c2, c3, bg c1.compose([c2, c3, bg], blend='normal', space=\"display-p3\") Edit Share Run Cancel >>> c1 = Color ( '#07c7ed' ) . set ( 'alpha' , 0.5 ) >>> c2 = Color ( '#fc3d99' ) . set ( 'alpha' , 0.5 ) >>> c3 = Color ( '#f5d311' ) . set ( 'alpha' , 0.5 ) >>> bg = Color ( 'white' ) >>> c1 , c2 , c3 , bg (color(srgb 0.02745 0.78039 0.92941 / 0.5), color(srgb 0.98824 0.23922 0.6 / 0.5), color(srgb 0.96078 0.82745 0.06667 / 0.5), color(srgb 1 1 1 / 1)) >>> c1 . compose ([ c2 , c3 , bg ], blend = 'normal' , space = \"srgb\" ) color(srgb 0.50588 0.67843 0.74804 / 1) c1 = Color('#07c7ed').set('alpha', 0.5) c2 = Color('#fc3d99').set('alpha', 0.5) c3 = Color('#f5d311').set('alpha', 0.5) bg = Color('white') c1, c2, c3, bg c1.compose([c2, c3, bg], blend='normal', space=\"srgb\") Edit Share Run Cancel Lastly, if for any reason, it is desired to run compose with alpha compositing disabled (e.g. just run blending), then you can simply set operator to False . Check out Compositing Operators to learn about the many variations that are supported.","title":"Alpha Compositing"},{"location":"compositing/#complex-compositing","text":"We've covered alpha compositing and blending and have demonstrated their use with simple two color examples and multi-layered examples, but what about different blend modes mixed with alpha compositing? In this example, we will consider three circles, each with a unique color: # 07c7ed , # fc3d99 , and # f5d311 . We apply 50% transparency to all the circles and place them on a white background. We then perform a multiply blend on all the circles but isolate them so the multiply blend does not apply to the background. The circles are all represented with CSS. We will now try and replicate the colors with ColorAide. So in the code below, we work our way from the bottom of the stack to the top. Since the background is isolated from the multiply blending, in each region, we start by performing a normal blend on the bottom circle against the background. We then apply multiply blending on each color that is stacked on top. We've provided both the P3 and sRGB outputs to make it easy to compare in case your browser blends in one instead of the other. Display P3 sRGB >>> c1 = Color ( '#07c7ed' ) . set ( 'alpha' , 0.5 ) >>> c2 = Color ( '#fc3d99' ) . set ( 'alpha' , 0.5 ) >>> c3 = Color ( '#f5d311' ) . set ( 'alpha' , 0.5 ) >>> cw2 = c2 . compose ( 'white' , blend = 'normal' , space = 'display-p3' ) >>> cw3 = c3 . compose ( 'white' , blend = 'normal' , space = 'display-p3' ) >>> r1 = c2 . compose ( cw3 , blend = 'multiply' , space = 'display-p3' ) >>> r2 = c1 . compose ( cw2 , blend = 'multiply' , space = 'display-p3' ) >>> r3 = c1 . compose ( cw3 , blend = 'multiply' , space = 'display-p3' ) >>> r1 , r2 , r3 (color(srgb 0.98122 0.58007 0.49257 / 1), color(srgb 0.66117 0.57542 0.77558 / 1), color(srgb 0.61489 0.8159 0.59659 / 1)) >>> c1 . compose ([ c2 , cw3 ], blend = 'multiply' , space = 'display-p3' ) color(srgb 0.64659 0.52543 0.48429 / 1) c1 = Color('#07c7ed').set('alpha', 0.5) c2 = Color('#fc3d99').set('alpha', 0.5) c3 = Color('#f5d311').set('alpha', 0.5) cw2 = c2.compose('white', blend='normal', space='display-p3') cw3 = c3.compose('white', blend='normal', space='display-p3') r1 = c2.compose(cw3, blend='multiply', space='display-p3') r2 = c1.compose(cw2, blend='multiply', space='display-p3') r3 = c1.compose(cw3, blend='multiply', space='display-p3') r1, r2, r3 c1.compose([c2, cw3], blend='multiply', space='display-p3') Edit Share Run Cancel >>> c1 = Color ( '#07c7ed' ) . set ( 'alpha' , 0.5 ) >>> c2 = Color ( '#fc3d99' ) . set ( 'alpha' , 0.5 ) >>> c3 = Color ( '#f5d311' ) . set ( 'alpha' , 0.5 ) >>> cw2 = c2 . compose ( 'white' , blend = 'normal' , space = 'srgb' ) >>> cw3 = c3 . compose ( 'white' , blend = 'normal' , space = 'srgb' ) >>> r1 = c2 . compose ( cw3 , blend = 'multiply' , space = 'srgb' ) >>> r2 = c1 . compose ( cw2 , blend = 'multiply' , space = 'srgb' ) >>> r3 = c1 . compose ( cw3 , blend = 'multiply' , space = 'srgb' ) >>> r1 , r2 , r3 (color(srgb 0.97463 0.56615 0.42667 / 1), color(srgb 0.5107 0.55157 0.77176 / 1), color(srgb 0.50365 0.81339 0.51451 / 1)) >>> c1 . compose ([ c2 , cw3 ], blend = 'multiply' , space = 'srgb' ) color(srgb 0.50069 0.50399 0.41161 / 1) c1 = Color('#07c7ed').set('alpha', 0.5) c2 = Color('#fc3d99').set('alpha', 0.5) c3 = Color('#f5d311').set('alpha', 0.5) cw2 = c2.compose('white', blend='normal', space='srgb') cw3 = c3.compose('white', blend='normal', space='srgb') r1 = c2.compose(cw3, blend='multiply', space='srgb') r2 = c1.compose(cw2, blend='multiply', space='srgb') r3 = c1.compose(cw3, blend='multiply', space='srgb') r1, r2, r3 c1.compose([c2, cw3], blend='multiply', space='srgb') Edit Share Run Cancel Results may vary depending on the browser, but we can see (ignoring rounding differences) that the colors match up. This was performed on Chrome in macOS using a display that uses display-p3 .","title":"Complex Compositing"},{"location":"compositing/#blend-modes","text":"","title":"Blend Modes"},{"location":"compositing/#normal","text":"The blending formula simply selects the source color. Specified as 'normal' .","title":"Normal"},{"location":"compositing/#multiply","text":"The source color is multiplied by the destination color and replaces the destination. The resultant color is always at least as dark as either the source or destination color. Multiplying any color with black results in black. Multiplying any color with white preserves the original color. Specified as 'multiply' .","title":"Multiply"},{"location":"compositing/#screen","text":"Multiplies the complements of the backdrop and source color values, then complements the result. The result color is always at least as light as either of the two constituent colors. Screening any color with white produces white; screening with black leaves the original color unchanged. The effect is similar to projecting multiple photographic slides simultaneously onto a single screen. Specified as 'screen' .","title":"Screen"},{"location":"compositing/#overlay","text":"Multiplies or screens the colors, depending on the backdrop color value. Source colors overlay the backdrop while preserving its highlights and shadows. The backdrop color is not replaced but is mixed with the source color to reflect the lightness or darkness of the backdrop. Specified as 'overlay' .","title":"Overlay"},{"location":"compositing/#darken","text":"Selects the darker of the backdrop and source colors. The backdrop is replaced with the source where the source is darker; otherwise, it is left unchanged. Specified as 'darken' .","title":"Darken"},{"location":"compositing/#lighten","text":"Selects the lighter of the backdrop and source colors. The backdrop is replaced with the source where the source is lighter; otherwise, it is left unchanged. Specified as 'lighten' .","title":"Lighten"},{"location":"compositing/#color-dodge","text":"Brightens the backdrop color to reflect the source color. Painting with black produces no changes. Specified as 'color-dodge' .","title":"Color Dodge"},{"location":"compositing/#color-burn","text":"Darkens the backdrop color to reflect the source color. Painting with white produces no change. Specified as 'color-burn' .","title":"Color Burn"},{"location":"compositing/#hard-light","text":"Multiplies or screens the colors, depending on the source color value. The effect is similar to shining a harsh spotlight on the backdrop. Specified as 'hard-light' .","title":"Hard Light"},{"location":"compositing/#soft-light","text":"Darkens or lightens the colors, depending on the source color value. The effect is similar to shining a diffused spotlight on the backdrop. Specified as 'soft-light' .","title":"Soft Light"},{"location":"compositing/#difference","text":"Subtracts the darker of the two constituent colors from the lighter color. Painting with white inverts the backdrop color; painting with black produces no change. Specified as 'difference' .","title":"Difference"},{"location":"compositing/#exclusion","text":"Produces an effect similar to that of the Difference mode but lower in contrast. Painting with white inverts the backdrop color; painting with black produces no change. Specified as 'exclusion' .","title":"Exclusion"},{"location":"compositing/#hue","text":"Creates a color with the hue of the source color and the saturation and luminosity of the backdrop color. Specified as 'hue' .","title":"Hue"},{"location":"compositing/#saturation","text":"Creates a color with the saturation of the source color and the hue and luminosity of the backdrop color. Painting with this mode in an area of the backdrop that is a pure gray (no saturation) produces no change. Specified as 'saturation' .","title":"Saturation"},{"location":"compositing/#luminosity","text":"Creates a color with the luminosity of the source color and the hue and saturation of the backdrop color. This produces an inverse effect to that of the Color mode. This mode is the one you can use to create monochrome \"tinted\" image effects like the ones you can see in different website headers. Specified as 'luminosity' .","title":"Luminosity"},{"location":"compositing/#color","text":"Creates a color with the hue and saturation of the source color and the luminosity of the backdrop color. This preserves the gray levels of the backdrop and is useful for coloring monochrome images or tinting color images. Specified as 'color' .","title":"Color"},{"location":"compositing/#compositing-operators","text":"","title":"Compositing Operators"},{"location":"compositing/#clear","text":"No regions are enabled. Source Destination Result Specified as 'clear' .","title":"Clear"},{"location":"compositing/#copy","text":"Only the source will be present. Source Destination Result Specified as 'copy' .","title":"Copy"},{"location":"compositing/#destination","text":"Only the destination will be present. Source Destination Result Specified as 'destination' .","title":"Destination"},{"location":"compositing/#source-over","text":"Source is placed over the destination. Source Destination Result Specified as 'source-over' .","title":"Source Over"},{"location":"compositing/#destination-over","text":"Destination is placed over the source. Source Destination Result Specified as 'destination-over' .","title":"Destination Over"},{"location":"compositing/#source-in","text":"The source that overlaps the destination, replaces the destination. Source Destination Result Specified as 'source-in' .","title":"Source In"},{"location":"compositing/#destination-in","text":"Destination which overlaps the source, replaces the source. Source Destination Result Specified as 'destination-in' .","title":"Destination In"},{"location":"compositing/#source-out","text":"Source is placed, where it falls outside of the destination. Source Destination Result Specified as 'source-out' .","title":"Source Out"},{"location":"compositing/#destination-out","text":"Destination is placed, where it falls outside of the source. Source Destination Result Specified as 'destination-out' .","title":"Destination Out"},{"location":"compositing/#source-atop","text":"Source which overlaps the destination, replaces the destination. Destination is placed elsewhere. Source Destination Result Specified as 'source-atop' .","title":"Source Atop"},{"location":"compositing/#destination-atop","text":"Destination which overlaps the source replaces the source. Source is placed elsewhere. Source Destination Result Specified as 'destination-atop' .","title":"Destination Atop"},{"location":"compositing/#xor","text":"Destination which overlaps the source replaces the source. Source is placed elsewhere. Source Destination Result Specified as 'xor' .","title":"XOR"},{"location":"compositing/#lighter","text":"Display the sum of the source image and destination image. Source Destination Result Specified as 'lighter' . img { background: white; } .circle { display: block; width: 80px; height: 80px; border-radius: 50%; position: absolute; transition: all 0.5s ease; z-index: 10; } .isolate label { position: absolute; bottom: 0; width: 100%; text-align: center; } .circle-1 { background: #f5d311; } .dual .circle-1 { background: #fc3d99; } .isolate:not(.dual):hover .circle-1 { transform: translateX(-10px) translateY(-7.5px); } .isolate.dual:hover .circle-1 { transform: translateX(-10px); } .circle-2 { background: #fc3d99; left: 40px; } .dual .circle-2 { background: #07c7ed; } .isolate:not(.dual):hover .circle-2 { transform: translateX(10px) translateY(-7.5px); } .isolate.dual:hover .circle-2 { transform: translateX(20px); } .circle-3 { background: #07c7ed; left: 20px; top: 40px; } .isolate:not(.dual):hover .circle-3 { transform: translateY(7.5px); } .isolate { display: block; height: 120px; width: 120px; isolation: isolate; position: relative; margin: 0 10px; } .isolate.dual { height: 80px; } div.blend-wrap { display: flex; min-height: calc(120px + 0.8em); width: 100%; } div.blend-wrap > :not(.blend-content) { order: 0; } div.blend-wrap .isolate { margin-top: 0.8em; } div.blend-wrap > .blend-content { order: 1; } .blend-normal .circle { mix-blend-mode: normal; } .blend-multiply .circle { mix-blend-mode: multiply; } .blend-screen .circle { mix-blend-mode: screen; } .blend-overlay .circle { mix-blend-mode: overlay; } .blend-color-burn .circle { mix-blend-mode: color-burn; } .blend-color-dodge .circle { mix-blend-mode: color-dodge; } .blend-exclusion .circle { mix-blend-mode: exclusion; } .blend-difference .circle { mix-blend-mode: difference; } .blend-darken .circle { mix-blend-mode: darken; } .blend-lighten .circle { mix-blend-mode: lighten; } .blend-soft-light .circle { mix-blend-mode: soft-light; } .blend-hard-light .circle { mix-blend-mode: hard-light; } .blend-hue .circle { mix-blend-mode: hue; } .blend-saturation .circle { mix-blend-mode: saturation; } .blend-luminosity .circle { mix-blend-mode: luminosity; } .blend-color .circle { mix-blend-mode: color; } img.trans-bg { background-color: var(--swatch-bg-color); background-image: linear-gradient(45deg,var(--swatch-bg-alt-color) 25%,transparent 25%),linear-gradient(-45deg,var(--swatch-bg-alt-color) 25%,transparent 25%),linear-gradient(45deg,transparent 75%,var(--swatch-bg-alt-color) 75%),linear-gradient(-45deg,transparent 75%, var(--swatch-bg-alt-color) 75%); background-position: 0 0,0 0.49em,0.49em -0.49em,-0.49em 0; background-size: 1em 1em; } .info-container {display: inline-block;}","title":"Lighter"},{"location":"contrast/","text":"Contrast ColorAide provides a number of utilities related to luminance and contrast. Relative Luminance In the CIE XYZ and xyY color spaces, the Y parameter is linear to changes in the volume of light. Specifically this refers to the amount of reflected light where 1.0 is assumed to be a perfect reflector in relation to the reference white. The luminance method exposes access to this value to make it quick and easy to query the relative luminance, or Y parameter from XYZ D65 after converting the current color. >>> Color ( \"black\" ) . luminance () 0.0 >>> Color ( \"white\" ) . luminance () 1.0 >>> Color ( \"blue\" ) . luminance () 0.07219231536073371 Color(\"black\").luminance() Color(\"white\").luminance() Color(\"blue\").luminance() Edit Share Run Cancel Luminance and WCAG 2.1 Luminance as described in the WCAG 2.1 spec is essentially the exact same as what the luminance method returns. The only difference is the lower precision by which they calculate the value: >>> r , g , b = Color ( 'purple' )[: - 1 ] >>> r = r / 12.92 if r <= 0.03928 else (( r + 0.055 ) / 1.055 ) ** 2.4 >>> g = g / 12.92 if g <= 0.03928 else (( g + 0.055 ) / 1.055 ) ** 2.4 >>> b = b / 12.92 if b <= 0.03928 else (( b + 0.055 ) / 1.055 ) ** 2.4 >>> l = ( 0.2126 * r + 0.7152 * g + 0.0722 * b ) >>> print ( l ) 0.06147707043243851 >>> Color ( 'purple' ) . convert ( 'xyz-d65' )[ 'y' ] 0.06148383144929487 r, g, b = Color('purple')[:-1] r = r / 12.92 if r <= 0.03928 else ((r + 0.055) / 1.055) ** 2.4 g = g / 12.92 if g <= 0.03928 else ((g + 0.055) / 1.055) ** 2.4 b = b / 12.92 if b <= 0.03928 else ((b + 0.055) / 1.055) ** 2.4 l = (0.2126 * r + 0.7152 * g + 0.0722 * b) print(l) Color('purple').convert('xyz-d65')['y'] Edit Share Run Cancel Contrast There have actually been numerous approaches to determining reliable contrast. ColorAide currently only implements the color contrast ratio as outlined in the WCAG 2.1 spec , but has done so as a plugin to allow for expanding implementations in the future to allow for more reliable approaches as the WCAG 2.1 approach is not without flaws. It should be noted that as we talk about contrast, we will refer to the colors as the text and background as this is generally the context in which such a function is used. The text is always the calling color and the background is the input parameter. Not all contrast algorithms care about such details, but it is important to note as some future algorithms assuredly will. text . contrast ( background ) While in all normal circumstances a negative luminance should not occur, if one does occur, the luminance will be clamped to zero. # Where `l1` is the lighter luminance and `l2` the darker contrast_ratio = ( l1 + 0.05 ) / ( l2 + 0.05 ) To get the this contrast ratio between two colors, simply pass in the second color: >>> Color ( \"blue\" ) . contrast ( \"red\" ) 2.149390533243867 Color(\"blue\").contrast(\"red\") Edit Share Run Cancel Distancing and Symmetry It should be noted that not all contrast algorithms are symmetrical. Some are order dependent. Methods Symmetrical Description wcag21 WCAG 2.1 contrast ratio. To use different methods, simply specify the method via the method parameter: >>> Color ( \"blue\" ) . contrast ( \"red\" , method = 'wcag21' ) 2.149390533243867 Color(\"blue\").contrast(\"red\", method='wcag21') Edit Share Run Cancel .info-container {display: inline-block;}","title":"Contrast"},{"location":"contrast/#contrast","text":"ColorAide provides a number of utilities related to luminance and contrast.","title":"Contrast"},{"location":"contrast/#relative-luminance","text":"In the CIE XYZ and xyY color spaces, the Y parameter is linear to changes in the volume of light. Specifically this refers to the amount of reflected light where 1.0 is assumed to be a perfect reflector in relation to the reference white. The luminance method exposes access to this value to make it quick and easy to query the relative luminance, or Y parameter from XYZ D65 after converting the current color. >>> Color ( \"black\" ) . luminance () 0.0 >>> Color ( \"white\" ) . luminance () 1.0 >>> Color ( \"blue\" ) . luminance () 0.07219231536073371 Color(\"black\").luminance() Color(\"white\").luminance() Color(\"blue\").luminance() Edit Share Run Cancel Luminance and WCAG 2.1 Luminance as described in the WCAG 2.1 spec is essentially the exact same as what the luminance method returns. The only difference is the lower precision by which they calculate the value: >>> r , g , b = Color ( 'purple' )[: - 1 ] >>> r = r / 12.92 if r <= 0.03928 else (( r + 0.055 ) / 1.055 ) ** 2.4 >>> g = g / 12.92 if g <= 0.03928 else (( g + 0.055 ) / 1.055 ) ** 2.4 >>> b = b / 12.92 if b <= 0.03928 else (( b + 0.055 ) / 1.055 ) ** 2.4 >>> l = ( 0.2126 * r + 0.7152 * g + 0.0722 * b ) >>> print ( l ) 0.06147707043243851 >>> Color ( 'purple' ) . convert ( 'xyz-d65' )[ 'y' ] 0.06148383144929487 r, g, b = Color('purple')[:-1] r = r / 12.92 if r <= 0.03928 else ((r + 0.055) / 1.055) ** 2.4 g = g / 12.92 if g <= 0.03928 else ((g + 0.055) / 1.055) ** 2.4 b = b / 12.92 if b <= 0.03928 else ((b + 0.055) / 1.055) ** 2.4 l = (0.2126 * r + 0.7152 * g + 0.0722 * b) print(l) Color('purple').convert('xyz-d65')['y'] Edit Share Run Cancel","title":"Relative Luminance"},{"location":"contrast/#contrast_1","text":"There have actually been numerous approaches to determining reliable contrast. ColorAide currently only implements the color contrast ratio as outlined in the WCAG 2.1 spec , but has done so as a plugin to allow for expanding implementations in the future to allow for more reliable approaches as the WCAG 2.1 approach is not without flaws. It should be noted that as we talk about contrast, we will refer to the colors as the text and background as this is generally the context in which such a function is used. The text is always the calling color and the background is the input parameter. Not all contrast algorithms care about such details, but it is important to note as some future algorithms assuredly will. text . contrast ( background ) While in all normal circumstances a negative luminance should not occur, if one does occur, the luminance will be clamped to zero. # Where `l1` is the lighter luminance and `l2` the darker contrast_ratio = ( l1 + 0.05 ) / ( l2 + 0.05 ) To get the this contrast ratio between two colors, simply pass in the second color: >>> Color ( \"blue\" ) . contrast ( \"red\" ) 2.149390533243867 Color(\"blue\").contrast(\"red\") Edit Share Run Cancel Distancing and Symmetry It should be noted that not all contrast algorithms are symmetrical. Some are order dependent. Methods Symmetrical Description wcag21 WCAG 2.1 contrast ratio. To use different methods, simply specify the method via the method parameter: >>> Color ( \"blue\" ) . contrast ( \"red\" , method = 'wcag21' ) 2.149390533243867 Color(\"blue\").contrast(\"red\", method='wcag21') Edit Share Run Cancel .info-container {display: inline-block;}","title":"Contrast"},{"location":"distance/","text":"Color Distance and Delta E The difference or distance between two colors allows for a quantified analysis of how far apart two colors are from one another. This metric is of particular interest in the field of color science, but it has practical applications in color libraries working with colors. Usually, color distance is applied to near perceptual uniform color spaces in order to obtain a metric regarding a color's visual, perceptual distance from another color. This can be useful in gamut mapping or even determining that colors are close enough or far enough away from each other. Color Distance ColorAide provides a simple euclidean color distance function. By default, it evaluates the distance in the CIELab color space, but it can be configured to evaluate in any color space, such as Oklab, etc. It may be less useful in some color spaces compared to others. Some spaces may not be well suited, such as cylindrical spaces. Some spaces might not be as very perceptually uniform as others requiring more complex algorithms. >>> Color ( \"red\" ) . distance ( \"blue\" , space = \"srgb\" ) 1.4142135623730951 >>> Color ( \"red\" ) . distance ( \"blue\" , space = \"lab\" ) 184.0190486209969 Color(\"red\").distance(\"blue\", space=\"srgb\") Color(\"red\").distance(\"blue\", space=\"lab\") Edit Share Run Cancel Delta E The delta_e function gives access to various \u2206E implementations, which are just different algorithms to calculate distance. Some are simply Euclidean distance withing a certain color space, some are far more complex. If no method is specified, the default implementation is \u2206E * ab (CIE76) which uses a simple Euclidean distancing algorithm on the CIELab color space. It is fast, but not as accurate as later iterations of the algorithm as CIELab is not actually as perceptually uniform as it was thought when CIELab was originally developed. >>> Color ( \"red\" ) . delta_e ( \"blue\" ) 176.3084955965824 Color(\"red\").delta_e(\"blue\") Edit Share Run Cancel When method is set, the specified \u2206E algorithm will be used instead. For instance, below we use \u2206E 00 which is a more complex algorithm that accounts for the CIELab's weakness in perceptually uniformity. It does come at the cost of being a little slower. >>> Color ( \"red\" ) . delta_e ( \"blue\" , method = \"2000\" ) 52.87819528592645 Color(\"red\").delta_e(\"blue\", method=\"2000\") Edit Share Run Cancel Distancing and Symmetry It should be noted that not all distancing algorithms are symmetrical. Some are order dependent. Below are all the supported \u2206E methods that are included in the default coloraide.Color object. Follow relevant links to read the specs and find out more about a given \u2206E method. Delta E Symmetrical Name Parameters \u2206E * ab (CIE76) 76 \u2206E * cmc (CMC l:c (1984)) cmc l=2, c=1 \u2206E * 94 (CIE94) 94 kl=1, k1=0.045, k2=0.015 \u2206E * 00 (CIEDE2000) 2000 kl=1, kc=1, kh=1 \u2206E HyAB (HyAB) hyab space=\"lab-d65\" \u2206E ok ok scalar=1 The following are also available, but they must be manually registered by creating a custom class , or can be accessed by use coloraide.everything.ColorAll instead of coloraide.Color . The associated color space must be registered as well. Delta E Symmetrical Name Parameters \u2206E itp (ICtCp) itp scalar=720 \u2206E z (Jzazbz) jz \u2206E 99o (DIN99o) 99o Finding Closest Color ColorAide implements a simple way to find the closest color, given a list of colors, to another color. The method is called closest and takes a list of colors that are to be compared to the calling color object. The first color with the smallest distance between the calling color object and itself will be considered the nearest/closest color. Consider the following example. Here we provide a list of colors to compare against red . After comparing all the colors, the closest ends up being maroon . >>> Color ( 'red' ) . closest ([ 'pink' , 'yellow' , 'green' , 'blue' , 'purple' , 'maroon' ]) color(srgb 0.50196 0 0 / 1) Color('red').closest(['pink', 'yellow', 'green', 'blue', 'purple', 'maroon']) Edit Share Run Cancel The default distancing method is used if one is not supplied, but others can be used: >>> Color ( 'red' ) . closest ([ 'pink' , 'yellow' , 'green' , 'blue' , 'purple' , 'maroon' ], method = '2000' ) color(srgb 0.50196 0 0 / 1) Color('red').closest(['pink', 'yellow', 'green', 'blue', 'purple', 'maroon'], method='2000') Edit Share Run Cancel .info-container {display: inline-block;}","title":"Color Distance and Delta E"},{"location":"distance/#color-distance-and-delta-e","text":"The difference or distance between two colors allows for a quantified analysis of how far apart two colors are from one another. This metric is of particular interest in the field of color science, but it has practical applications in color libraries working with colors. Usually, color distance is applied to near perceptual uniform color spaces in order to obtain a metric regarding a color's visual, perceptual distance from another color. This can be useful in gamut mapping or even determining that colors are close enough or far enough away from each other.","title":"Color Distance and Delta E"},{"location":"distance/#color-distance","text":"ColorAide provides a simple euclidean color distance function. By default, it evaluates the distance in the CIELab color space, but it can be configured to evaluate in any color space, such as Oklab, etc. It may be less useful in some color spaces compared to others. Some spaces may not be well suited, such as cylindrical spaces. Some spaces might not be as very perceptually uniform as others requiring more complex algorithms. >>> Color ( \"red\" ) . distance ( \"blue\" , space = \"srgb\" ) 1.4142135623730951 >>> Color ( \"red\" ) . distance ( \"blue\" , space = \"lab\" ) 184.0190486209969 Color(\"red\").distance(\"blue\", space=\"srgb\") Color(\"red\").distance(\"blue\", space=\"lab\") Edit Share Run Cancel","title":"Color Distance"},{"location":"distance/#delta-e","text":"The delta_e function gives access to various \u2206E implementations, which are just different algorithms to calculate distance. Some are simply Euclidean distance withing a certain color space, some are far more complex. If no method is specified, the default implementation is \u2206E * ab (CIE76) which uses a simple Euclidean distancing algorithm on the CIELab color space. It is fast, but not as accurate as later iterations of the algorithm as CIELab is not actually as perceptually uniform as it was thought when CIELab was originally developed. >>> Color ( \"red\" ) . delta_e ( \"blue\" ) 176.3084955965824 Color(\"red\").delta_e(\"blue\") Edit Share Run Cancel When method is set, the specified \u2206E algorithm will be used instead. For instance, below we use \u2206E 00 which is a more complex algorithm that accounts for the CIELab's weakness in perceptually uniformity. It does come at the cost of being a little slower. >>> Color ( \"red\" ) . delta_e ( \"blue\" , method = \"2000\" ) 52.87819528592645 Color(\"red\").delta_e(\"blue\", method=\"2000\") Edit Share Run Cancel Distancing and Symmetry It should be noted that not all distancing algorithms are symmetrical. Some are order dependent. Below are all the supported \u2206E methods that are included in the default coloraide.Color object. Follow relevant links to read the specs and find out more about a given \u2206E method. Delta E Symmetrical Name Parameters \u2206E * ab (CIE76) 76 \u2206E * cmc (CMC l:c (1984)) cmc l=2, c=1 \u2206E * 94 (CIE94) 94 kl=1, k1=0.045, k2=0.015 \u2206E * 00 (CIEDE2000) 2000 kl=1, kc=1, kh=1 \u2206E HyAB (HyAB) hyab space=\"lab-d65\" \u2206E ok ok scalar=1 The following are also available, but they must be manually registered by creating a custom class , or can be accessed by use coloraide.everything.ColorAll instead of coloraide.Color . The associated color space must be registered as well. Delta E Symmetrical Name Parameters \u2206E itp (ICtCp) itp scalar=720 \u2206E z (Jzazbz) jz \u2206E 99o (DIN99o) 99o","title":"Delta E"},{"location":"distance/#finding-closest-color","text":"ColorAide implements a simple way to find the closest color, given a list of colors, to another color. The method is called closest and takes a list of colors that are to be compared to the calling color object. The first color with the smallest distance between the calling color object and itself will be considered the nearest/closest color. Consider the following example. Here we provide a list of colors to compare against red . After comparing all the colors, the closest ends up being maroon . >>> Color ( 'red' ) . closest ([ 'pink' , 'yellow' , 'green' , 'blue' , 'purple' , 'maroon' ]) color(srgb 0.50196 0 0 / 1) Color('red').closest(['pink', 'yellow', 'green', 'blue', 'purple', 'maroon']) Edit Share Run Cancel The default distancing method is used if one is not supplied, but others can be used: >>> Color ( 'red' ) . closest ([ 'pink' , 'yellow' , 'green' , 'blue' , 'purple' , 'maroon' ], method = '2000' ) color(srgb 0.50196 0 0 / 1) Color('red').closest(['pink', 'yellow', 'green', 'blue', 'purple', 'maroon'], method='2000') Edit Share Run Cancel .info-container {display: inline-block;}","title":"Finding Closest Color"},{"location":"filters/","text":"Filters ColorAide implements a number of filters implemented as plugins. The first set of filters mirror those found in the W3C Filter Effects Module Level 1 specification, specifically the filters that directly apply to colors. The second set of filters simulate color vision deficiencies. W3C Filter Effects The following filters are all supported in ColorAide and generally adhere to the specification in regards to behavior. By default, filters are applied in the Linear sRGB color space, but can be applied in sRGB if requested. All other color spaces will throw an error. Normal Brightness Saturate Contrast Opacity Invert Hue Rotate Sepia Grayscale In ColorAide, just call the filter method and provide the name of the filter. If amount is not provided, the default according to the W3C spec will be used instead. >>> inputs = [ 'red' , 'orange' , 'yellow' , 'green' , 'blue' , 'indigo' , 'violet' ] >>> colors = Color . steps ( inputs , steps = 10 , space = 'srgb' ) >>> HtmlRow ( colors ) [color(srgb 1 0 0 / 1), color(srgb 1 0.43137 0 / 1), color(srgb 1 0.76471 0 / 1), color(srgb 1 1 0 / 1), color(srgb 0.33333 0.66797 0 / 1), color(srgb 0 0.33464 0.33333 / 1), color(srgb 0 0 1 / 1), color(srgb 0.19608 0 0.6732 / 1), color(srgb 0.50719 0.16993 0.65098 / 1), color(srgb 0.93333 0.5098 0.93333 / 1)] >>> HtmlRow ([ c . filter ( 'brightness' , 0.5 ) . clip () for c in colors ]) [color(srgb 0.73536 0 0 / 1), color(srgb 0.73536 0.30937 0 / 1), color(srgb 0.73536 0.55909 0 / 1), color(srgb 0.73536 0.73536 0 / 1), color(srgb 0.23592 0.48662 0 / 1), color(srgb 0 0.2369 0.23592 / 1), color(srgb 0 0 0.73536 / 1), color(srgb 0.1331 0 0.49054 / 1), color(srgb 0.36617 0.11351 0.47389 / 1), color(srgb 0.68541 0.36812 0.68541 / 1)] >>> HtmlRow ([ c . filter ( 'saturate' , 0.5 ) . clip () for c in colors ]) [color(srgb 0.80157 0.35994 0.35994 / 1), color(srgb 0.83354 0.52732 0.43949 / 1), color(srgb 0.90713 0.78242 0.58525 / 1), color(srgb 0.98401 0.98401 0.71113 / 1), color(srgb 0.48389 0.63095 0.42887 / 1), color(srgb 0.20909 0.31673 0.31603 / 1), color(srgb 0.20907 0.20907 0.75859 / 1), color(srgb 0.20327 0.14367 0.51016 / 1), color(srgb 0.43195 0.26768 0.52372 / 1), color(srgb 0.81475 0.59544 0.81475 / 1)] >>> HtmlRow ([ c . filter ( 'contrast' , 1.2 ) . clip () for c in colors ]) [color(srgb 1 0 0 / 1), color(srgb 1 0.32661 0 / 1), color(srgb 1 0.7704 0 / 1), color(srgb 1 1 0 / 1), color(srgb 0.09327 0.6534 0 / 1), color(srgb 0 0.09916 0.09327 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 0.65985 / 1), color(srgb 0.44285 0 0.63233 / 1), color(srgb 0.96674 0.44657 0.96674 / 1)] >>> HtmlRow ([ c . filter ( 'opacity' , 0.5 ) . clip () for c in colors ]) [color(srgb 1 0 0 / 0.5), color(srgb 1 0.43137 0 / 0.5), color(srgb 1 0.76471 0 / 0.5), color(srgb 1 1 0 / 0.5), color(srgb 0.33333 0.66797 0 / 0.5), color(srgb 0 0.33464 0.33333 / 0.5), color(srgb 0 0 1 / 0.5), color(srgb 0.19608 0 0.6732 / 0.5), color(srgb 0.50719 0.16993 0.65098 / 0.5), color(srgb 0.93333 0.5098 0.93333 / 0.5)] >>> HtmlRow ([ c . filter ( 'invert' , 1 ) . clip () for c in colors ]) [color(srgb 0 1 1 / 1), color(srgb 0 0.92805 1 / 1), color(srgb 0 0.7044 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0.95896 0.79553 1 / 1), color(srgb 1 0.95861 0.95896 / 1), color(srgb 1 1 0 / 1), color(srgb 0.98585 1 0.79133 / 1), color(srgb 0.89586 0.98915 0.8087 / 1), color(srgb 0.41688 0.8946 0.41688 / 1)] >>> HtmlRow ([ c . filter ( 'hue-rotate' , 90 ) . clip () for c in colors ]) [color(srgb 0 0.63105 0 / 1), color(srgb 0 0.72828 0 / 1), color(srgb 0 0.91755 0.49164 / 1), color(srgb 0 1 0.93382 / 1), color(srgb 0 0.64804 0.75171 / 1), color(srgb 0.33333 0.26972 0.41556 / 1), color(srgb 1 0 0.41551 / 1), color(srgb 0.6732 0 0.22332 / 1), color(srgb 0.65098 0.14767 0 / 1), color(srgb 0.93333 0.59681 0 / 1)] >>> HtmlRow ([ c . filter ( 'sepia' , 1 ) . clip () for c in colors ]) [color(srgb 0.65991 0.6254 0.55828 / 1), color(srgb 0.7438 0.70557 0.63046 / 1), color(srgb 0.91264 0.86683 0.77568 / 1), color(srgb 1 1 0.90933 / 1), color(srgb 0.62309 0.59145 0.52742 / 1), color(srgb 0.32748 0.3096 0.27351 / 1), color(srgb 0.47196 0.44672 0.39732 / 1), color(srgb 0.33214 0.31357 0.27727 / 1), color(srgb 0.45856 0.43394 0.38572 / 1), color(srgb 0.83745 0.79487 0.71097 / 1)] >>> HtmlRow ([ c . filter ( 'grayscale' , 1 ) . clip () for c in colors ]) [color(srgb 0.49844 0.49844 0.49844 / 1), color(srgb 0.60475 0.60475 0.60475 / 1), color(srgb 0.79945 0.79945 0.79945 / 1), color(srgb 0.96757 0.96757 0.96757 / 1), color(srgb 0.59093 0.59093 0.59093 / 1), color(srgb 0.2976 0.2976 0.2976 / 1), color(srgb 0.29789 0.29789 0.29789 / 1), color(srgb 0.2104 0.2104 0.2104 / 1), color(srgb 0.33536 0.33536 0.33536 / 1), color(srgb 0.66755 0.66755 0.66755 / 1)] inputs = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'] colors = Color.steps(inputs, steps=10, space='srgb') HtmlRow(colors) HtmlRow([c.filter('brightness', 0.5).clip() for c in colors]) HtmlRow([c.filter('saturate', 0.5).clip() for c in colors]) HtmlRow([c.filter('contrast', 1.2).clip() for c in colors]) HtmlRow([c.filter('opacity', 0.5).clip() for c in colors]) HtmlRow([c.filter('invert', 1).clip() for c in colors]) HtmlRow([c.filter('hue-rotate', 90).clip() for c in colors]) HtmlRow([c.filter('sepia', 1).clip() for c in colors]) HtmlRow([c.filter('grayscale', 1).clip() for c in colors]) Edit Share Run Cancel Color Vision Deficiency Simulation Color blindness or color vision deficiency ( CVD ) affects approximately 1 in 12 men (8%) and 1 in 200 women. CVD affects millions of people in the world, and many people have no idea that they are color blind and not seeing the full spectrum that others see. CVD simulation allows those who do not suffer with one of the many different variations of color blindness, to simulate what someone with a CVD would see. Keep in mind that these are just approximations, and that a given type of CVD can be quite different from person to person in severity. The human eye has 3 types of cones that are used to perceive colors. Each of these cones can become deficient, either through genetics, or other means. Each type of cone is responsible for perceiving either red, green, or blue colors. A CVD occurs when one or more of these cones are missing or not functioning properly. There are severe cases where one of the three cones will not perceive color at all, and there are others were the cones may just be less sensitive. Dichromacy Dichromacy is a type of CVD that has the characteristics of essentially causing the person to only have two functioning cones for perceiving colors. This essentially flattens the color spectrum into a 2D plane. Protanopia describes the CVD where the cone responsible for red light does not function, deuteranopia describes the CVD affecting the green cone, and tritanopia describes deficiencies with the blue cone. Normal Protanopia Deuteranopia Tritanopia By default, ColorAide uses the Brettel 1997 method to simulate tritanopia and the Vi\u00e9not, Brettel, and Mollon 1999 approach to simulate protanopia and and deuteranopia. While Brettel is probably the best approach for all cases, Vi\u00e9not is much faster and does quite well for protanopia and deuteranopia. >>> inputs = [ 'red' , 'orange' , 'yellow' , 'green' , 'blue' , 'indigo' , 'violet' ] >>> colors = Color . steps ( inputs , steps = 10 , space = 'srgb' ) >>> HtmlRow ( colors ) [color(srgb 1 0 0 / 1), color(srgb 1 0.43137 0 / 1), color(srgb 1 0.76471 0 / 1), color(srgb 1 1 0 / 1), color(srgb 0.33333 0.66797 0 / 1), color(srgb 0 0.33464 0.33333 / 1), color(srgb 0 0 1 / 1), color(srgb 0.19608 0 0.6732 / 1), color(srgb 0.50719 0.16993 0.65098 / 1), color(srgb 0.93333 0.5098 0.93333 / 1)] >>> HtmlRow ([ c . filter ( 'protan' ) . clip () for c in colors ]) [color(srgb 0.36376 0.36376 0.05572 / 1), color(srgb 0.53494 0.53494 0.04817 / 1), color(srgb 0.79488 0.79488 0.02624 / 1), color(srgb 1 1 0 / 1), color(srgb 0.6419 0.6419 0 / 1), color(srgb 0.31637 0.31637 0.3326 / 1), color(srgb 0 0 1 / 1), color(srgb 0.04466 0.04466 0.67331 / 1), color(srgb 0.2371 0.2371 0.65166 / 1), color(srgb 0.57669 0.57669 0.93469 / 1)] >>> HtmlRow ([ c . filter ( 'deutan' ) . clip () for c in colors ]) [color(srgb 0.57511 0.57511 0 / 1), color(srgb 0.66589 0.66589 0 / 1), color(srgb 0.84206 0.84206 0 / 1), color(srgb 1 1 0 / 1), color(srgb 0.59514 0.59514 0.07745 / 1), color(srgb 0.28277 0.28277 0.33689 / 1), color(srgb 0 0 1 / 1), color(srgb 0.09496 0.09496 0.67268 / 1), color(srgb 0.3161 0.3161 0.64764 / 1), color(srgb 0.67012 0.67012 0.92662 / 1)] >>> HtmlRow ([ c . filter ( 'tritan' ) . clip () for c in colors ]) [color(srgb 1 0 0.3076 / 1), color(srgb 1 0.38816 0.48865 / 1), color(srgb 1 0.71252 0.74852 / 1), color(srgb 1 0.93755 0.94959 / 1), color(srgb 0.44366 0.61688 0.68363 / 1), color(srgb 0.07188 0.32489 0.39021 / 1), color(srgb 0 0.37542 0.5281 / 1), color(srgb 0 0.24684 0.32622 / 1), color(srgb 0.44629 0.295 0.31173 / 1), color(srgb 0.88848 0.58545 0.61964 / 1)] inputs = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'] colors = Color.steps(inputs, steps=10, space='srgb') HtmlRow(colors) HtmlRow([c.filter('protan').clip() for c in colors]) HtmlRow([c.filter('deutan').clip() for c in colors]) HtmlRow([c.filter('tritan').clip() for c in colors]) Edit Share Run Cancel If desired, any of the three available methods can be used. Brettel is usually considered best option for accuracy. Vi\u00e9not is faster and does quite well for protanopia and deuteranopia, but is not quite as accurate for tritanopia. Machado 2009 has better logic for severity ranges less than 1, but is probably even further off for tritanopia. >>> inputs = [ 'red' , 'orange' , 'yellow' , 'green' , 'blue' , 'indigo' , 'violet' ] >>> colors = Color . steps ( inputs , steps = 10 , space = 'srgb' ) >>> HtmlRow ( colors ) [color(srgb 1 0 0 / 1), color(srgb 1 0.43137 0 / 1), color(srgb 1 0.76471 0 / 1), color(srgb 1 1 0 / 1), color(srgb 0.33333 0.66797 0 / 1), color(srgb 0 0.33464 0.33333 / 1), color(srgb 0 0 1 / 1), color(srgb 0.19608 0 0.6732 / 1), color(srgb 0.50719 0.16993 0.65098 / 1), color(srgb 0.93333 0.5098 0.93333 / 1)] >>> HtmlRow ([ c . filter ( 'tritan' , method = 'brettel' ) . clip () for c in colors ]) [color(srgb 1 0 0.3076 / 1), color(srgb 1 0.38816 0.48865 / 1), color(srgb 1 0.71252 0.74852 / 1), color(srgb 1 0.93755 0.94959 / 1), color(srgb 0.44366 0.61688 0.68363 / 1), color(srgb 0.07188 0.32489 0.39021 / 1), color(srgb 0 0.37542 0.5281 / 1), color(srgb 0 0.24684 0.32622 / 1), color(srgb 0.44629 0.295 0.31173 / 1), color(srgb 0.88848 0.58545 0.61964 / 1)] >>> HtmlRow ([ c . filter ( 'tritan' , method = 'vienot' ) . clip () for c in colors ]) [color(srgb 1 0 0 / 1), color(srgb 1 0.40333 0.40333 / 1), color(srgb 1 0.71744 0.71744 / 1), color(srgb 1 0.93916 0.93916 / 1), color(srgb 0.42673 0.62628 0.62628 / 1), color(srgb 0.00145 0.33447 0.33447 / 1), color(srgb 0 0.39998 0.39998 / 1), color(srgb 0 0.25904 0.25904 / 1), color(srgb 0.44469 0.29729 0.29729 / 1), color(srgb 0.88533 0.59014 0.59014 / 1)] >>> HtmlRow ([ c . filter ( 'tritan' , method = 'machado' ) . clip () for c in colors ]) [color(srgb 1 0 0.05839 / 1), color(srgb 1 0.28649 0.36958 / 1), color(srgb 1 0.6869 0.65152 / 1), color(srgb 1 0.93208 0.85219 / 1), color(srgb 0.31913 0.64112 0.56532 / 1), color(srgb 0 0.34691 0.33347 / 1), color(srgb 0 0.42038 0.58728 / 1), color(srgb 0 0.26742 0.38855 / 1), color(srgb 0.49244 0.2757 0.40142 / 1), color(srgb 0.95631 0.5535 0.67867 / 1)] inputs = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'] colors = Color.steps(inputs, steps=10, space='srgb') HtmlRow(colors) HtmlRow([c.filter('tritan', method='brettel').clip() for c in colors]) HtmlRow([c.filter('tritan', method='vienot').clip() for c in colors]) HtmlRow([c.filter('tritan', method='machado').clip() for c in colors]) Edit Share Run Cancel Anomalous Trichromacy While Dichromacy is probably the more severe case with only two functional cones, a more common CVD type is anomalous trichromacy. In this case, a person will have three functioning cones, but not all of the cones function with full sensitivity. Sometimes, the sensitivity can be so low, that their ability to perceive color may be close to someone with dichromacy. While dichromacy may be considered a severity 1, a given case of anomalous trichromacy could be anywhere between 0 and 1, where 0 would be no CVD . Like dichromacy, the related deficiencies are named in a similar manner: protanomaly (reduced red sensitivity), deuteranomaly (reduced green sensitivity), and tritanomaly (reduced blue sensitivity). Normal Protanomaly Severity 0.5 Protanomaly Severity 0.7 Protanomaly Severity 0.9 To represent anomalous trichromacy, ColorAide leans on the Machado 2009 approach which has a more nuanced approach to handling severity levels below 1. This approach did not really focus on tritanopia though, and the suggested algorithm for tritanopia should only be considered as an approximation. Instead of relying on the Machado approach for tritanomaly, we instead just use linear interpolation between the severity 1 results and the severity 0 (no CVD ) results. With that said, the method can always be overridden to use something other than the defaults. >>> inputs = [ 'red' , 'orange' , 'yellow' , 'green' , 'blue' , 'indigo' , 'violet' ] >>> colors = Color . steps ( inputs , steps = 10 , space = 'srgb' ) >>> HtmlRow ( colors ) [color(srgb 1 0 0 / 1), color(srgb 1 0.43137 0 / 1), color(srgb 1 0.76471 0 / 1), color(srgb 1 1 0 / 1), color(srgb 0.33333 0.66797 0 / 1), color(srgb 0 0.33464 0.33333 / 1), color(srgb 0 0 1 / 1), color(srgb 0.19608 0 0.6732 / 1), color(srgb 0.50719 0.16993 0.65098 / 1), color(srgb 0.93333 0.5098 0.93333 / 1)] >>> HtmlRow ([ c . filter ( 'protan' , 0.75 ) . clip () for c in colors ]) [color(srgb 0.57444 0.36279 0 / 1), color(srgb 0.68557 0.52161 0 / 1), color(srgb 0.89278 0.76762 0 / 1), color(srgb 1 0.96325 0 / 1), color(srgb 0.65314 0.61548 0 / 1), color(srgb 0.2832 0.31636 0.33437 / 1), color(srgb 0 0.31631 1 / 1), color(srgb 0 0.21199 0.68441 / 1), color(srgb 0.14543 0.30324 0.66031 / 1), color(srgb 0.57941 0.62064 0.94276 / 1)] >>> HtmlRow ([ c . filter ( 'deutan' , 0.75 ) . clip () for c in colors ]) [color(srgb 0.69457 0.52313 0 / 1), color(srgb 0.77249 0.62491 0 / 1), color(srgb 0.93243 0.81477 0.08507 / 1), color(srgb 1 0.98058 0.16863 / 1), color(srgb 0.62247 0.59458 0.12005 / 1), color(srgb 0.25131 0.29322 0.33527 / 1), color(srgb 0 0.23104 0.9893 / 1), color(srgb 0 0.17352 0.66554 / 1), color(srgb 0.2229 0.32529 0.64248 / 1), color(srgb 0.64769 0.66513 0.92233 / 1)] >>> HtmlRow ([ c . filter ( 'tritan' , 0.75 ) . clip () for c in colors ]) [color(srgb 1 0 0.26664 / 1), color(srgb 1 0.39951 0.42724 / 1), color(srgb 1 0.72603 0.65776 / 1), color(srgb 1 0.95367 0.83611 / 1), color(srgb 0.4194 0.63016 0.60019 / 1), color(srgb 0.05755 0.32736 0.37697 / 1), color(srgb 0 0.3268 0.68775 / 1), color(srgb 0 0.21274 0.44656 / 1), color(srgb 0.46246 0.26991 0.4298 / 1), color(srgb 0.89997 0.56774 0.71539 / 1)] inputs = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'] colors = Color.steps(inputs, steps=10, space='srgb') HtmlRow(colors) HtmlRow([c.filter('protan', 0.75).clip() for c in colors]) HtmlRow([c.filter('deutan', 0.75).clip() for c in colors]) HtmlRow([c.filter('tritan', 0.75).clip() for c in colors]) Edit Share Run Cancel Usage Details To use filters, a filter name must be given, followed by an optional amount. If an amount is omitted, suitable default will be used. The exact range a given filter accepts varies depending on the filter. If a value exceeds the filter range , the value will be clamped. Filters Name Default Brightness brightness 1 Saturation saturate 1 Contrast contrast 1 Opacity opacity 1 Invert invert 1 Hue rotation hue-rotate 0 Sepia sepia 1 Grayscale grayscale 1 Protan protan 1 Deutan deutan 1 Tritan tritan 1 All of the filters that are supported allow filtering in the Linear sRGB color space and will do so by default. Additionally, the W3C filter effects also support filtering in the sRGB color space. The CVD filters are specifically designed to be applied in the Linear sRGB space, and cannot be used in any other color space. >>> inputs = [ 'red' , 'orange' , 'yellow' , 'green' , 'blue' , 'indigo' , 'violet' ] >>> colors = Color . steps ( inputs , steps = 10 , space = 'srgb' ) >>> HtmlRow ( colors ) [color(srgb 1 0 0 / 1), color(srgb 1 0.43137 0 / 1), color(srgb 1 0.76471 0 / 1), color(srgb 1 1 0 / 1), color(srgb 0.33333 0.66797 0 / 1), color(srgb 0 0.33464 0.33333 / 1), color(srgb 0 0 1 / 1), color(srgb 0.19608 0 0.6732 / 1), color(srgb 0.50719 0.16993 0.65098 / 1), color(srgb 0.93333 0.5098 0.93333 / 1)] >>> HtmlRow ([ c . filter ( 'sepia' , 1 , space = 'srgb-linear' ) . clip () for c in colors ]) [color(srgb 0.65991 0.6254 0.55828 / 1), color(srgb 0.7438 0.70557 0.63046 / 1), color(srgb 0.91264 0.86683 0.77568 / 1), color(srgb 1 1 0.90933 / 1), color(srgb 0.62309 0.59145 0.52742 / 1), color(srgb 0.32748 0.3096 0.27351 / 1), color(srgb 0.47196 0.44672 0.39732 / 1), color(srgb 0.33214 0.31357 0.27727 / 1), color(srgb 0.45856 0.43394 0.38572 / 1), color(srgb 0.83745 0.79487 0.71097 / 1)] >>> HtmlRow ([ c . filter ( 'sepia' , 1 , space = 'srgb' ) . clip () for c in colors ]) [color(srgb 0.393 0.349 0.272 / 1), color(srgb 0.72473 0.64492 0.50235 / 1), color(srgb 0.98106 0.87359 0.68035 / 1), color(srgb 1 1 0.806 / 1), color(srgb 0.64467 0.57456 0.44736 / 1), color(srgb 0.32034 0.28556 0.22236 / 1), color(srgb 0.189 0.168 0.131 / 1), color(srgb 0.20429 0.18153 0.14152 / 1), color(srgb 0.45304 0.40295 0.31398 / 1), color(srgb 0.93524 0.83226 0.64837 / 1)] inputs = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'] colors = Color.steps(inputs, steps=10, space='srgb') HtmlRow(colors) HtmlRow([c.filter('sepia', 1, space='srgb-linear').clip() for c in colors]) HtmlRow([c.filter('sepia', 1, space='srgb').clip() for c in colors]) Edit Share Run Cancel Processing Lots of Colors One logical application for filters is to apply them directly to images. If you are performing these operations on millions of pixels, you may notice that ColorAide, with all of its convenience, may not always be the fastest. There is a cost due to the overhead of convenience and a cost due to the pure Python approach as well. With that said, there are tricks that can dramatically make things much faster in most cases! functools.lru_cache is your friend in such cases. We actually process all the images on this page with ColorAide to demonstrate the filters. The key to making it a quick and painless process was to cache repetitive operations. When processing images, it is highly likely that you will be performing the same operations on thousands of identical pixels. Caching the work you've already done can speed this process up exponentially. There are certainly some images that could be constructed in such a way to elicit a worse case scenario where the cache would not be able to compensate as well, but for most images, caching dramatically reduces processing time. We can crawl the pixels in a file, and using a simple function like below, we will only process a pixel once (at least until our cache fills and we start having to overwrite existing colors). @lru_cache ( maxsize = 1024 * 1024 ) def apply_filter ( name , amount , space , method , p , fit ): \"\"\"Apply filter.\"\"\" has_alpha = len ( p ) > 3 color = Color ( 'srgb' , [ x / 255 for x in p [: 3 ]], p [ 3 ] / 255 if has_alpha else 1 ) if method is not None : # This is a CVD filter that allows specifying the method color . filter ( name , amount , space = space , in_place = True , method = method ) else : # General filter. color . filter ( name , amount , space = space , in_place = True ) # Fit the color back into the color gamut and return the results return tuple ([ int ( x * 255 ) for x in color . fit ( method = fit )[: 3 if has_alpha else - 1 ]]) When processing a 4608x2456 image (15,925,248 pixels) during our testing, it turned a ~7 minute process into a ~25 second process * . Using gamut mapping opposed to simple clipping only increases time by to about ~56 seconds. The much smaller images shown on this page process much, much faster. The full script can be viewed here . * Tests were performed using the Pillow library. Results may vary depending on the size of the image, pixel configuration, number of unique pixels, etc. Cache size can be tweaked to optimize the results. img.trans-bg { background-color: var(--swatch-bg-color); background-image: linear-gradient(45deg,var(--swatch-bg-alt-color) 25%,transparent 25%),linear-gradient(-45deg,var(--swatch-bg-alt-color) 25%,transparent 25%),linear-gradient(45deg,transparent 75%,var(--swatch-bg-alt-color) 75%),linear-gradient(-45deg,transparent 75%, var(--swatch-bg-alt-color) 75%); background-position: 0 0,0 0.49em,0.49em -0.49em,-0.49em 0; background-size: 1em 1em; } .info-container {display: inline-block;}","title":"Filters"},{"location":"filters/#filters","text":"ColorAide implements a number of filters implemented as plugins. The first set of filters mirror those found in the W3C Filter Effects Module Level 1 specification, specifically the filters that directly apply to colors. The second set of filters simulate color vision deficiencies.","title":"Filters"},{"location":"filters/#w3c-filter-effects","text":"The following filters are all supported in ColorAide and generally adhere to the specification in regards to behavior. By default, filters are applied in the Linear sRGB color space, but can be applied in sRGB if requested. All other color spaces will throw an error. Normal Brightness Saturate Contrast Opacity Invert Hue Rotate Sepia Grayscale In ColorAide, just call the filter method and provide the name of the filter. If amount is not provided, the default according to the W3C spec will be used instead. >>> inputs = [ 'red' , 'orange' , 'yellow' , 'green' , 'blue' , 'indigo' , 'violet' ] >>> colors = Color . steps ( inputs , steps = 10 , space = 'srgb' ) >>> HtmlRow ( colors ) [color(srgb 1 0 0 / 1), color(srgb 1 0.43137 0 / 1), color(srgb 1 0.76471 0 / 1), color(srgb 1 1 0 / 1), color(srgb 0.33333 0.66797 0 / 1), color(srgb 0 0.33464 0.33333 / 1), color(srgb 0 0 1 / 1), color(srgb 0.19608 0 0.6732 / 1), color(srgb 0.50719 0.16993 0.65098 / 1), color(srgb 0.93333 0.5098 0.93333 / 1)] >>> HtmlRow ([ c . filter ( 'brightness' , 0.5 ) . clip () for c in colors ]) [color(srgb 0.73536 0 0 / 1), color(srgb 0.73536 0.30937 0 / 1), color(srgb 0.73536 0.55909 0 / 1), color(srgb 0.73536 0.73536 0 / 1), color(srgb 0.23592 0.48662 0 / 1), color(srgb 0 0.2369 0.23592 / 1), color(srgb 0 0 0.73536 / 1), color(srgb 0.1331 0 0.49054 / 1), color(srgb 0.36617 0.11351 0.47389 / 1), color(srgb 0.68541 0.36812 0.68541 / 1)] >>> HtmlRow ([ c . filter ( 'saturate' , 0.5 ) . clip () for c in colors ]) [color(srgb 0.80157 0.35994 0.35994 / 1), color(srgb 0.83354 0.52732 0.43949 / 1), color(srgb 0.90713 0.78242 0.58525 / 1), color(srgb 0.98401 0.98401 0.71113 / 1), color(srgb 0.48389 0.63095 0.42887 / 1), color(srgb 0.20909 0.31673 0.31603 / 1), color(srgb 0.20907 0.20907 0.75859 / 1), color(srgb 0.20327 0.14367 0.51016 / 1), color(srgb 0.43195 0.26768 0.52372 / 1), color(srgb 0.81475 0.59544 0.81475 / 1)] >>> HtmlRow ([ c . filter ( 'contrast' , 1.2 ) . clip () for c in colors ]) [color(srgb 1 0 0 / 1), color(srgb 1 0.32661 0 / 1), color(srgb 1 0.7704 0 / 1), color(srgb 1 1 0 / 1), color(srgb 0.09327 0.6534 0 / 1), color(srgb 0 0.09916 0.09327 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 0.65985 / 1), color(srgb 0.44285 0 0.63233 / 1), color(srgb 0.96674 0.44657 0.96674 / 1)] >>> HtmlRow ([ c . filter ( 'opacity' , 0.5 ) . clip () for c in colors ]) [color(srgb 1 0 0 / 0.5), color(srgb 1 0.43137 0 / 0.5), color(srgb 1 0.76471 0 / 0.5), color(srgb 1 1 0 / 0.5), color(srgb 0.33333 0.66797 0 / 0.5), color(srgb 0 0.33464 0.33333 / 0.5), color(srgb 0 0 1 / 0.5), color(srgb 0.19608 0 0.6732 / 0.5), color(srgb 0.50719 0.16993 0.65098 / 0.5), color(srgb 0.93333 0.5098 0.93333 / 0.5)] >>> HtmlRow ([ c . filter ( 'invert' , 1 ) . clip () for c in colors ]) [color(srgb 0 1 1 / 1), color(srgb 0 0.92805 1 / 1), color(srgb 0 0.7044 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0.95896 0.79553 1 / 1), color(srgb 1 0.95861 0.95896 / 1), color(srgb 1 1 0 / 1), color(srgb 0.98585 1 0.79133 / 1), color(srgb 0.89586 0.98915 0.8087 / 1), color(srgb 0.41688 0.8946 0.41688 / 1)] >>> HtmlRow ([ c . filter ( 'hue-rotate' , 90 ) . clip () for c in colors ]) [color(srgb 0 0.63105 0 / 1), color(srgb 0 0.72828 0 / 1), color(srgb 0 0.91755 0.49164 / 1), color(srgb 0 1 0.93382 / 1), color(srgb 0 0.64804 0.75171 / 1), color(srgb 0.33333 0.26972 0.41556 / 1), color(srgb 1 0 0.41551 / 1), color(srgb 0.6732 0 0.22332 / 1), color(srgb 0.65098 0.14767 0 / 1), color(srgb 0.93333 0.59681 0 / 1)] >>> HtmlRow ([ c . filter ( 'sepia' , 1 ) . clip () for c in colors ]) [color(srgb 0.65991 0.6254 0.55828 / 1), color(srgb 0.7438 0.70557 0.63046 / 1), color(srgb 0.91264 0.86683 0.77568 / 1), color(srgb 1 1 0.90933 / 1), color(srgb 0.62309 0.59145 0.52742 / 1), color(srgb 0.32748 0.3096 0.27351 / 1), color(srgb 0.47196 0.44672 0.39732 / 1), color(srgb 0.33214 0.31357 0.27727 / 1), color(srgb 0.45856 0.43394 0.38572 / 1), color(srgb 0.83745 0.79487 0.71097 / 1)] >>> HtmlRow ([ c . filter ( 'grayscale' , 1 ) . clip () for c in colors ]) [color(srgb 0.49844 0.49844 0.49844 / 1), color(srgb 0.60475 0.60475 0.60475 / 1), color(srgb 0.79945 0.79945 0.79945 / 1), color(srgb 0.96757 0.96757 0.96757 / 1), color(srgb 0.59093 0.59093 0.59093 / 1), color(srgb 0.2976 0.2976 0.2976 / 1), color(srgb 0.29789 0.29789 0.29789 / 1), color(srgb 0.2104 0.2104 0.2104 / 1), color(srgb 0.33536 0.33536 0.33536 / 1), color(srgb 0.66755 0.66755 0.66755 / 1)] inputs = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'] colors = Color.steps(inputs, steps=10, space='srgb') HtmlRow(colors) HtmlRow([c.filter('brightness', 0.5).clip() for c in colors]) HtmlRow([c.filter('saturate', 0.5).clip() for c in colors]) HtmlRow([c.filter('contrast', 1.2).clip() for c in colors]) HtmlRow([c.filter('opacity', 0.5).clip() for c in colors]) HtmlRow([c.filter('invert', 1).clip() for c in colors]) HtmlRow([c.filter('hue-rotate', 90).clip() for c in colors]) HtmlRow([c.filter('sepia', 1).clip() for c in colors]) HtmlRow([c.filter('grayscale', 1).clip() for c in colors]) Edit Share Run Cancel","title":"W3C Filter Effects"},{"location":"filters/#color-vision-deficiency-simulation","text":"Color blindness or color vision deficiency ( CVD ) affects approximately 1 in 12 men (8%) and 1 in 200 women. CVD affects millions of people in the world, and many people have no idea that they are color blind and not seeing the full spectrum that others see. CVD simulation allows those who do not suffer with one of the many different variations of color blindness, to simulate what someone with a CVD would see. Keep in mind that these are just approximations, and that a given type of CVD can be quite different from person to person in severity. The human eye has 3 types of cones that are used to perceive colors. Each of these cones can become deficient, either through genetics, or other means. Each type of cone is responsible for perceiving either red, green, or blue colors. A CVD occurs when one or more of these cones are missing or not functioning properly. There are severe cases where one of the three cones will not perceive color at all, and there are others were the cones may just be less sensitive.","title":"Color Vision Deficiency Simulation"},{"location":"filters/#dichromacy","text":"Dichromacy is a type of CVD that has the characteristics of essentially causing the person to only have two functioning cones for perceiving colors. This essentially flattens the color spectrum into a 2D plane. Protanopia describes the CVD where the cone responsible for red light does not function, deuteranopia describes the CVD affecting the green cone, and tritanopia describes deficiencies with the blue cone. Normal Protanopia Deuteranopia Tritanopia By default, ColorAide uses the Brettel 1997 method to simulate tritanopia and the Vi\u00e9not, Brettel, and Mollon 1999 approach to simulate protanopia and and deuteranopia. While Brettel is probably the best approach for all cases, Vi\u00e9not is much faster and does quite well for protanopia and deuteranopia. >>> inputs = [ 'red' , 'orange' , 'yellow' , 'green' , 'blue' , 'indigo' , 'violet' ] >>> colors = Color . steps ( inputs , steps = 10 , space = 'srgb' ) >>> HtmlRow ( colors ) [color(srgb 1 0 0 / 1), color(srgb 1 0.43137 0 / 1), color(srgb 1 0.76471 0 / 1), color(srgb 1 1 0 / 1), color(srgb 0.33333 0.66797 0 / 1), color(srgb 0 0.33464 0.33333 / 1), color(srgb 0 0 1 / 1), color(srgb 0.19608 0 0.6732 / 1), color(srgb 0.50719 0.16993 0.65098 / 1), color(srgb 0.93333 0.5098 0.93333 / 1)] >>> HtmlRow ([ c . filter ( 'protan' ) . clip () for c in colors ]) [color(srgb 0.36376 0.36376 0.05572 / 1), color(srgb 0.53494 0.53494 0.04817 / 1), color(srgb 0.79488 0.79488 0.02624 / 1), color(srgb 1 1 0 / 1), color(srgb 0.6419 0.6419 0 / 1), color(srgb 0.31637 0.31637 0.3326 / 1), color(srgb 0 0 1 / 1), color(srgb 0.04466 0.04466 0.67331 / 1), color(srgb 0.2371 0.2371 0.65166 / 1), color(srgb 0.57669 0.57669 0.93469 / 1)] >>> HtmlRow ([ c . filter ( 'deutan' ) . clip () for c in colors ]) [color(srgb 0.57511 0.57511 0 / 1), color(srgb 0.66589 0.66589 0 / 1), color(srgb 0.84206 0.84206 0 / 1), color(srgb 1 1 0 / 1), color(srgb 0.59514 0.59514 0.07745 / 1), color(srgb 0.28277 0.28277 0.33689 / 1), color(srgb 0 0 1 / 1), color(srgb 0.09496 0.09496 0.67268 / 1), color(srgb 0.3161 0.3161 0.64764 / 1), color(srgb 0.67012 0.67012 0.92662 / 1)] >>> HtmlRow ([ c . filter ( 'tritan' ) . clip () for c in colors ]) [color(srgb 1 0 0.3076 / 1), color(srgb 1 0.38816 0.48865 / 1), color(srgb 1 0.71252 0.74852 / 1), color(srgb 1 0.93755 0.94959 / 1), color(srgb 0.44366 0.61688 0.68363 / 1), color(srgb 0.07188 0.32489 0.39021 / 1), color(srgb 0 0.37542 0.5281 / 1), color(srgb 0 0.24684 0.32622 / 1), color(srgb 0.44629 0.295 0.31173 / 1), color(srgb 0.88848 0.58545 0.61964 / 1)] inputs = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'] colors = Color.steps(inputs, steps=10, space='srgb') HtmlRow(colors) HtmlRow([c.filter('protan').clip() for c in colors]) HtmlRow([c.filter('deutan').clip() for c in colors]) HtmlRow([c.filter('tritan').clip() for c in colors]) Edit Share Run Cancel If desired, any of the three available methods can be used. Brettel is usually considered best option for accuracy. Vi\u00e9not is faster and does quite well for protanopia and deuteranopia, but is not quite as accurate for tritanopia. Machado 2009 has better logic for severity ranges less than 1, but is probably even further off for tritanopia. >>> inputs = [ 'red' , 'orange' , 'yellow' , 'green' , 'blue' , 'indigo' , 'violet' ] >>> colors = Color . steps ( inputs , steps = 10 , space = 'srgb' ) >>> HtmlRow ( colors ) [color(srgb 1 0 0 / 1), color(srgb 1 0.43137 0 / 1), color(srgb 1 0.76471 0 / 1), color(srgb 1 1 0 / 1), color(srgb 0.33333 0.66797 0 / 1), color(srgb 0 0.33464 0.33333 / 1), color(srgb 0 0 1 / 1), color(srgb 0.19608 0 0.6732 / 1), color(srgb 0.50719 0.16993 0.65098 / 1), color(srgb 0.93333 0.5098 0.93333 / 1)] >>> HtmlRow ([ c . filter ( 'tritan' , method = 'brettel' ) . clip () for c in colors ]) [color(srgb 1 0 0.3076 / 1), color(srgb 1 0.38816 0.48865 / 1), color(srgb 1 0.71252 0.74852 / 1), color(srgb 1 0.93755 0.94959 / 1), color(srgb 0.44366 0.61688 0.68363 / 1), color(srgb 0.07188 0.32489 0.39021 / 1), color(srgb 0 0.37542 0.5281 / 1), color(srgb 0 0.24684 0.32622 / 1), color(srgb 0.44629 0.295 0.31173 / 1), color(srgb 0.88848 0.58545 0.61964 / 1)] >>> HtmlRow ([ c . filter ( 'tritan' , method = 'vienot' ) . clip () for c in colors ]) [color(srgb 1 0 0 / 1), color(srgb 1 0.40333 0.40333 / 1), color(srgb 1 0.71744 0.71744 / 1), color(srgb 1 0.93916 0.93916 / 1), color(srgb 0.42673 0.62628 0.62628 / 1), color(srgb 0.00145 0.33447 0.33447 / 1), color(srgb 0 0.39998 0.39998 / 1), color(srgb 0 0.25904 0.25904 / 1), color(srgb 0.44469 0.29729 0.29729 / 1), color(srgb 0.88533 0.59014 0.59014 / 1)] >>> HtmlRow ([ c . filter ( 'tritan' , method = 'machado' ) . clip () for c in colors ]) [color(srgb 1 0 0.05839 / 1), color(srgb 1 0.28649 0.36958 / 1), color(srgb 1 0.6869 0.65152 / 1), color(srgb 1 0.93208 0.85219 / 1), color(srgb 0.31913 0.64112 0.56532 / 1), color(srgb 0 0.34691 0.33347 / 1), color(srgb 0 0.42038 0.58728 / 1), color(srgb 0 0.26742 0.38855 / 1), color(srgb 0.49244 0.2757 0.40142 / 1), color(srgb 0.95631 0.5535 0.67867 / 1)] inputs = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'] colors = Color.steps(inputs, steps=10, space='srgb') HtmlRow(colors) HtmlRow([c.filter('tritan', method='brettel').clip() for c in colors]) HtmlRow([c.filter('tritan', method='vienot').clip() for c in colors]) HtmlRow([c.filter('tritan', method='machado').clip() for c in colors]) Edit Share Run Cancel","title":"Dichromacy"},{"location":"filters/#anomalous-trichromacy","text":"While Dichromacy is probably the more severe case with only two functional cones, a more common CVD type is anomalous trichromacy. In this case, a person will have three functioning cones, but not all of the cones function with full sensitivity. Sometimes, the sensitivity can be so low, that their ability to perceive color may be close to someone with dichromacy. While dichromacy may be considered a severity 1, a given case of anomalous trichromacy could be anywhere between 0 and 1, where 0 would be no CVD . Like dichromacy, the related deficiencies are named in a similar manner: protanomaly (reduced red sensitivity), deuteranomaly (reduced green sensitivity), and tritanomaly (reduced blue sensitivity). Normal Protanomaly Severity 0.5 Protanomaly Severity 0.7 Protanomaly Severity 0.9 To represent anomalous trichromacy, ColorAide leans on the Machado 2009 approach which has a more nuanced approach to handling severity levels below 1. This approach did not really focus on tritanopia though, and the suggested algorithm for tritanopia should only be considered as an approximation. Instead of relying on the Machado approach for tritanomaly, we instead just use linear interpolation between the severity 1 results and the severity 0 (no CVD ) results. With that said, the method can always be overridden to use something other than the defaults. >>> inputs = [ 'red' , 'orange' , 'yellow' , 'green' , 'blue' , 'indigo' , 'violet' ] >>> colors = Color . steps ( inputs , steps = 10 , space = 'srgb' ) >>> HtmlRow ( colors ) [color(srgb 1 0 0 / 1), color(srgb 1 0.43137 0 / 1), color(srgb 1 0.76471 0 / 1), color(srgb 1 1 0 / 1), color(srgb 0.33333 0.66797 0 / 1), color(srgb 0 0.33464 0.33333 / 1), color(srgb 0 0 1 / 1), color(srgb 0.19608 0 0.6732 / 1), color(srgb 0.50719 0.16993 0.65098 / 1), color(srgb 0.93333 0.5098 0.93333 / 1)] >>> HtmlRow ([ c . filter ( 'protan' , 0.75 ) . clip () for c in colors ]) [color(srgb 0.57444 0.36279 0 / 1), color(srgb 0.68557 0.52161 0 / 1), color(srgb 0.89278 0.76762 0 / 1), color(srgb 1 0.96325 0 / 1), color(srgb 0.65314 0.61548 0 / 1), color(srgb 0.2832 0.31636 0.33437 / 1), color(srgb 0 0.31631 1 / 1), color(srgb 0 0.21199 0.68441 / 1), color(srgb 0.14543 0.30324 0.66031 / 1), color(srgb 0.57941 0.62064 0.94276 / 1)] >>> HtmlRow ([ c . filter ( 'deutan' , 0.75 ) . clip () for c in colors ]) [color(srgb 0.69457 0.52313 0 / 1), color(srgb 0.77249 0.62491 0 / 1), color(srgb 0.93243 0.81477 0.08507 / 1), color(srgb 1 0.98058 0.16863 / 1), color(srgb 0.62247 0.59458 0.12005 / 1), color(srgb 0.25131 0.29322 0.33527 / 1), color(srgb 0 0.23104 0.9893 / 1), color(srgb 0 0.17352 0.66554 / 1), color(srgb 0.2229 0.32529 0.64248 / 1), color(srgb 0.64769 0.66513 0.92233 / 1)] >>> HtmlRow ([ c . filter ( 'tritan' , 0.75 ) . clip () for c in colors ]) [color(srgb 1 0 0.26664 / 1), color(srgb 1 0.39951 0.42724 / 1), color(srgb 1 0.72603 0.65776 / 1), color(srgb 1 0.95367 0.83611 / 1), color(srgb 0.4194 0.63016 0.60019 / 1), color(srgb 0.05755 0.32736 0.37697 / 1), color(srgb 0 0.3268 0.68775 / 1), color(srgb 0 0.21274 0.44656 / 1), color(srgb 0.46246 0.26991 0.4298 / 1), color(srgb 0.89997 0.56774 0.71539 / 1)] inputs = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'] colors = Color.steps(inputs, steps=10, space='srgb') HtmlRow(colors) HtmlRow([c.filter('protan', 0.75).clip() for c in colors]) HtmlRow([c.filter('deutan', 0.75).clip() for c in colors]) HtmlRow([c.filter('tritan', 0.75).clip() for c in colors]) Edit Share Run Cancel","title":"Anomalous Trichromacy"},{"location":"filters/#usage-details","text":"To use filters, a filter name must be given, followed by an optional amount. If an amount is omitted, suitable default will be used. The exact range a given filter accepts varies depending on the filter. If a value exceeds the filter range , the value will be clamped. Filters Name Default Brightness brightness 1 Saturation saturate 1 Contrast contrast 1 Opacity opacity 1 Invert invert 1 Hue rotation hue-rotate 0 Sepia sepia 1 Grayscale grayscale 1 Protan protan 1 Deutan deutan 1 Tritan tritan 1 All of the filters that are supported allow filtering in the Linear sRGB color space and will do so by default. Additionally, the W3C filter effects also support filtering in the sRGB color space. The CVD filters are specifically designed to be applied in the Linear sRGB space, and cannot be used in any other color space. >>> inputs = [ 'red' , 'orange' , 'yellow' , 'green' , 'blue' , 'indigo' , 'violet' ] >>> colors = Color . steps ( inputs , steps = 10 , space = 'srgb' ) >>> HtmlRow ( colors ) [color(srgb 1 0 0 / 1), color(srgb 1 0.43137 0 / 1), color(srgb 1 0.76471 0 / 1), color(srgb 1 1 0 / 1), color(srgb 0.33333 0.66797 0 / 1), color(srgb 0 0.33464 0.33333 / 1), color(srgb 0 0 1 / 1), color(srgb 0.19608 0 0.6732 / 1), color(srgb 0.50719 0.16993 0.65098 / 1), color(srgb 0.93333 0.5098 0.93333 / 1)] >>> HtmlRow ([ c . filter ( 'sepia' , 1 , space = 'srgb-linear' ) . clip () for c in colors ]) [color(srgb 0.65991 0.6254 0.55828 / 1), color(srgb 0.7438 0.70557 0.63046 / 1), color(srgb 0.91264 0.86683 0.77568 / 1), color(srgb 1 1 0.90933 / 1), color(srgb 0.62309 0.59145 0.52742 / 1), color(srgb 0.32748 0.3096 0.27351 / 1), color(srgb 0.47196 0.44672 0.39732 / 1), color(srgb 0.33214 0.31357 0.27727 / 1), color(srgb 0.45856 0.43394 0.38572 / 1), color(srgb 0.83745 0.79487 0.71097 / 1)] >>> HtmlRow ([ c . filter ( 'sepia' , 1 , space = 'srgb' ) . clip () for c in colors ]) [color(srgb 0.393 0.349 0.272 / 1), color(srgb 0.72473 0.64492 0.50235 / 1), color(srgb 0.98106 0.87359 0.68035 / 1), color(srgb 1 1 0.806 / 1), color(srgb 0.64467 0.57456 0.44736 / 1), color(srgb 0.32034 0.28556 0.22236 / 1), color(srgb 0.189 0.168 0.131 / 1), color(srgb 0.20429 0.18153 0.14152 / 1), color(srgb 0.45304 0.40295 0.31398 / 1), color(srgb 0.93524 0.83226 0.64837 / 1)] inputs = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'] colors = Color.steps(inputs, steps=10, space='srgb') HtmlRow(colors) HtmlRow([c.filter('sepia', 1, space='srgb-linear').clip() for c in colors]) HtmlRow([c.filter('sepia', 1, space='srgb').clip() for c in colors]) Edit Share Run Cancel Processing Lots of Colors One logical application for filters is to apply them directly to images. If you are performing these operations on millions of pixels, you may notice that ColorAide, with all of its convenience, may not always be the fastest. There is a cost due to the overhead of convenience and a cost due to the pure Python approach as well. With that said, there are tricks that can dramatically make things much faster in most cases! functools.lru_cache is your friend in such cases. We actually process all the images on this page with ColorAide to demonstrate the filters. The key to making it a quick and painless process was to cache repetitive operations. When processing images, it is highly likely that you will be performing the same operations on thousands of identical pixels. Caching the work you've already done can speed this process up exponentially. There are certainly some images that could be constructed in such a way to elicit a worse case scenario where the cache would not be able to compensate as well, but for most images, caching dramatically reduces processing time. We can crawl the pixels in a file, and using a simple function like below, we will only process a pixel once (at least until our cache fills and we start having to overwrite existing colors). @lru_cache ( maxsize = 1024 * 1024 ) def apply_filter ( name , amount , space , method , p , fit ): \"\"\"Apply filter.\"\"\" has_alpha = len ( p ) > 3 color = Color ( 'srgb' , [ x / 255 for x in p [: 3 ]], p [ 3 ] / 255 if has_alpha else 1 ) if method is not None : # This is a CVD filter that allows specifying the method color . filter ( name , amount , space = space , in_place = True , method = method ) else : # General filter. color . filter ( name , amount , space = space , in_place = True ) # Fit the color back into the color gamut and return the results return tuple ([ int ( x * 255 ) for x in color . fit ( method = fit )[: 3 if has_alpha else - 1 ]]) When processing a 4608x2456 image (15,925,248 pixels) during our testing, it turned a ~7 minute process into a ~25 second process * . Using gamut mapping opposed to simple clipping only increases time by to about ~56 seconds. The much smaller images shown on this page process much, much faster. The full script can be viewed here . * Tests were performed using the Pillow library. Results may vary depending on the size of the image, pixel configuration, number of unique pixels, etc. Cache size can be tweaked to optimize the results. img.trans-bg { background-color: var(--swatch-bg-color); background-image: linear-gradient(45deg,var(--swatch-bg-alt-color) 25%,transparent 25%),linear-gradient(-45deg,var(--swatch-bg-alt-color) 25%,transparent 25%),linear-gradient(45deg,transparent 75%,var(--swatch-bg-alt-color) 75%),linear-gradient(-45deg,transparent 75%, var(--swatch-bg-alt-color) 75%); background-position: 0 0,0 0.49em,0.49em -0.49em,-0.49em 0; background-size: 1em 1em; } .info-container {display: inline-block;}","title":"Usage Details"},{"location":"gamut/","text":"Gamut Mapping Many color spaces are designed in such a way that they can only represent colors accurately within a specific range. This range in which a color can accurately be represented is known as the color gamut. While some color spaces are theoretically unbounded, there are many that are designed with distinct ranges. The sRGB and Display P3 color spaces are both RGB color spaces, but they actually can represent a different amount of colors. Display P3 has a wider gamut and allows for greener greens and redder reds, etc. In the image below, we show four different RGB color spaces, each with varying different gamut sizes. Display P3 contains all the colors in sRGB and extends it even further. Rec. 2020, another RGB color space, is even wider. ProPhoto is so wide that it contains colors that the human eye can't even see. In order to visually represent a color from a wider gamut color space, such as Display P3, in a more narrow color space, such as sRGB, a suitable color within the more narrow color space must must be selected and be shown in its place. This selecting of a suitable replacement is called gamut mapping. ColorAide defines a couple methods to help identify when a color is outside the gamut bounds of a color space and to help find a suitable, alternative color that is within the gamut. Checking Gamut When dealing with colors, it can be important to know whether a color is within its own gamut. The in_gamut function allows for comparing the current color's specified values against the color space's gamut. Let's assume we have a color rgb ( 30 % 105 % 0 % ) . The color is out of gamut due to the green channel exceeding the channel's limit of 100 % . When we execute in_gamut , we can see that the color is not in its own gamut. >>> Color ( \"rgb(30 % 105% 0%)\" ) . in_gamut () False Color(\"rgb(30% 105% 0%)\").in_gamut() Edit Share Run Cancel On the other hand, some color spaces do not have a limit. CIELab is one such color space. Sometimes limits will be placed on the color space channels for practicality, but theoretically, there are no bounds. When we check a CIELab color, we will find that it is always considered in gamut. >>> Color ( \"lab(200% -20 40 / 1)\" ) . in_gamut () True Color(\"lab(200% -20 40 / 1)\").in_gamut() Edit Share Run Cancel While checking CIELab's own gamut isn't very useful, we can test it against a different color space's gamut. By simply passing in the name of a different color space, the current color will be converted to the provided space and then will run in_gamut on the new color. You could do this manually, but using in_gamut in this manner can be very convenient. In the example below, we can see that the CIELab color of lab ( 200 % - 20 40 / 1 ) is outside the narrow gamut of sRGB. >>> Color ( \"lab(200% -20 40 / 1)\" ) . in_gamut ( 'srgb' ) False Color(\"lab(200% -20 40 / 1)\").in_gamut('srgb') Edit Share Run Cancel Tolerance Generally, ColorAide does not round off values in order to guarantee the best possible values for round tripping, but due to limitations of floating-point arithmetic and precision of conversion algorithms, there can be edge cases where colors don't round trip perfectly. By default, in_gamut allows for a tolerance of 0.000075 to account for such cases where a color is \"close enough\". If desired, this \"tolerance\" can be adjusted. Let's consider CIELab with a D65 white point. The sRGB round trip through CIELab D65 for white does not perfectly convert back to the original color. This is due to the perils of floating point arithmetic. >>> Color ( 'color(srgb 1 1 1)' ) . convert ( 'lab-d65' )[:] [100.0, 0.0, 0.0, 1.0] >>> Color ( 'color(srgb 1 1 1)' ) . convert ( 'lab-d65' ) . convert ( 'srgb' )[:] [1.0000000000000002, 0.9999999999999999, 0.9999999999999997, 1.0] Color('color(srgb 1 1 1)').convert('lab-d65')[:] Color('color(srgb 1 1 1)').convert('lab-d65').convert('srgb')[:] Edit Share Run Cancel We can see that when using a tolerance of zero, and gamut checking in sRGB, that the color is considered out of gamut. This makes sense as the round trip through CIELab D65 and back is so very close, but ever so slightly off. Depending on what you are doing, this may not be an issue up until you are ready to finalize the color, so sometimes it may be desirable to have some tolerance, and other times not. >>> Color ( 'color(srgb 1 1 1)' ) . convert ( 'lab-d65' ) . convert ( 'srgb' )[:] [1.0000000000000002, 0.9999999999999999, 0.9999999999999997, 1.0] >>> Color ( 'color(srgb 1 1 1)' ) . convert ( 'lab-d65' ) . convert ( 'srgb' ) . in_gamut () True >>> Color ( 'color(srgb 1 1 1)' ) . convert ( 'lab-d65' ) . convert ( 'srgb' ) . in_gamut ( tolerance = 0 ) False Color('color(srgb 1 1 1)').convert('lab-d65').convert('srgb')[:] Color('color(srgb 1 1 1)').convert('lab-d65').convert('srgb').in_gamut() Color('color(srgb 1 1 1)').convert('lab-d65').convert('srgb').in_gamut(tolerance=0) Edit Share Run Cancel On the topic of tolerance, lets consider some color models that do not handle out of gamut colors very well. There are some color models that are alternate representations of an existing color space. For instance, the cylindrical spaces HSL, HSV, and HWB are just different color models for the sRGB color space. They are are essentially the sRGB color space, just with cylindrical coordinates that isolate certain attributes of the color space: saturation, whiteness, blackness, etc. So their gamut is exactly the same as the sRGB space, because they are the sRGB color space. So it stands to reason that simply using the sRGB gamut check for them should be sufficient, and if we are using strict tolerance, this would be true. >>> Color ( 'rgb(255 255 255)' ) . in_gamut ( 'srgb' , tolerance = 0 ) True >>> Color ( 'hsl(0 0 % 100% )' ) . in_gamut ( 'srgb' , tolerance = 0 ) True >>> Color ( 'color(--hsv 0 0 % 100% )' ) . in_gamut ( 'srgb' , tolerance = 0 ) True >>> Color ( 'rgb(255.05 255 255)' ) . in_gamut ( 'srgb' , tolerance = 0 ) False >>> Color ( 'hsl(0 0 % 100.05% )' ) . in_gamut ( 'srgb' , tolerance = 0 ) False >>> Color ( 'color(--hsv 0 0 % 100.05% )' ) . in_gamut ( 'srgb' , tolerance = 0 ) False Color('rgb(255 255 255)').in_gamut('srgb', tolerance=0) Color('hsl(0 0% 100%)').in_gamut('srgb', tolerance=0) Color('color(--hsv 0 0% 100%)').in_gamut('srgb', tolerance=0) Color('rgb(255.05 255 255)').in_gamut('srgb', tolerance=0) Color('hsl(0 0% 100.05%)').in_gamut('srgb', tolerance=0) Color('color(--hsv 0 0% 100.05%)').in_gamut('srgb', tolerance=0) Edit Share Run Cancel But when we are not using a strict threshold, and we check one of these models only using the sRGB gamut, there are some cases where these cylindrical colors can exhibit coordinates wildly outside of the model's range but still very close to the sRGB gamut. In this example, we have an sRGB color that is extremely close to being in gamut, but when we convert it to HSL, we can see wildly large saturation. >>> hsl = Color ( 'color(srgb 0.9999999999994 1.0000000000002 0.9999999999997)' ) . convert ( 'hsl' ) >>> hsl . to_string ( fit = False ) hsl(142.5 200.06% 100%) >>> hsl . in_gamut ( 'srgb' ) True hsl = Color('color(srgb 0.9999999999994 1.0000000000002 0.9999999999997)').convert('hsl') hsl.to_string(fit=False) hsl.in_gamut('srgb') Edit Share Run Cancel This happens because these cylindrical color models do not represent colors out of gamut in a very sane way. They are simply not designed to extend past the color gamut. So even a slightly out of gamut sRGB color can translate to a value way outside the cylindrical color model's boundaries. For this reason, gamut checks in the HSL, HSV, or HWB models apply tolerance checks on the color's coordinates in the sRGB color space and the respective cylindrical model ensuring we have coordinates that are close to the color's actual gamut and reasonably close to the cylindrical model's constraints as well. So, when using HSL as the gamut check, we can see that it ensures the color is not only very close to the sRGB gamut, but that it is also very close the color model's constraints. >>> hsl = Color ( 'color(srgb 0.9999999999994 1.0000000000002 0.9999999999997)' ) . convert ( 'hsl' ) >>> hsl color(--hsl 142.5 2.0006 1 / 1) >>> hsl . in_gamut ( 'hsl' ) False hsl = Color('color(srgb 0.9999999999994 1.0000000000002 0.9999999999997)').convert('hsl') hsl hsl.in_gamut('hsl') Edit Share Run Cancel If the Cartesian check is the only desired check, and the strange cylindrical values that are returned are not a problem, srgb can always be specified. tolerance = 0 can also be used to constrain the check to values exactly in the gamut. When a color is precisely in gamut, HSL has a very tight conversion to and from sRGB. A color that is in gamut, will remain in gamut throughout the conversion, forwards and backwards. On the other hand, there may be color models that have a looser conversion algorithm. There may be cases where it may be beneficial to decrease the threshold. Mapping Colors Gamut mapping is the process of taking a color that is out of gamut and adjusting it such that it fits within the gamut. Gamut mapping in general is performed via the fit () method. Doing this will cause the default gamut mapping to be used. If desired, a user can also specify any currently registered gamut mapping method via the method parameter. >>> Color ( 'rgb(270 30 120)' ) . fit () color(srgb 1 0.18505 0.47435 / 1) >>> Color ( 'rgb(270 30 120)' ) . fit ( method = 'clip' ) color(srgb 1 0.11765 0.47059 / 1) Color('rgb(270 30 120)').fit() Color('rgb(270 30 120)').fit(method='clip') Edit Share Run Cancel Gamut mapping can also be used to fit colors in other gamuts, for instance, fitting a Display P3 color into an sRGB gamut. >>> c1 = Color ( 'color(display-p3 1 1 0)' ) >>> c1 . in_gamut ( 'srgb' ) False >>> c1 . fit ( 'srgb' ) color(display-p3 0.99859 0.9923 0.32854 / 1) >>> c1 . in_gamut () True c1 = Color('color(display-p3 1 1 0)') c1.in_gamut('srgb') c1.fit('srgb') c1.in_gamut() Edit Share Run Cancel Caveats when Mapping in Other Spaces When fitting in another color space, results may vary depending on what color space you are in and what color space you are using to fit the color. We went into great depths when discussing gamut checking about how transform functions from one color space to another are not always exact. We also gave quite a number of examples showing cases in which some color spaces were more sensitive to slight deviations outside their gamut than others. This is mainly mentioned as fitting in one color space and round tripping back may not give exact results: >>> Color ( \"color(--lch-d65 100 50 75)\" ) . convert ( 'srgb' ) . fit ()[:] [1.0, 0.9999999999999999, 0.9999999999999997, 1.0] >>> Color ( \"color(--lch-d65 100 50 75)\" ) . fit ( 'srgb' ) . convert ( 'srgb' )[:] [1.0000000000000002, 0.9999999999999999, 0.9999999999999997, 1.0] Color(\"color(--lch-d65 100 50 75)\").convert('srgb').fit()[:] Color(\"color(--lch-d65 100 50 75)\").fit('srgb').convert('srgb')[:] Edit Share Run Cancel While the above case is well within the threshold, depending on what you are doing, and what spaces you are working in, it may make sense to fully convert to a space and work directly in that space opposed to the indirect fitting of a color in a different color space. Clipping is not the default gamut mapping method, and generally not recommended to be used as such, but that doesn't mean it isn't useful. Clipping is still very important and can be used to trim channel noise after certain mathematical operations or even used in other gamut mapping algorithms if used carefully. For this reason, clip also has its own dedicated method for quick access: clip () . It can also be applied directly to the current color space or can be applied on the gamuts of other color spaces just like fit () . >>> Color ( 'rgb(270 30 120)' ) . clip () color(srgb 1 0.11765 0.47059 / 1) >>> Color ( 'color(display-p3 1 1 0)' ) . clip ( 'srgb' ) color(display-p3 1 1 0.3309 / 1) Color('rgb(270 30 120)').clip() Color('color(display-p3 1 1 0)').clip('srgb') Edit Share Run Cancel There are actually many different ways to gamut map a color. Some are computationally expensive, some are quite simple, and many do really good in some cases and not so well in others. There is probably no perfect gamut mapping method, but some are better than others. ColorAide currently only offers a couple simple methods to gamut map. Method Description clip Simple, naive clipping. lch-chroma Uses a combination of chroma reduction and MINDE in the CIELCh color space to bring a color into gamut. This is the default method used. oklch-chroma Like lch-chroma , but uses the OkLCh color space instead. This is currently what the CSS Color Level 4 specification recommends. CSS Level 4 Gamut Mapping The CSS CSS Color Level 4 specification currently recommends using OkLCh as the gamut mapping color space. oklch-chroma is our implementation of the CSS Level 4 color specification. OkLCh is a very new color space to be used in the field of gamut mapping. While CIELCh is not perfect, its weakness are known. OkLCh does seem to have certain quirks of its own, and may have may have more. While we have not made oklch-chroma our default yet, we have exposed the algorithm so users can begin exploring it. Why Not Just Clip? In current web browsers, clipping is the default way in which out of gamut colors have been handled. It is fast, and has generally been fine as most browsers have been constrained to using sRGB. But as modern browsers begin to adopt more wide gamut monitors such as Display P3, and CSS grows to support an assortment of wide and ultra wide color spaces, representing the best intent of an out of gamut color becomes more important. ColorAide uses a default gamut mapping algorithm that performs gamut mapping in the CIELCh color space using chroma reduction coupled with minimum \u2206E ( MINDE ). This approach is meant to preserve enough of the important attributes of the out of gamut color as is possible, mostly preserving both lightness and hue, hue being the attribute that people are most sensitive to. MINDE is used to abandon chroma reduction and clip the color when the color is very close to being in gamut. MINDE also allows us to catch cases where the geometry of the color space's gamut is such that we may slip by higher chroma options resulting in undesirable, aggressive chroma reduction. Below we have an example of using chroma reduction with MINDE . It can be noted that chroma is reduced until we are very close to being in gamut. The MINDE helps us catch the peak of the yellow shape as, otherwise, we would have continued reducing chroma until we were at a very chroma reduced, pale yellow. One might see some cases of clipping and think it does a fine job and question why any of this complexity is necessary. In order to demonstrate the differences in gamut mapping vs clipping, see the example below. We start with the color color ( display-p3 1 1 0 ) and interpolate with it in the CIELCh color space reducing just the lightness. This will leave both chroma and hue intact. The Interactive playground below automatically gamut maps the color previews to sRGB, but we'll control the method being used by providing two different Color objects: one that uses lch-chroma (the default) for gamut mapping, and one that uses clip . Notice how clipping, the bottom color set, clips these dark colors and makes them reddish. This is a very undesirable outcome. >>> class ColorClip ( Color ): ... FIT = 'clip' ... >>> yellow = Color ( 'color(display-p3 1 1 0)' ) >>> lightness_mask = Color ( 'lch(0% none none)' ) >>> HtmlRow ( Color . steps ([ yellow , lightness_mask ], steps = 10 , space = 'lch' )) [color(display-p3 1 1 0 / 1), color(display-p3 0.86965 0.87865 -0.1393 / 1), color(display-p3 0.74183 0.76037 -0.16139 / 1), color(display-p3 0.61856 0.64535 -0.17688 / 1), color(display-p3 0.50161 0.53384 -0.19747 / 1), color(display-p3 0.39311 0.42617 -0.22085 / 1), color(display-p3 0.29717 0.32269 -0.24546 / 1), color(display-p3 0.22186 0.22377 -0.27027 / 1), color(display-p3 0.17897 0.12968 -0.29464 / 1), color(display-p3 0.13001 0.03358 -0.31816 / 1)] >>> yellow = ColorClip ( 'color(display-p3 1 1 0)' ) >>> lightness_mask = Color ( 'lch(0% none none)' ) >>> HtmlRow ( ColorClip . steps ([ yellow , lightness_mask ], steps = 10 , space = 'lch' )) [color(display-p3 1 1 0 / 1), color(display-p3 0.86965 0.87865 -0.1393 / 1), color(display-p3 0.74183 0.76037 -0.16139 / 1), color(display-p3 0.61856 0.64535 -0.17688 / 1), color(display-p3 0.50161 0.53384 -0.19747 / 1), color(display-p3 0.39311 0.42617 -0.22085 / 1), color(display-p3 0.29717 0.32269 -0.24546 / 1), color(display-p3 0.22186 0.22377 -0.27027 / 1), color(display-p3 0.17897 0.12968 -0.29464 / 1), color(display-p3 0.13001 0.03358 -0.31816 / 1)] class ColorClip(Color): FIT = 'clip' # Gamut mapping in LCh yellow = Color('color(display-p3 1 1 0)') lightness_mask = Color('lch(0% none none)') HtmlRow(Color.steps([yellow, lightness_mask], steps=10, space='lch')) # Clipping yellow = ColorClip('color(display-p3 1 1 0)') lightness_mask = Color('lch(0% none none)') HtmlRow(ColorClip.steps([yellow, lightness_mask], steps=10, space='lch')) Edit Share Run Cancel There are times when clipping is simply preferred. It is fast, and if you are just trimming noise off channels, it is very useful, but if the idea is to present an in gamut color that tries to preserve as much of the intent of the original color as possible, other methods may be desired. There are no doubt better gamut methods available than ColorAide offers, and more may be added in the future, but ColorAide can also be extended using 3 rd party plugins as well. .info-container {display: inline-block;}","title":"Gamut Mapping"},{"location":"gamut/#gamut-mapping","text":"Many color spaces are designed in such a way that they can only represent colors accurately within a specific range. This range in which a color can accurately be represented is known as the color gamut. While some color spaces are theoretically unbounded, there are many that are designed with distinct ranges. The sRGB and Display P3 color spaces are both RGB color spaces, but they actually can represent a different amount of colors. Display P3 has a wider gamut and allows for greener greens and redder reds, etc. In the image below, we show four different RGB color spaces, each with varying different gamut sizes. Display P3 contains all the colors in sRGB and extends it even further. Rec. 2020, another RGB color space, is even wider. ProPhoto is so wide that it contains colors that the human eye can't even see. In order to visually represent a color from a wider gamut color space, such as Display P3, in a more narrow color space, such as sRGB, a suitable color within the more narrow color space must must be selected and be shown in its place. This selecting of a suitable replacement is called gamut mapping. ColorAide defines a couple methods to help identify when a color is outside the gamut bounds of a color space and to help find a suitable, alternative color that is within the gamut.","title":"Gamut Mapping"},{"location":"gamut/#checking-gamut","text":"When dealing with colors, it can be important to know whether a color is within its own gamut. The in_gamut function allows for comparing the current color's specified values against the color space's gamut. Let's assume we have a color rgb ( 30 % 105 % 0 % ) . The color is out of gamut due to the green channel exceeding the channel's limit of 100 % . When we execute in_gamut , we can see that the color is not in its own gamut. >>> Color ( \"rgb(30 % 105% 0%)\" ) . in_gamut () False Color(\"rgb(30% 105% 0%)\").in_gamut() Edit Share Run Cancel On the other hand, some color spaces do not have a limit. CIELab is one such color space. Sometimes limits will be placed on the color space channels for practicality, but theoretically, there are no bounds. When we check a CIELab color, we will find that it is always considered in gamut. >>> Color ( \"lab(200% -20 40 / 1)\" ) . in_gamut () True Color(\"lab(200% -20 40 / 1)\").in_gamut() Edit Share Run Cancel While checking CIELab's own gamut isn't very useful, we can test it against a different color space's gamut. By simply passing in the name of a different color space, the current color will be converted to the provided space and then will run in_gamut on the new color. You could do this manually, but using in_gamut in this manner can be very convenient. In the example below, we can see that the CIELab color of lab ( 200 % - 20 40 / 1 ) is outside the narrow gamut of sRGB. >>> Color ( \"lab(200% -20 40 / 1)\" ) . in_gamut ( 'srgb' ) False Color(\"lab(200% -20 40 / 1)\").in_gamut('srgb') Edit Share Run Cancel","title":"Checking Gamut"},{"location":"gamut/#tolerance","text":"Generally, ColorAide does not round off values in order to guarantee the best possible values for round tripping, but due to limitations of floating-point arithmetic and precision of conversion algorithms, there can be edge cases where colors don't round trip perfectly. By default, in_gamut allows for a tolerance of 0.000075 to account for such cases where a color is \"close enough\". If desired, this \"tolerance\" can be adjusted. Let's consider CIELab with a D65 white point. The sRGB round trip through CIELab D65 for white does not perfectly convert back to the original color. This is due to the perils of floating point arithmetic. >>> Color ( 'color(srgb 1 1 1)' ) . convert ( 'lab-d65' )[:] [100.0, 0.0, 0.0, 1.0] >>> Color ( 'color(srgb 1 1 1)' ) . convert ( 'lab-d65' ) . convert ( 'srgb' )[:] [1.0000000000000002, 0.9999999999999999, 0.9999999999999997, 1.0] Color('color(srgb 1 1 1)').convert('lab-d65')[:] Color('color(srgb 1 1 1)').convert('lab-d65').convert('srgb')[:] Edit Share Run Cancel We can see that when using a tolerance of zero, and gamut checking in sRGB, that the color is considered out of gamut. This makes sense as the round trip through CIELab D65 and back is so very close, but ever so slightly off. Depending on what you are doing, this may not be an issue up until you are ready to finalize the color, so sometimes it may be desirable to have some tolerance, and other times not. >>> Color ( 'color(srgb 1 1 1)' ) . convert ( 'lab-d65' ) . convert ( 'srgb' )[:] [1.0000000000000002, 0.9999999999999999, 0.9999999999999997, 1.0] >>> Color ( 'color(srgb 1 1 1)' ) . convert ( 'lab-d65' ) . convert ( 'srgb' ) . in_gamut () True >>> Color ( 'color(srgb 1 1 1)' ) . convert ( 'lab-d65' ) . convert ( 'srgb' ) . in_gamut ( tolerance = 0 ) False Color('color(srgb 1 1 1)').convert('lab-d65').convert('srgb')[:] Color('color(srgb 1 1 1)').convert('lab-d65').convert('srgb').in_gamut() Color('color(srgb 1 1 1)').convert('lab-d65').convert('srgb').in_gamut(tolerance=0) Edit Share Run Cancel On the topic of tolerance, lets consider some color models that do not handle out of gamut colors very well. There are some color models that are alternate representations of an existing color space. For instance, the cylindrical spaces HSL, HSV, and HWB are just different color models for the sRGB color space. They are are essentially the sRGB color space, just with cylindrical coordinates that isolate certain attributes of the color space: saturation, whiteness, blackness, etc. So their gamut is exactly the same as the sRGB space, because they are the sRGB color space. So it stands to reason that simply using the sRGB gamut check for them should be sufficient, and if we are using strict tolerance, this would be true. >>> Color ( 'rgb(255 255 255)' ) . in_gamut ( 'srgb' , tolerance = 0 ) True >>> Color ( 'hsl(0 0 % 100% )' ) . in_gamut ( 'srgb' , tolerance = 0 ) True >>> Color ( 'color(--hsv 0 0 % 100% )' ) . in_gamut ( 'srgb' , tolerance = 0 ) True >>> Color ( 'rgb(255.05 255 255)' ) . in_gamut ( 'srgb' , tolerance = 0 ) False >>> Color ( 'hsl(0 0 % 100.05% )' ) . in_gamut ( 'srgb' , tolerance = 0 ) False >>> Color ( 'color(--hsv 0 0 % 100.05% )' ) . in_gamut ( 'srgb' , tolerance = 0 ) False Color('rgb(255 255 255)').in_gamut('srgb', tolerance=0) Color('hsl(0 0% 100%)').in_gamut('srgb', tolerance=0) Color('color(--hsv 0 0% 100%)').in_gamut('srgb', tolerance=0) Color('rgb(255.05 255 255)').in_gamut('srgb', tolerance=0) Color('hsl(0 0% 100.05%)').in_gamut('srgb', tolerance=0) Color('color(--hsv 0 0% 100.05%)').in_gamut('srgb', tolerance=0) Edit Share Run Cancel But when we are not using a strict threshold, and we check one of these models only using the sRGB gamut, there are some cases where these cylindrical colors can exhibit coordinates wildly outside of the model's range but still very close to the sRGB gamut. In this example, we have an sRGB color that is extremely close to being in gamut, but when we convert it to HSL, we can see wildly large saturation. >>> hsl = Color ( 'color(srgb 0.9999999999994 1.0000000000002 0.9999999999997)' ) . convert ( 'hsl' ) >>> hsl . to_string ( fit = False ) hsl(142.5 200.06% 100%) >>> hsl . in_gamut ( 'srgb' ) True hsl = Color('color(srgb 0.9999999999994 1.0000000000002 0.9999999999997)').convert('hsl') hsl.to_string(fit=False) hsl.in_gamut('srgb') Edit Share Run Cancel This happens because these cylindrical color models do not represent colors out of gamut in a very sane way. They are simply not designed to extend past the color gamut. So even a slightly out of gamut sRGB color can translate to a value way outside the cylindrical color model's boundaries. For this reason, gamut checks in the HSL, HSV, or HWB models apply tolerance checks on the color's coordinates in the sRGB color space and the respective cylindrical model ensuring we have coordinates that are close to the color's actual gamut and reasonably close to the cylindrical model's constraints as well. So, when using HSL as the gamut check, we can see that it ensures the color is not only very close to the sRGB gamut, but that it is also very close the color model's constraints. >>> hsl = Color ( 'color(srgb 0.9999999999994 1.0000000000002 0.9999999999997)' ) . convert ( 'hsl' ) >>> hsl color(--hsl 142.5 2.0006 1 / 1) >>> hsl . in_gamut ( 'hsl' ) False hsl = Color('color(srgb 0.9999999999994 1.0000000000002 0.9999999999997)').convert('hsl') hsl hsl.in_gamut('hsl') Edit Share Run Cancel If the Cartesian check is the only desired check, and the strange cylindrical values that are returned are not a problem, srgb can always be specified. tolerance = 0 can also be used to constrain the check to values exactly in the gamut. When a color is precisely in gamut, HSL has a very tight conversion to and from sRGB. A color that is in gamut, will remain in gamut throughout the conversion, forwards and backwards. On the other hand, there may be color models that have a looser conversion algorithm. There may be cases where it may be beneficial to decrease the threshold.","title":"Tolerance"},{"location":"gamut/#mapping-colors","text":"Gamut mapping is the process of taking a color that is out of gamut and adjusting it such that it fits within the gamut. Gamut mapping in general is performed via the fit () method. Doing this will cause the default gamut mapping to be used. If desired, a user can also specify any currently registered gamut mapping method via the method parameter. >>> Color ( 'rgb(270 30 120)' ) . fit () color(srgb 1 0.18505 0.47435 / 1) >>> Color ( 'rgb(270 30 120)' ) . fit ( method = 'clip' ) color(srgb 1 0.11765 0.47059 / 1) Color('rgb(270 30 120)').fit() Color('rgb(270 30 120)').fit(method='clip') Edit Share Run Cancel Gamut mapping can also be used to fit colors in other gamuts, for instance, fitting a Display P3 color into an sRGB gamut. >>> c1 = Color ( 'color(display-p3 1 1 0)' ) >>> c1 . in_gamut ( 'srgb' ) False >>> c1 . fit ( 'srgb' ) color(display-p3 0.99859 0.9923 0.32854 / 1) >>> c1 . in_gamut () True c1 = Color('color(display-p3 1 1 0)') c1.in_gamut('srgb') c1.fit('srgb') c1.in_gamut() Edit Share Run Cancel Caveats when Mapping in Other Spaces When fitting in another color space, results may vary depending on what color space you are in and what color space you are using to fit the color. We went into great depths when discussing gamut checking about how transform functions from one color space to another are not always exact. We also gave quite a number of examples showing cases in which some color spaces were more sensitive to slight deviations outside their gamut than others. This is mainly mentioned as fitting in one color space and round tripping back may not give exact results: >>> Color ( \"color(--lch-d65 100 50 75)\" ) . convert ( 'srgb' ) . fit ()[:] [1.0, 0.9999999999999999, 0.9999999999999997, 1.0] >>> Color ( \"color(--lch-d65 100 50 75)\" ) . fit ( 'srgb' ) . convert ( 'srgb' )[:] [1.0000000000000002, 0.9999999999999999, 0.9999999999999997, 1.0] Color(\"color(--lch-d65 100 50 75)\").convert('srgb').fit()[:] Color(\"color(--lch-d65 100 50 75)\").fit('srgb').convert('srgb')[:] Edit Share Run Cancel While the above case is well within the threshold, depending on what you are doing, and what spaces you are working in, it may make sense to fully convert to a space and work directly in that space opposed to the indirect fitting of a color in a different color space. Clipping is not the default gamut mapping method, and generally not recommended to be used as such, but that doesn't mean it isn't useful. Clipping is still very important and can be used to trim channel noise after certain mathematical operations or even used in other gamut mapping algorithms if used carefully. For this reason, clip also has its own dedicated method for quick access: clip () . It can also be applied directly to the current color space or can be applied on the gamuts of other color spaces just like fit () . >>> Color ( 'rgb(270 30 120)' ) . clip () color(srgb 1 0.11765 0.47059 / 1) >>> Color ( 'color(display-p3 1 1 0)' ) . clip ( 'srgb' ) color(display-p3 1 1 0.3309 / 1) Color('rgb(270 30 120)').clip() Color('color(display-p3 1 1 0)').clip('srgb') Edit Share Run Cancel There are actually many different ways to gamut map a color. Some are computationally expensive, some are quite simple, and many do really good in some cases and not so well in others. There is probably no perfect gamut mapping method, but some are better than others. ColorAide currently only offers a couple simple methods to gamut map. Method Description clip Simple, naive clipping. lch-chroma Uses a combination of chroma reduction and MINDE in the CIELCh color space to bring a color into gamut. This is the default method used. oklch-chroma Like lch-chroma , but uses the OkLCh color space instead. This is currently what the CSS Color Level 4 specification recommends. CSS Level 4 Gamut Mapping The CSS CSS Color Level 4 specification currently recommends using OkLCh as the gamut mapping color space. oklch-chroma is our implementation of the CSS Level 4 color specification. OkLCh is a very new color space to be used in the field of gamut mapping. While CIELCh is not perfect, its weakness are known. OkLCh does seem to have certain quirks of its own, and may have may have more. While we have not made oklch-chroma our default yet, we have exposed the algorithm so users can begin exploring it.","title":"Mapping Colors"},{"location":"gamut/#why-not-just-clip","text":"In current web browsers, clipping is the default way in which out of gamut colors have been handled. It is fast, and has generally been fine as most browsers have been constrained to using sRGB. But as modern browsers begin to adopt more wide gamut monitors such as Display P3, and CSS grows to support an assortment of wide and ultra wide color spaces, representing the best intent of an out of gamut color becomes more important. ColorAide uses a default gamut mapping algorithm that performs gamut mapping in the CIELCh color space using chroma reduction coupled with minimum \u2206E ( MINDE ). This approach is meant to preserve enough of the important attributes of the out of gamut color as is possible, mostly preserving both lightness and hue, hue being the attribute that people are most sensitive to. MINDE is used to abandon chroma reduction and clip the color when the color is very close to being in gamut. MINDE also allows us to catch cases where the geometry of the color space's gamut is such that we may slip by higher chroma options resulting in undesirable, aggressive chroma reduction. Below we have an example of using chroma reduction with MINDE . It can be noted that chroma is reduced until we are very close to being in gamut. The MINDE helps us catch the peak of the yellow shape as, otherwise, we would have continued reducing chroma until we were at a very chroma reduced, pale yellow. One might see some cases of clipping and think it does a fine job and question why any of this complexity is necessary. In order to demonstrate the differences in gamut mapping vs clipping, see the example below. We start with the color color ( display-p3 1 1 0 ) and interpolate with it in the CIELCh color space reducing just the lightness. This will leave both chroma and hue intact. The Interactive playground below automatically gamut maps the color previews to sRGB, but we'll control the method being used by providing two different Color objects: one that uses lch-chroma (the default) for gamut mapping, and one that uses clip . Notice how clipping, the bottom color set, clips these dark colors and makes them reddish. This is a very undesirable outcome. >>> class ColorClip ( Color ): ... FIT = 'clip' ... >>> yellow = Color ( 'color(display-p3 1 1 0)' ) >>> lightness_mask = Color ( 'lch(0% none none)' ) >>> HtmlRow ( Color . steps ([ yellow , lightness_mask ], steps = 10 , space = 'lch' )) [color(display-p3 1 1 0 / 1), color(display-p3 0.86965 0.87865 -0.1393 / 1), color(display-p3 0.74183 0.76037 -0.16139 / 1), color(display-p3 0.61856 0.64535 -0.17688 / 1), color(display-p3 0.50161 0.53384 -0.19747 / 1), color(display-p3 0.39311 0.42617 -0.22085 / 1), color(display-p3 0.29717 0.32269 -0.24546 / 1), color(display-p3 0.22186 0.22377 -0.27027 / 1), color(display-p3 0.17897 0.12968 -0.29464 / 1), color(display-p3 0.13001 0.03358 -0.31816 / 1)] >>> yellow = ColorClip ( 'color(display-p3 1 1 0)' ) >>> lightness_mask = Color ( 'lch(0% none none)' ) >>> HtmlRow ( ColorClip . steps ([ yellow , lightness_mask ], steps = 10 , space = 'lch' )) [color(display-p3 1 1 0 / 1), color(display-p3 0.86965 0.87865 -0.1393 / 1), color(display-p3 0.74183 0.76037 -0.16139 / 1), color(display-p3 0.61856 0.64535 -0.17688 / 1), color(display-p3 0.50161 0.53384 -0.19747 / 1), color(display-p3 0.39311 0.42617 -0.22085 / 1), color(display-p3 0.29717 0.32269 -0.24546 / 1), color(display-p3 0.22186 0.22377 -0.27027 / 1), color(display-p3 0.17897 0.12968 -0.29464 / 1), color(display-p3 0.13001 0.03358 -0.31816 / 1)] class ColorClip(Color): FIT = 'clip' # Gamut mapping in LCh yellow = Color('color(display-p3 1 1 0)') lightness_mask = Color('lch(0% none none)') HtmlRow(Color.steps([yellow, lightness_mask], steps=10, space='lch')) # Clipping yellow = ColorClip('color(display-p3 1 1 0)') lightness_mask = Color('lch(0% none none)') HtmlRow(ColorClip.steps([yellow, lightness_mask], steps=10, space='lch')) Edit Share Run Cancel There are times when clipping is simply preferred. It is fast, and if you are just trimming noise off channels, it is very useful, but if the idea is to present an in gamut color that tries to preserve as much of the intent of the original color as possible, other methods may be desired. There are no doubt better gamut methods available than ColorAide offers, and more may be added in the future, but ColorAide can also be extended using 3 rd party plugins as well. .info-container {display: inline-block;}","title":"Why Not Just Clip?"},{"location":"harmonies/","text":"Color Harmonies In color theory, color harmony refers to the property that certain aesthetically pleasing color combinations have. Modern day color theory probably starts with the first color wheel created by Isaac Newton. Based on his observations of light with prisms, he formed probably the first color wheel. From there, many others built upon this work, sometimes with opposing ideas. The original color wheel, while inspired by what was observed by light, was created based on experiments with pigments as well. As most know, in paint, red, yellow, and blue are considered primary colors. Newton thought this translated to light as well and stated they were also the primary colors of light. While this isn't actually true, his work was very important in reshaping how people viewed color. Over time, the color wheel was refined. The traditional model, which we will call an RYB color model, defined 12 colors that made up the wheel: the primary colors, the secondary colors, and the tertiary colors. The secondary colors are created by evenly mixing the primary colors, and the tertiary colors are created by evenly mixing those primary colors with the secondary colors. The idea of color harmonies originates from the idea that colors, based on their relative position on the wheel, can form more pleasing color combinations. Which Color Space is Best for Color Harmonies? As we know, these days, there are many color spaces out there: subtractive models, additive models, perceptually uniform models, high dynamic range models, etc. Many color spaces trying to solve specific issues based on the knowledge at the time. The early work that created the first color wheel was based on an RYB color model. In modern TVs and monitors, the RYB color model is not used. Electronic screens create all their colors with light based methods that mix red, green, and blue lights. In addition, the human eye perceives colors using red, green, and blue as well. In reality, we could create a color wheel from any of the various color spaces out there and end up with slightly different results. If we were to compose a color wheel based on the common sRGB color space, we could base it off the 3 primary colors of light. Starting with red (0\u02da), we could extract the colors at evenly spaced degrees, 30\u02da to be exact. This would give us our 12 colors for the sRGB color space. >>> HtmlSteps ([ Color ( 'hsl' , [ x , 1 , 0.5 ]) for x in range ( 0 , 360 , 30 )]) [color(--hsl 0 1 0.5 / 1), color(--hsl 30 1 0.5 / 1), color(--hsl 60 1 0.5 / 1), color(--hsl 90 1 0.5 / 1), color(--hsl 120 1 0.5 / 1), color(--hsl 150 1 0.5 / 1), color(--hsl 180 1 0.5 / 1), color(--hsl 210 1 0.5 / 1), color(--hsl 240 1 0.5 / 1), color(--hsl 270 1 0.5 / 1), color(--hsl 300 1 0.5 / 1), color(--hsl 330 1 0.5 / 1)] HtmlSteps([Color('hsl', [x, 1, 0.5]) for x in range(0, 360, 30)]) Edit Share Run Cancel From this we can construct an sRGB color wheel. This is different from the RYB color wheel, and more accurate in relation to how light works, but does it yield better harmonies for colors? If we were to select the perceptually uniform OkLCh color space, and seed it with red's lightness and chroma, we'd get: >>> c = Color ( 'red' ) . convert ( 'oklch' , in_place = True ) >>> HtmlSteps ([ Color ( 'oklch' , [ * c [ 0 : 2 ], x ]) for x in range ( 0 , 360 , 30 )]) [color(--oklch 0.62796 0.25768 0 / 1), color(--oklch 0.62796 0.25768 30 / 1), color(--oklch 0.62796 0.25768 60 / 1), color(--oklch 0.62796 0.25768 90 / 1), color(--oklch 0.62796 0.25768 120 / 1), color(--oklch 0.62796 0.25768 150 / 1), color(--oklch 0.62796 0.25768 180 / 1), color(--oklch 0.62796 0.25768 210 / 1), color(--oklch 0.62796 0.25768 240 / 1), color(--oklch 0.62796 0.25768 270 / 1), color(--oklch 0.62796 0.25768 300 / 1), color(--oklch 0.62796 0.25768 330 / 1)] c = Color('red').convert('oklch', in_place=True) HtmlSteps([Color('oklch', [*c[0:2], x]) for x in range(0, 360, 30)]) Edit Share Run Cancel This produces colors with visually more uniform lightness, does that mean these are better? The truth is, what is better or even harmonious can be largely subjective, and everyone has reasons for selecting certain color spaces for a specific task. Many artists swear by the classical color wheel, others are fine with using the sRGB color wheel as it is easy to work with in CSS via the HSL color space, and there are still others that are more interested in perceptually uniform color spaces that aim for more consistent hues and predictable lightness. As far as ColorAide is concerned, we've chosen to use OkLCh as the color space in which we work in. This is based mainly on the fact it keeps hue more consistent than some other options, and it allows us to support a wider gamut than options like HSL. >>> HtmlSteps ( Color . steps ([ 'black' , 'blue' , 'white' ], steps = 11 , space = 'oklch' )) [color(srgb 0 0 0 / 1), color(srgb 0 0 0.0861 / 1), color(srgb 0 0 0.2806 / 1), color(srgb 0 0 0.50211 / 1), color(srgb 0 0 0.74321 / 1), color(srgb 0 0 1 / 1), color(srgb 0.13515 0.37566 1.0212 / 1), color(srgb 0.34745 0.558 1.0336 / 1), color(srgb 0.55957 0.71438 1.0355 / 1), color(srgb 0.77677 0.85998 1.0252 / 1), color(srgb 1 1 1 / 1)] >>> HtmlSteps ( Color . steps ([ 'black' , 'blue' , 'white' ], steps = 11 , space = 'hsl' )) [color(srgb 0 0 0 / 1), color(srgb 0.08 0.08 0.12 / 1), color(srgb 0.12 0.12 0.28 / 1), color(srgb 0.12 0.12 0.48 / 1), color(srgb 0.08 0.08 0.72 / 1), color(srgb 0 0 1 / 1), color(srgb 0.28 0.28 0.92 / 1), color(srgb 0.52 0.52 0.88 / 1), color(srgb 0.72 0.72 0.88 / 1), color(srgb 0.88 0.88 0.92 / 1), color(srgb 1 1 1 / 1)] >>> HtmlSteps ( Color . steps ([ 'black' , 'blue' , 'white' ], steps = 11 , space = 'lch' )) [color(srgb 0 0 0 / 1), color(srgb 0.09272 0.04797 0.19247 / 1), color(srgb 0.12553 0.06194 0.37252 / 1), color(srgb 0.13832 0.06149 0.56917 / 1), color(srgb 0.11911 0.0451 0.77902 / 1), color(srgb 0 0 1 / 1), color(srgb 0.42597 0.26342 1.0084 / 1), color(srgb 0.60968 0.44766 1.0135 / 1), color(srgb 0.7562 0.62855 1.0144 / 1), color(srgb 0.88411 0.81218 1.0103 / 1), color(srgb 1 1 1 / 1)] HtmlSteps(Color.steps(['black', 'blue', 'white'], steps=11, space='oklch')) HtmlSteps(Color.steps(['black', 'blue', 'white'], steps=11, space='hsl')) HtmlSteps(Color.steps(['black', 'blue', 'white'], steps=11, space='lch')) Edit Share Run Cancel While OkLCh is the default, we understand that there are many reasons to use other spaces, so use what you like, we won't judge . >>> HtmlSteps ( Color ( 'red' ) . harmony ( 'complement' )) [color(srgb 1 0 0 / 1), color(srgb -0.56631 0.66342 0.85808 / 1)] >>> HtmlSteps ( Color ( 'red' ) . harmony ( 'complement' , space = 'hsl' )) [color(srgb 1 0 0 / 1), color(srgb 0 1 1 / 1)] HtmlSteps(Color('red').harmony('complement')) HtmlSteps(Color('red').harmony('complement', space='hsl')) Edit Share Run Cancel Supported Harmonies ColorAide currently supports 7 theorized color harmonies: monochromatic , complementary , split complementary , analogous , triadic , square , and rectangular . By default, all color harmonies are calculated with the perceptually uniform OkLCh color space, but other color spaces can be used if desired. While we use OkLCh, we will actually visualize the examples in Okhsl. Okhsl is a derivative of OkLCh with the lightness adjusted to match CIELCh and reshaped in a cylindrical form. It is limited to the sRGB gamut only, but it can help visualize better what is happening in a familiar color wheel format. You can see the difference below: OkLCh Color Slice Okhsl Color Slice Monochromatic The monochromatic harmony pairs various tints and shades of a color together to create pleasing color schemes. >>> HtmlSteps ( Color ( 'red' ) . harmony ( 'mono' )) [color(srgb 0.50211 0 0 / 1), color(srgb 0.74321 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1.0281 0.36963 0.30066 / 1), color(srgb 1.0439 0.5511 0.48294 / 1)] HtmlSteps(Color('red').harmony('mono')) Edit Share Run Cancel Achromatic Colors Pure white and black will not be included in a monochromatic color harmony unless the color is achromatic. Complementary Complementary harmonies use a dyad of colors at opposite ends of the color wheel. >>> HtmlSteps ( Color ( 'red' ) . harmony ( 'complement' )) [color(srgb 1 0 0 / 1), color(srgb -0.56631 0.66342 0.85808 / 1)] HtmlSteps(Color('red').harmony('complement')) Edit Share Run Cancel Split Complementary Split Complementary is similar to complementary, but actually uses a triad of colors. Instead of just choosing one complement, it splits and chooses two colors on the opposite side that are close, but not adjacent. >>> HtmlSteps ( Color ( 'red' ) . harmony ( 'split' )) [color(srgb 1 0 0 / 1), color(srgb -0.42456 0.56514 1.0654 / 1), color(srgb -0.55785 0.70538 0.55005 / 1)] HtmlSteps(Color('red').harmony('split')) Edit Share Run Cancel Analogous Analogous harmonies consists of 3 adjacent colors. >>> HtmlSteps ( Color ( 'red' ) . harmony ( 'analogous' )) [color(srgb 1 0 0 / 1), color(srgb 0.93909 0.27571 -0.3354 / 1), color(srgb 0.96207 -0.03685 0.519 / 1)] HtmlSteps(Color('red').harmony('analogous')) Edit Share Run Cancel Triadic Triadic draws an equilateral triangle between 3 colors on the color wheel. For instance, the primary colors have triadic harmony. >>> HtmlSteps ( Color ( 'red' ) . harmony ( 'triad' )) [color(srgb 1 0 0 / 1), color(srgb -0.35621 0.68224 -0.02255 / 1), color(srgb 0.30803 0.43723 1.1317 / 1)] HtmlSteps(Color('red').harmony('triad')) Edit Share Run Cancel Tetradic Square Tetradic color harmonies refer to a group of four colors. One tetradic color harmony can be found by drawing a square between four colors on the color wheel. >>> HtmlSteps ( Color ( 'red' ) . harmony ( 'square' )) [color(srgb 1 0 0 / 1), color(srgb 0.48219 0.59813 -0.35229 / 1), color(srgb -0.56631 0.66342 0.85808 / 1), color(srgb 0.63834 0.31074 1.0421 / 1)] HtmlSteps(Color('red').harmony('square')) Edit Share Run Cancel Tetradic Rectangular The rectangular tetradic harmony is very similar to the square tetradic harmony except that it draws a rectangle between four colors instead of a square. >>> HtmlSteps ( Color ( 'red' ) . harmony ( 'rectangle' )) [color(srgb 1 0 0 / 1), color(srgb 0.93909 0.27571 -0.3354 / 1), color(srgb -0.56631 0.66342 0.85808 / 1), color(srgb -0.42456 0.56514 1.0654 / 1)] HtmlSteps(Color('red').harmony('rectangle')) Edit Share Run Cancel Changing the Default Harmony Color Space If you'd like to change the Color () class's default harmony color space, it can be done with class override . Simply derive a new Color () class from the original and override the HARMONY property with the name of a suitable cylindrical color space. Afterwards, all color color harmony calculations will use the specified color space unless overridden via the method's space parameter. >>> class Custom ( Color ): ... HARMONY = 'hsl' ... >>> HtmlSteps ( Custom ( 'red' ) . harmony ( 'split' )) [color(srgb 1 0 0 / 1), color(srgb 0 0.5 1 / 1), color(srgb 0 1 0.5 / 1)] class Custom(Color): HARMONY = 'hsl' HtmlSteps(Custom('red').harmony('split')) Edit Share Run Cancel .info-container {display: inline-block;}","title":"Color Harmonies"},{"location":"harmonies/#color-harmonies","text":"In color theory, color harmony refers to the property that certain aesthetically pleasing color combinations have. Modern day color theory probably starts with the first color wheel created by Isaac Newton. Based on his observations of light with prisms, he formed probably the first color wheel. From there, many others built upon this work, sometimes with opposing ideas. The original color wheel, while inspired by what was observed by light, was created based on experiments with pigments as well. As most know, in paint, red, yellow, and blue are considered primary colors. Newton thought this translated to light as well and stated they were also the primary colors of light. While this isn't actually true, his work was very important in reshaping how people viewed color. Over time, the color wheel was refined. The traditional model, which we will call an RYB color model, defined 12 colors that made up the wheel: the primary colors, the secondary colors, and the tertiary colors. The secondary colors are created by evenly mixing the primary colors, and the tertiary colors are created by evenly mixing those primary colors with the secondary colors. The idea of color harmonies originates from the idea that colors, based on their relative position on the wheel, can form more pleasing color combinations.","title":"Color Harmonies"},{"location":"harmonies/#which-color-space-is-best-for-color-harmonies","text":"As we know, these days, there are many color spaces out there: subtractive models, additive models, perceptually uniform models, high dynamic range models, etc. Many color spaces trying to solve specific issues based on the knowledge at the time. The early work that created the first color wheel was based on an RYB color model. In modern TVs and monitors, the RYB color model is not used. Electronic screens create all their colors with light based methods that mix red, green, and blue lights. In addition, the human eye perceives colors using red, green, and blue as well. In reality, we could create a color wheel from any of the various color spaces out there and end up with slightly different results. If we were to compose a color wheel based on the common sRGB color space, we could base it off the 3 primary colors of light. Starting with red (0\u02da), we could extract the colors at evenly spaced degrees, 30\u02da to be exact. This would give us our 12 colors for the sRGB color space. >>> HtmlSteps ([ Color ( 'hsl' , [ x , 1 , 0.5 ]) for x in range ( 0 , 360 , 30 )]) [color(--hsl 0 1 0.5 / 1), color(--hsl 30 1 0.5 / 1), color(--hsl 60 1 0.5 / 1), color(--hsl 90 1 0.5 / 1), color(--hsl 120 1 0.5 / 1), color(--hsl 150 1 0.5 / 1), color(--hsl 180 1 0.5 / 1), color(--hsl 210 1 0.5 / 1), color(--hsl 240 1 0.5 / 1), color(--hsl 270 1 0.5 / 1), color(--hsl 300 1 0.5 / 1), color(--hsl 330 1 0.5 / 1)] HtmlSteps([Color('hsl', [x, 1, 0.5]) for x in range(0, 360, 30)]) Edit Share Run Cancel From this we can construct an sRGB color wheel. This is different from the RYB color wheel, and more accurate in relation to how light works, but does it yield better harmonies for colors? If we were to select the perceptually uniform OkLCh color space, and seed it with red's lightness and chroma, we'd get: >>> c = Color ( 'red' ) . convert ( 'oklch' , in_place = True ) >>> HtmlSteps ([ Color ( 'oklch' , [ * c [ 0 : 2 ], x ]) for x in range ( 0 , 360 , 30 )]) [color(--oklch 0.62796 0.25768 0 / 1), color(--oklch 0.62796 0.25768 30 / 1), color(--oklch 0.62796 0.25768 60 / 1), color(--oklch 0.62796 0.25768 90 / 1), color(--oklch 0.62796 0.25768 120 / 1), color(--oklch 0.62796 0.25768 150 / 1), color(--oklch 0.62796 0.25768 180 / 1), color(--oklch 0.62796 0.25768 210 / 1), color(--oklch 0.62796 0.25768 240 / 1), color(--oklch 0.62796 0.25768 270 / 1), color(--oklch 0.62796 0.25768 300 / 1), color(--oklch 0.62796 0.25768 330 / 1)] c = Color('red').convert('oklch', in_place=True) HtmlSteps([Color('oklch', [*c[0:2], x]) for x in range(0, 360, 30)]) Edit Share Run Cancel This produces colors with visually more uniform lightness, does that mean these are better? The truth is, what is better or even harmonious can be largely subjective, and everyone has reasons for selecting certain color spaces for a specific task. Many artists swear by the classical color wheel, others are fine with using the sRGB color wheel as it is easy to work with in CSS via the HSL color space, and there are still others that are more interested in perceptually uniform color spaces that aim for more consistent hues and predictable lightness. As far as ColorAide is concerned, we've chosen to use OkLCh as the color space in which we work in. This is based mainly on the fact it keeps hue more consistent than some other options, and it allows us to support a wider gamut than options like HSL. >>> HtmlSteps ( Color . steps ([ 'black' , 'blue' , 'white' ], steps = 11 , space = 'oklch' )) [color(srgb 0 0 0 / 1), color(srgb 0 0 0.0861 / 1), color(srgb 0 0 0.2806 / 1), color(srgb 0 0 0.50211 / 1), color(srgb 0 0 0.74321 / 1), color(srgb 0 0 1 / 1), color(srgb 0.13515 0.37566 1.0212 / 1), color(srgb 0.34745 0.558 1.0336 / 1), color(srgb 0.55957 0.71438 1.0355 / 1), color(srgb 0.77677 0.85998 1.0252 / 1), color(srgb 1 1 1 / 1)] >>> HtmlSteps ( Color . steps ([ 'black' , 'blue' , 'white' ], steps = 11 , space = 'hsl' )) [color(srgb 0 0 0 / 1), color(srgb 0.08 0.08 0.12 / 1), color(srgb 0.12 0.12 0.28 / 1), color(srgb 0.12 0.12 0.48 / 1), color(srgb 0.08 0.08 0.72 / 1), color(srgb 0 0 1 / 1), color(srgb 0.28 0.28 0.92 / 1), color(srgb 0.52 0.52 0.88 / 1), color(srgb 0.72 0.72 0.88 / 1), color(srgb 0.88 0.88 0.92 / 1), color(srgb 1 1 1 / 1)] >>> HtmlSteps ( Color . steps ([ 'black' , 'blue' , 'white' ], steps = 11 , space = 'lch' )) [color(srgb 0 0 0 / 1), color(srgb 0.09272 0.04797 0.19247 / 1), color(srgb 0.12553 0.06194 0.37252 / 1), color(srgb 0.13832 0.06149 0.56917 / 1), color(srgb 0.11911 0.0451 0.77902 / 1), color(srgb 0 0 1 / 1), color(srgb 0.42597 0.26342 1.0084 / 1), color(srgb 0.60968 0.44766 1.0135 / 1), color(srgb 0.7562 0.62855 1.0144 / 1), color(srgb 0.88411 0.81218 1.0103 / 1), color(srgb 1 1 1 / 1)] HtmlSteps(Color.steps(['black', 'blue', 'white'], steps=11, space='oklch')) HtmlSteps(Color.steps(['black', 'blue', 'white'], steps=11, space='hsl')) HtmlSteps(Color.steps(['black', 'blue', 'white'], steps=11, space='lch')) Edit Share Run Cancel While OkLCh is the default, we understand that there are many reasons to use other spaces, so use what you like, we won't judge . >>> HtmlSteps ( Color ( 'red' ) . harmony ( 'complement' )) [color(srgb 1 0 0 / 1), color(srgb -0.56631 0.66342 0.85808 / 1)] >>> HtmlSteps ( Color ( 'red' ) . harmony ( 'complement' , space = 'hsl' )) [color(srgb 1 0 0 / 1), color(srgb 0 1 1 / 1)] HtmlSteps(Color('red').harmony('complement')) HtmlSteps(Color('red').harmony('complement', space='hsl')) Edit Share Run Cancel","title":"Which Color Space is Best for Color Harmonies?"},{"location":"harmonies/#supported-harmonies","text":"ColorAide currently supports 7 theorized color harmonies: monochromatic , complementary , split complementary , analogous , triadic , square , and rectangular . By default, all color harmonies are calculated with the perceptually uniform OkLCh color space, but other color spaces can be used if desired. While we use OkLCh, we will actually visualize the examples in Okhsl. Okhsl is a derivative of OkLCh with the lightness adjusted to match CIELCh and reshaped in a cylindrical form. It is limited to the sRGB gamut only, but it can help visualize better what is happening in a familiar color wheel format. You can see the difference below: OkLCh Color Slice Okhsl Color Slice","title":"Supported Harmonies"},{"location":"harmonies/#monochromatic","text":"The monochromatic harmony pairs various tints and shades of a color together to create pleasing color schemes. >>> HtmlSteps ( Color ( 'red' ) . harmony ( 'mono' )) [color(srgb 0.50211 0 0 / 1), color(srgb 0.74321 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1.0281 0.36963 0.30066 / 1), color(srgb 1.0439 0.5511 0.48294 / 1)] HtmlSteps(Color('red').harmony('mono')) Edit Share Run Cancel Achromatic Colors Pure white and black will not be included in a monochromatic color harmony unless the color is achromatic.","title":"Monochromatic"},{"location":"harmonies/#complementary","text":"Complementary harmonies use a dyad of colors at opposite ends of the color wheel. >>> HtmlSteps ( Color ( 'red' ) . harmony ( 'complement' )) [color(srgb 1 0 0 / 1), color(srgb -0.56631 0.66342 0.85808 / 1)] HtmlSteps(Color('red').harmony('complement')) Edit Share Run Cancel","title":"Complementary"},{"location":"harmonies/#split-complementary","text":"Split Complementary is similar to complementary, but actually uses a triad of colors. Instead of just choosing one complement, it splits and chooses two colors on the opposite side that are close, but not adjacent. >>> HtmlSteps ( Color ( 'red' ) . harmony ( 'split' )) [color(srgb 1 0 0 / 1), color(srgb -0.42456 0.56514 1.0654 / 1), color(srgb -0.55785 0.70538 0.55005 / 1)] HtmlSteps(Color('red').harmony('split')) Edit Share Run Cancel","title":"Split Complementary"},{"location":"harmonies/#analogous","text":"Analogous harmonies consists of 3 adjacent colors. >>> HtmlSteps ( Color ( 'red' ) . harmony ( 'analogous' )) [color(srgb 1 0 0 / 1), color(srgb 0.93909 0.27571 -0.3354 / 1), color(srgb 0.96207 -0.03685 0.519 / 1)] HtmlSteps(Color('red').harmony('analogous')) Edit Share Run Cancel","title":"Analogous"},{"location":"harmonies/#triadic","text":"Triadic draws an equilateral triangle between 3 colors on the color wheel. For instance, the primary colors have triadic harmony. >>> HtmlSteps ( Color ( 'red' ) . harmony ( 'triad' )) [color(srgb 1 0 0 / 1), color(srgb -0.35621 0.68224 -0.02255 / 1), color(srgb 0.30803 0.43723 1.1317 / 1)] HtmlSteps(Color('red').harmony('triad')) Edit Share Run Cancel","title":"Triadic"},{"location":"harmonies/#tetradic-square","text":"Tetradic color harmonies refer to a group of four colors. One tetradic color harmony can be found by drawing a square between four colors on the color wheel. >>> HtmlSteps ( Color ( 'red' ) . harmony ( 'square' )) [color(srgb 1 0 0 / 1), color(srgb 0.48219 0.59813 -0.35229 / 1), color(srgb -0.56631 0.66342 0.85808 / 1), color(srgb 0.63834 0.31074 1.0421 / 1)] HtmlSteps(Color('red').harmony('square')) Edit Share Run Cancel","title":"Tetradic Square"},{"location":"harmonies/#tetradic-rectangular","text":"The rectangular tetradic harmony is very similar to the square tetradic harmony except that it draws a rectangle between four colors instead of a square. >>> HtmlSteps ( Color ( 'red' ) . harmony ( 'rectangle' )) [color(srgb 1 0 0 / 1), color(srgb 0.93909 0.27571 -0.3354 / 1), color(srgb -0.56631 0.66342 0.85808 / 1), color(srgb -0.42456 0.56514 1.0654 / 1)] HtmlSteps(Color('red').harmony('rectangle')) Edit Share Run Cancel","title":"Tetradic Rectangular"},{"location":"harmonies/#changing-the-default-harmony-color-space","text":"If you'd like to change the Color () class's default harmony color space, it can be done with class override . Simply derive a new Color () class from the original and override the HARMONY property with the name of a suitable cylindrical color space. Afterwards, all color color harmony calculations will use the specified color space unless overridden via the method's space parameter. >>> class Custom ( Color ): ... HARMONY = 'hsl' ... >>> HtmlSteps ( Custom ( 'red' ) . harmony ( 'split' )) [color(srgb 1 0 0 / 1), color(srgb 0 0.5 1 / 1), color(srgb 0 1 0.5 / 1)] class Custom(Color): HARMONY = 'hsl' HtmlSteps(Custom('red').harmony('split')) Edit Share Run Cancel .info-container {display: inline-block;}","title":"Changing the Default Harmony Color Space"},{"location":"interpolation/","text":"Color Interpolation Interpolation is a type of estimation that finds new data points based on the range of a discrete set of known data points. When used in the context of color, it is finding one or more colors that reside between any two given colors. This is often used to simulate mixing colors, creating gradients, or even create color palettes. ColorAide provides a number of useful utilities based on interpolation. Linear Interpolation One of the most common, and easiest ways to interpolate data between two points is to use linear interpolation. An easy way of thinking about this concept is to imagine drawing a straight line that connects two colors within a color space. We could then navigate up and down that line and return colors at different points to simulate mixing colors at various percentages or return the whole range and create a gradient. To further illustrate this point, the example below shows a slice of the Oklab color space at a lightness of 70%. On this 2D plane, we select two colors: oklab ( 0 . 7 0 . 15 0 . 1 ) and oklab ( 0 . 7 - 0 . 03 - 0 . 12 ) . We then connect these two colors with a line. We can then select any point on the line to simulate the mixing of these colors. 0% would yield the first color, 100% would yield the second color, and 50% would yield a new color: oklab ( 0 . 7 0 . 06 - 0 . 01 ) . Interpolation performed at 50% The interpolate method allows a user to create a linear interpolation function using two or more colors. A returned interpolation function accepts an input between 0 - 1 and will cause a new color between the specified colors to be returned. By default, colors are interpolated in the perceptually uniform Oklab color space, though any supported color space can be used instead. This also applies to all methods that use interpolation, such as steps , mix , etc. As an example, below we create an interpolation between rebeccapurple and lch ( 85 % 100 85 ) . We then step through values of 0.1 , 0.2 , 0.3 , etc. This returns colors at various positions on the line that connects the two colors, 0 returning rebeccapurple and 1 returning lch ( 85 % 100 85 ) . >>> i = Color . interpolate ([ \"rebeccapurple\" , \"lch(85% 100 85)\" ], space = 'lch' ) >>> [ i ( x / 10 ) . to_string () for x in range ( 10 + 1 )] ['rgb(102 51 153)', 'rgb(142.02 45.341 154.32)', 'rgb(178.57 36.395 149.51)', 'rgb(211.1 28.455 139.17)', 'rgb(238.6 32.963 124.25)', 'rgb(255 53.081 105.76)', 'rgb(255 91.068 90.053)', 'rgb(255 123.62 78.434)', 'rgb(255 152.43 69.779)', 'rgb(255 178.23 51.263)', 'rgb(255 204.41 0)'] i = Color.interpolate([\"rebeccapurple\", \"lch(85% 100 85)\"], space='lch') [i(x / 10).to_string() for x in range(10 + 1)] Edit Share Run Cancel If we create enough steps, we can create a gradient. >>> Color . interpolate ( ... [ \"rebeccapurple\" , \"lch(85% 100 85)\" ], ... space = 'lch' ... ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbba6c50> Color.interpolate( [\"rebeccapurple\", \"lch(85% 100 85)\"], space='lch' ) Edit Share Run Cancel Interpolating in Constrained Gamuts Some color spaces, like sRGB, have a limited gamut, but have extended ranges that allow them to represent out of gamut colors in a sane way. Other models, like HSL, HSV, and HWB have the same limited gamut, but have no sane way to represent out of gamut colors. If colors are requested to be interpolated and are too big to be interpolated in the requested color space and cannot properly be represented in that space or model, the colors will be gamut mapped before interpolation. Piecewise Interpolation Piecewise interpolation takes the idea of linear interpolation, and then applies it to multiple colors. As drawing a straight line through a series of points greater than two can be problematic to achieve, piecewise interpolation creates straight lines between each color. When the interpolate method receives more that two colors, the interpolation will utilize piecewise interpolation and interpolation will be broken up between each pair of colors. The function, just like when interpolating between two colors, still takes a range of 0 - 1, only it will now apply to the entire range that spans all the colors. Piecewise interpolation is simply a method of breaking up a data set and performing interpolation over small segments. >>> Color . interpolate ([ 'black' , 'red' , 'white' ]) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbf2f160> Color.interpolate(['black', 'red', 'white']) Edit Share Run Cancel This approach generally works well, but since the placement of colors may not be in a straight line, you will often have pivot points and the transition may not be quite as smooth. Cubic Spline Interpolation Linear interpolation is nice because it is easy to implement, and due to its straight forward nature, pretty fast. With that said, it doesn't always have the smoothest transitions. It turns out that there are other piecewise ways to interpolate that can yield smoother results. Inspired by some efforts seen on the web and in the great JavaScript library Culori , ColorAide implements a number of spline based interpolation methods. ColorAide implements 3 piecewise, cubic splines. B-Spline B-spline is a piecewise spline similar to Bezier curves. It utilizes \"control points\" that help shape the interpolation path through two or more colors. Like Bezier Curves, the path does not pass through all the colors, but it is clamped at the start and end. It can be used by specifying bspline as the interpolation method. >>> Color . interpolate ([ 'red' , 'green' , 'blue' , 'orange' ], method = 'bspline' ) <coloraide.interpolate.bspline.InterpolatorBSpline object at 0x7fe9dbbbe440> Color.interpolate(['red', 'green', 'blue', 'orange'], method='bspline') Edit Share Run Cancel Natural The \"natural\" spline is an the same B-spline approach except an algorithm is applied that uses the colors as data points and calculates control points such that the interpolation passes through all the data points. The resultant spline has the continuity and properties of a natural spline, hence the name. One down side is that it can overshoot or undershoot a bit, and can occasionally cause the interpolation path to pass out of gamut if interpolating on an edge. It can be used by specifying natural as the interpolation method. >>> Color . interpolate ([ 'red' , 'green' , 'blue' , 'orange' ], method = 'natural' ) <coloraide.interpolate.bspline_natural.InterpolatorNaturalBSpline object at 0x7fe9dbe91750> Color.interpolate(['red', 'green', 'blue', 'orange'], method='natural') Edit Share Run Cancel Monotone The \"monotone\" spline is a piecewise interpolation spline that preserves monotonicity. As far as we are concerned, the important thing to note is that it greatly reduces any overshoot or undershoot in the interpolation. >>> Color . interpolate ([ 'red' , 'green' , 'blue' , 'orange' ], method = 'monotone' ) <coloraide.interpolate.monotone.InterpolatorMonotone object at 0x7fe9dbf8f8b0> Color.interpolate(['red', 'green', 'blue', 'orange'], method='monotone') Edit Share Run Cancel Catmull-Rom Catmull-Rom is Not Registered By Default Lastly, the Catmull-Rom spline is another \"interpolating\" spline that passes through all of its data points, similar to the \"natural\" spline, but it but does not share the same continuity and properties of a \"natural\" spline. Much like the \"natural\" spline, it can overshoot or undershoot. Catmull-Rom is not registered by default, but can be registered as shown below and then used by specifying catrom as the interpolation method. >>> from coloraide import Color >>> from coloraide.interpolate.catmull_rom import CatmullRom >>> class Custom ( Color ): ... ... >>> Custom . register ( CatmullRom ()) >>> Custom . interpolate ([ 'red' , 'green' , 'blue' , 'orange' ], method = 'catrom' ) <coloraide.interpolate.catmull_rom.InterpolatorCatmullRom object at 0x7fe9dbbd1e70> from coloraide import Color from coloraide.interpolate.catmull_rom import CatmullRom class Custom(Color): ... Custom.register(CatmullRom()) Custom.interpolate(['red', 'green', 'blue', 'orange'], method='catrom') Edit Share Run Cancel Hue Interpolation In interpolation, hues are handled special allowing us to control the way in which hues are evaluated. By default, the shortest angle between two hues is interpolated between, but the hue allows us to redefine this behavior in a number of different ways: shorter , longer , increasing , decreasing , and specified . Below, we can see how the interpolation varies using shorter vs longer (interpolate between the largest angle). >>> i = Color . interpolate ( ... [ \"lch(52% 58.1 22.7)\" , Color ( \"lch(56% 49.1 257.1)\" ) . mask ( \"hue\" , invert = True )], ... space = \"lch\" ... ) >>> i ( 0.2477 ) . to_string () lch(52 58.1 351.59) >>> i = Color . interpolate ( ... [ \"lch(52% 58.1 22.7)\" , Color ( \"lch(56% 49.1 257.1)\" ) . mask ( \"hue\" , invert = True )], ... space = \"lch\" , ... hue = \"longer\" ... ) >>> i ( 0.2477 ) . to_string () lch(52 58.1 80.761) i = Color.interpolate( [\"lch(52% 58.1 22.7)\", Color(\"lch(56% 49.1 257.1)\").mask(\"hue\", invert=True)], space=\"lch\" ) i(0.2477).to_string() i = Color.interpolate( [\"lch(52% 58.1 22.7)\", Color(\"lch(56% 49.1 257.1)\").mask(\"hue\", invert=True)], space=\"lch\", hue=\"longer\" ) i(0.2477).to_string() Edit Share Run Cancel To help visualize the different hue methods, consider the following evaluation between rebeccapurple and lch ( 85 % 85 805 ) . Below we will demonstrate each of the different hue evaluations. To learn more, check out the CSS level 4 specification which describes each one. Interpolating Multiple Colors The algorithm has been tweaked in order to calculate fix-ups of multiple hues such that they are all relative to each other. This is a requirement for interpolation methods that use cubic splines that evaluate many hues at the same time as opposed to linear, piecewise interpolation that only evaluates two hues at any given time. shorter longer increasing decreasing specified >>> Color . interpolate ( ... [ \"rebeccapurple\" , \"lch(85% 100 805)\" ], ... space = 'lch' , ... hue = \"shorter\" ... ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbbbec20> Color.interpolate( [\"rebeccapurple\", \"lch(85% 100 805)\"], space='lch', hue=\"shorter\" ) Edit Share Run Cancel >>> Color . interpolate ( ... [ \"rebeccapurple\" , \"lch(85% 100 805)\" ], ... space = 'lch' , ... hue = \"longer\" ... ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbbbf250> Color.interpolate( [\"rebeccapurple\", \"lch(85% 100 805)\"], space='lch', hue=\"longer\" ) Edit Share Run Cancel >>> Color . interpolate ( ... [ \"rebeccapurple\" , \"lch(85% 100 805)\" ], ... space = 'lch' , ... hue = \"increasing\" ... ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbe924d0> Color.interpolate( [\"rebeccapurple\", \"lch(85% 100 805)\"], space='lch', hue=\"increasing\" ) Edit Share Run Cancel >>> Color . interpolate ( ... [ \"rebeccapurple\" , \"lch(85% 100 805)\" ], ... space = 'lch' , ... hue = \"decreasing\" ... ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbf8e620> Color.interpolate( [\"rebeccapurple\", \"lch(85% 100 805)\"], space='lch', hue=\"decreasing\" ) Edit Share Run Cancel >>> Color . interpolate ( ... [ \"rebeccapurple\" , \"lch(85% 100 805)\" ], ... space = 'lch' , ... hue = \"specified\" ... ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbe91d50> Color.interpolate( [\"rebeccapurple\", \"lch(85% 100 805)\"], space='lch', hue=\"specified\" ) Edit Share Run Cancel Interpolating with Alpha Interpolating color channels is pretty straight forward and uses traditional linear interpolation logic, but when introducing transparency to a color, interpolation uses a concept known as premultiplication which alters the normal interpolation process. Premultiplication is a technique that tends to produce better results when two colors have differing transparency. Consider the following two example. Normally, when transitioning to a \"transparent\" color, the colors will be more gray during the transition. This is because transparent is actually black. But when using premultiplication, the transition looks just as one would expect as the transparent color's channels are weighted less due to the high transparency. The example below transitions from white to a fully transparent color for both non-premultiplied and premultiplied interpolation. We've forced a white background ( for dark theme users ) to make the grayish transition of the non-premultiplied results easy to see. >>> Color . interpolate ([ 'white' , 'transparent' ], space = 'srgb' , premultiplied = False ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9db952b60> >>> Color . interpolate ([ 'white' , 'transparent' ], space = 'srgb' ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9db953e80> Color.interpolate(['white', 'transparent'], space='srgb', premultiplied=False) Color.interpolate(['white', 'transparent'], space='srgb') Edit Share Run Cancel Premultiplication does better because it takes into account the differing amounts of transparency that each color has. Colors that are more opaque are \"weighted\" more, and contribute more to the overall color. Consider the example below. Orange is fully opaque while blue is quite transparent. Logically, the blue shouldn't have as big an affect on the overall color as it is so faint, and yet, in the un-premultiplied example, when mixing the colors equally, we see that the resultant color is also equally influenced by the hue of both colors. In the premultiplied example, we see that orange is still quite dominant at 50%. >>> Color ( 'orange' ) . mix ( Color ( 'blue' ) . set ( 'alpha' , 0.25 ), space = 'srgb' , premultiplied = False ) color(srgb 0.5 0.32353 0.5 / 0.625) >>> Color ( 'orange' ) . mix ( Color ( 'blue' ) . set ( 'alpha' , 0.25 ), space = 'srgb' ) color(srgb 0.8 0.51765 0.2 / 0.625) Color('orange').mix(Color('blue').set('alpha', 0.25), space='srgb', premultiplied=False) Color('orange').mix(Color('blue').set('alpha', 0.25), space='srgb') Edit Share Run Cancel If we interpolate it, we can see the difference in transition. >>> Color . interpolate ([ 'orange' , Color ( 'blue' ) . set ( 'alpha' , 0.25 )], space = 'srgb' , premultiplied = False ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9db8f6380> >>> Color . interpolate ([ 'orange' , Color ( 'blue' ) . set ( 'alpha' , 0.25 )], space = 'srgb' ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbbbe770> Color.interpolate(['orange', Color('blue').set('alpha', 0.25)], space='srgb', premultiplied=False) Color.interpolate(['orange', Color('blue').set('alpha', 0.25)], space='srgb') Edit Share Run Cancel There may be some cases where it is desired to use a non-premultiplied. There are many reasons, one could simply be that you need to mimic the same behavior of a system that does not use premultiplied interpolation. If so, simply set premultiplied to False as shown above. Masking If desired, we can mask off specific channels that we do not wish to interpolate. Masking works by cloning the color and setting the specified channels as undefined (internally set to NaN ). When interpolating, if one color's channel has a NaN , the other color's channel will be used as the result, keeping that channel at a constant value. If both colors have a NaN for the same channel, then NaN will be returned. Magic Behind NaN There are times when NaN values can happen naturally, such as with achromatic colors with hues. To learn more, check out Undefined Handling/ NaN Handling . In the following example, we have a base color of lch ( 52 % 58 . 1 22 . 7 ) which we then interpolate with lch ( 56 % 49 . 1 257 . 1 ) . We then mask off the second color's channels except for hue . Applying this logic, we will end up with a range of colors that maintains the same lightness and chroma as the first color, but with different hues. We can see as we step through the colors that only the hue is interpolated. >>> i = Color . interpolate ( ... [ \"lch(52% 58.1 22.7)\" , Color ( \"lch(56% 49.1 257.1)\" ) . mask ([ 'lightness' , 'chroma' , 'alpha' ])], ... space = \"lch\" ... ) >>> [ i ( x / 10 ) . to_string () for x in range ( 10 )] ['lch(52 58.1 22.7)', 'lch(52 58.1 10.14)', 'lch(52 58.1 357.58)', 'lch(52 58.1 345.02)', 'lch(52 58.1 332.46)', 'lch(52 58.1 319.9)', 'lch(52 58.1 307.34)', 'lch(52 58.1 294.78)', 'lch(52 58.1 282.22)', 'lch(52 58.1 269.66)'] i = Color.interpolate( [\"lch(52% 58.1 22.7)\", Color(\"lch(56% 49.1 257.1)\").mask(['lightness', 'chroma', 'alpha'])], space=\"lch\" ) [i(x/10).to_string() for x in range(10)] Edit Share Run Cancel You can also create inverted masks. An inverted mask will mask all except the specified channel. >>> i = Color . interpolate ( ... [ \"lch(52% 58.1 22.7)\" , Color ( \"lch(56% 49.1 257.1)\" ) . mask ( 'hue' , invert = True )], ... space = \"lch\" ... ) >>> [ i ( x / 10 ) . to_string () for x in range ( 10 )] ['lch(52 58.1 22.7)', 'lch(52 58.1 10.14)', 'lch(52 58.1 357.58)', 'lch(52 58.1 345.02)', 'lch(52 58.1 332.46)', 'lch(52 58.1 319.9)', 'lch(52 58.1 307.34)', 'lch(52 58.1 294.78)', 'lch(52 58.1 282.22)', 'lch(52 58.1 269.66)'] i = Color.interpolate( [\"lch(52% 58.1 22.7)\", Color(\"lch(56% 49.1 257.1)\").mask('hue', invert=True)], space=\"lch\" ) [i(x/10).to_string() for x in range(10)] Edit Share Run Cancel Magic Behind Masking Masking actually clones the color, setting the specified channels to undefined values. To learn more about masking and undefined values, check out Undefined Handling . Easing Functions When interpolating, whether using linear interpolation or something like B-Spline interpolation, the transitioning between colors is always linear in time, even if the path to those colors is not. For example, if you are interpolating between 2 colors and you request a 0.5 point on that line, it will always be in the middle. This is because, no matter how crooked the path, the rate of change on that path is always linear. By default, ColorAide always uses linear transitions when interpolating, but there are times that a different, more dynamic transition may be desired. This can be achieved by using the progress parameter on any of the interpolation related functions provided by ColorAide. progress accepts an easing function that takes a single time input and returns a new time input. This allows for a user to augment the rate of change when transition from one color to another. Inputs are almost always between 0 - 1 unless extrapolate is enabled and the user has manually input a range beyond 0 - 1. ColorAide provides 5 basic easing functions out of the box along with cubic_bezier which is used to create all of the aforementioned easing function except linear , which simply returns what is given as an input. Create Your Own Cubic Bezier Easings Online: https://cubic-bezier.com More Common Cubic Bezier Easings The following were all acquired from from https://matthewlein.com/tools/ceaser.js . ease_in_quad = cubic_bezier ( 0.550 , 0.085 , 0.680 , 0.530 ) ease_in_cubic = cubic_bezier ( 0.550 , 0.055 , 0.675 , 0.190 ) ease_in_quart = cubic_bezier ( 0.895 , 0.030 , 0.685 , 0.220 ) ease_in_quint = cubic_bezier ( 0.755 , 0.050 , 0.855 , 0.060 ) ease_in_sine = cubic_bezier ( 0.470 , 0.000 , 0.745 , 0.715 ) ease_in_expo = cubic_bezier ( 0.950 , 0.050 , 0.795 , 0.035 ) ease_in_circ = cubic_bezier ( 0.600 , 0.040 , 0.980 , 0.335 ) ease_in_back = cubic_bezier ( 0.600 , - 0.280 , 0.735 , 0.045 ) ease_out_quad = cubic_bezier ( 0.250 , 0.460 , 0.450 , 0.940 ) ease_out_cubic = cubic_bezier ( 0.215 , 0.610 , 0.355 , 1.000 ) ease_out_quart = cubic_bezier ( 0.165 , 0.840 , 0.440 , 1.000 ) ease_out_quint = cubic_bezier ( 0.230 , 1.000 , 0.320 , 1.000 ) ease_out_sine = cubic_bezier ( 0.390 , 0.575 , 0.565 , 1.000 ) ease_out_expo = cubic_bezier ( 0.190 , 1.000 , 0.220 , 1.000 ) ease_out_circ = cubic_bezier ( 0.075 , 0.820 , 0.165 , 1.000 ) ease_out_back = cubic_bezier ( 0.175 , 0.885 , 0.320 , 1.275 ) ease_in_out_quad = cubic_bezier ( 0.455 , 0.030 , 0.515 , 0.955 ) ease_in_out_cubic = cubic_bezier ( 0.645 , 0.045 , 0.355 , 1.000 ) ease_in_out_quart = cubic_bezier ( 0.770 , 0.000 , 0.175 , 1.000 ) ease_in_out_quint = cubic_bezier ( 0.860 , 0.000 , 0.070 , 1.000 ) ease_in_out_sine = cubic_bezier ( 0.445 , 0.050 , 0.550 , 0.950 ) ease_in_out_expo = cubic_bezier ( 1.000 , 0.000 , 0.000 , 1.000 ) ease_in_out_circ = cubic_bezier ( 0.785 , 0.135 , 0.150 , 0.860 ) ease_in_out_back = cubic_bezier ( 0.680 , - 0.550 , 0.265 , 1.550 ) Linear Ease Ease In Ease Out Ease In/Out Cubic Bezier Here, we are using the default \"ease in\" and \"ease out\" easing functions provided by ColorAide. >>> from coloraide import ease_in , ease_out >>> Color . interpolate ( ... [ \"green\" , \"blue\" ], ... progress = ease_in ... ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9db9505b0> >>> Color . interpolate ( ... [ \"green\" , \"blue\" ] ... ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbf8c790> >>> Color . interpolate ( ... [ \"green\" , \"blue\" ], ... progress = ease_out ... ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbf2d990> from coloraide import ease_in, ease_out Color.interpolate( [\"green\", \"blue\"], progress=ease_in ) Color.interpolate( [\"green\", \"blue\"] ) Color.interpolate( [\"green\", \"blue\"], progress=ease_out ) Edit Share Run Cancel Additionally, easing functions can be injected inline which allows a user to control how easing is performed between specific sub-interpolations within piecewise interpolation. >>> Color . interpolate ([ \"red\" , \"green\" , ease_out , \"blue\" ]) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbba71c0> Color.interpolate([\"red\", \"green\", ease_out, \"blue\"]) Edit Share Run Cancel ColorAide even lets you apply easing functions to specific channels, though they can only be done this way for the entire operation. This can be done to one or more channels at a time. Below, we apply an exponential \"ease in\" to alpha while allowing all other channels to interpolate normally. >>> ease_in_expo = cubic_bezier ( 0.950 , 0.050 , 0.795 , 0.035 ) >>> Color . interpolate ( ... [ \"lch(50% 50 0)\" , \"lch(90% 50 260 / 0.5)\" ], ... progress = { ... 'alpha' : ease_in_expo ... } ... ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbe92c80> ease_in_expo = cubic_bezier(0.950, 0.050, 0.795, 0.035) Color.interpolate( [\"lch(50% 50 0)\", \"lch(90% 50 260 / 0.5)\"], progress={ 'alpha': ease_in_expo } ) Edit Share Run Cancel We can also set all the channels to an easing function via all and then override specific channels. In this case, we exponentially \"ease out\" on all channels except the red channel, which we then force to be linear. >>> ease_out_expo = cubic_bezier ( 0.190 , 1.000 , 0.220 , 1.000 ) >>> Color . interpolate ( ... [ \"color(srgb 0 1 1)\" , \"color(srgb 1 0 0)\" ], ... progress = { ... 'all' : ease_out_expo , ... 'r' : linear ... }, ... space = 'srgb' ... ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbbd30d0> ease_out_expo = cubic_bezier(0.190, 1.000, 0.220, 1.000) Color.interpolate( [\"color(srgb 0 1 1)\", \"color(srgb 1 0 0)\"], progress={ 'all': ease_out_expo, 'r': linear }, space='srgb' ) Edit Share Run Cancel Color Stops and Hints Color stops are the position where the transition to and from a color starts and ends. By default, color stops are evenly distributed between 0 - 1, but if desired, these color stops can be shifted. To specify color stops, simply wrap a color in a coloraide.stop object and specify the stop position. Stop positions will then cause the transition of the targeted color to be moved. >>> from coloraide import stop >>> Color . interpolate ([ 'orange' , 'purple' , 'green' ]) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbe92500> >>> Color . interpolate ([ 'orange' , stop ( 'purple' , 0.25 ), 'green' ]) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbf8dd80> from coloraide import stop Color.interpolate(['orange', 'purple', 'green']) Color.interpolate(['orange', stop('purple', 0.25), 'green']) Edit Share Run Cancel Color stops follow the rules as laid out in the CSS spec . CSS gradients also have a concept of \"hints\". Hints essentially define the midpoint between two colors. Instead of reinventing the wheel, and further complicating the interface, we've decided to just demonstrate color hints with easing functions. The logic comes directly from the CSS spec . Using the hint function, we can generate a midpoint easing method that moves the middle of the interpolation transition to the specified point which is relative to the two color stops it is between. >>> from coloraide import hint >>> Color . interpolate ([ 'orange' , 'purple' , 'green' ]) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbbd30d0> >>> Color . interpolate ([ 'orange' , hint ( 0.75 ), 'purple' , 'green' ]) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbbd1600> from coloraide import hint Color.interpolate(['orange', 'purple', 'green']) Color.interpolate(['orange', hint(0.75), 'purple', 'green']) Edit Share Run Cancel Mixing Interpolation Options Any options not consumed by mix will be passed to the underlying interpolation function. This includes options like hue , progress , etc. The mix function is built on top of the interpolate function and provides a simple, quick, and intuitive simple mixing of two colors. Just pass in a color to mix with the base color, and you'll get an equal mix of the two. >>> Color ( \"red\" ) . mix ( Color ( \"blue\" )) color(srgb 0.55044 0.32562 0.6365 / 1) Color(\"red\").mix(Color(\"blue\")) Edit Share Run Cancel By default, colors are mixed at 50%, but the percentage can be controlled. Here we mix the color blue into the color red at 20%. With blue at 20% and red at 80%, this gives us a more reddish color. >>> Color ( \"red\" ) . mix ( Color ( \"blue\" ), 0.2 ) color(srgb 0.82084 0.26522 0.37806 / 1) Color(\"red\").mix(Color(\"blue\"), 0.2) Edit Share Run Cancel As with all interpolation based functions, if needed, a different color space can be specified with the space parameter or even a different interpolation method via method . mix accepts all the same parameters used in interpolate , though concepts like stops and hints are not allowed with mixing. >>> Color ( \"red\" ) . mix ( Color ( \"blue\" ), space = \"hsl\" , method = 'bspline' ) color(srgb 1 0 1 / 1) Color(\"red\").mix(Color(\"blue\"), space=\"hsl\", method='bspline') Edit Share Run Cancel Mix can also accept a string and will create the color for us which is great if we don't need to work with the second color afterwards. >>> Color ( \"red\" ) . mix ( \"blue\" , 0.2 ) color(srgb 0.82084 0.26522 0.37806 / 1) Color(\"red\").mix(\"blue\", 0.2) Edit Share Run Cancel Mixing will always return a new color unless in_place is set True . Steps Interpolation Options Any options not consumed by mix will be passed to the underlying interpolation function. This includes options like hue , progress , etc. The steps method provides an intuitive interface to create lists of discrete colors. Like mixing, it is also built on interpolate . Just provide two colors, and specify how many steps are wanted. >>> Color . steps ([ \"red\" , \"blue\" ], steps = 10 ) [color(srgb 1 0 0 / 1), color(srgb 0.90045 0.20791 0.27521 / 1), color(srgb 0.80092 0.27537 0.40045 / 1), color(srgb 0.70118 0.31007 0.50198 / 1), color(srgb 0.60092 0.32459 0.59316 / 1), color(srgb 0.49961 0.32272 0.67882 / 1), color(srgb 0.39631 0.30469 0.76127 / 1), color(srgb 0.28903 0.26729 0.84181 / 1), color(srgb 0.17188 0.19896 0.92122 / 1), color(srgb 0 0 1 / 1)] Color.steps([\"red\", \"blue\"], steps=10) Edit Share Run Cancel If desired, multiple colors can be provided, and steps will be returned for all the interpolated segments. When interpolating multiple colors, piecewise interpolation is used (which is covered in more detail later). >>> Color . steps ([ \"red\" , \"orange\" , \"yellow\" , \"green\" ], steps = 10 ) [color(srgb 1 0 0 / 1), color(srgb 1.01 0.34365 0.0003 / 1), color(srgb 1.0105 0.50766 0.00032 / 1), color(srgb 1 0.64706 0 / 1), color(srgb 1.009 0.76646 0.00013 / 1), color(srgb 1.0093 0.88367 0.00014 / 1), color(srgb 1 1 0 / 1), color(srgb 0.71561 0.83059 0.00014 / 1), color(srgb 0.42921 0.66463 0.00011 / 1), color(srgb 0 0.50196 0 / 1)] Color.steps([\"red\", \"orange\", \"yellow\", \"green\"], steps=10) Edit Share Run Cancel Steps can also be configured to return colors based on a maximum Delta E distance. This means you can ensure the distance between all colors is no greater than a certain value. In this example, we specify the color color ( display-p3 0 1 0 ) and interpolate steps between red . The result gives us an array of colors, where the distance between any two colors should be no greater than the Delta E result of 10. >>> Color . steps ( ... [ Color ( \"display-p3\" , [ 0 , 1 , 0 ]), \"red\" ], ... space = \"lch\" , ... out_space = \"srgb\" , ... max_delta_e = 10 ... ) [color(srgb -0.5116 1.0183 -0.31067 / 1), color(srgb -0.4504 0.99903 -0.32673 / 1), color(srgb -0.37655 0.97943 -0.33694 / 1), color(srgb -0.27847 0.95946 -0.34286 / 1), color(srgb -0.09291 0.9391 -0.34554 / 1), color(srgb 0.23528 0.91833 -0.34574 / 1), color(srgb 0.34809 0.89715 -0.34401 / 1), color(srgb 0.42823 0.87552 -0.34098 / 1), color(srgb 0.49308 0.85343 -0.33745 / 1), color(srgb 0.54849 0.83088 -0.33349 / 1), color(srgb 0.59727 0.80784 -0.32909 / 1), color(srgb 0.64097 0.7843 -0.32423 / 1), color(srgb 0.6806 0.76025 -0.3189 / 1), color(srgb 0.71679 0.73568 -0.3131 / 1), color(srgb 0.74999 0.71057 -0.30681 / 1), color(srgb 0.78053 0.6849 -0.30002 / 1), color(srgb 0.80865 0.65865 -0.29271 / 1), color(srgb 0.83451 0.6318 -0.28486 / 1), color(srgb 0.85826 0.60433 -0.27644 / 1), color(srgb 0.87999 0.57619 -0.26744 / 1), color(srgb 0.89978 0.54736 -0.25782 / 1), color(srgb 0.9177 0.51777 -0.24752 / 1), color(srgb 0.9338 0.48735 -0.2365 / 1), color(srgb 0.9481 0.456 -0.22467 / 1), color(srgb 0.96064 0.4236 -0.21195 / 1), color(srgb 0.97145 0.38994 -0.19821 / 1), color(srgb 0.98055 0.35476 -0.18326 / 1), color(srgb 0.98796 0.31761 -0.16684 / 1), color(srgb 0.99369 0.27779 -0.14854 / 1), color(srgb 0.99777 0.23405 -0.12767 / 1), color(srgb 1.0002 0.18378 -0.10158 / 1), color(srgb 1.0009 0.11978 -0.06417 / 1), color(srgb 1 0 0 / 1)] Color.steps( [Color(\"display-p3\", [0, 1, 0]), \"red\"], space=\"lch\", out_space=\"srgb\", max_delta_e=10 ) Edit Share Run Cancel max_steps can be used to limit the results of max_delta_e in case result balloons to an unexpected size. Obviously, this affects the Delta E between the colors inversely. It should be noted that steps are injected equally between every color when satisfying a max Delta E limit in order to avoid shifting the midpoint. In some cases, in order to satisfy both the max_delta_e and the max_steps requirement, the number of steps may even be clipped such that they are less than the max_steps limit. max_steps is set to 1000 by default, but can be set to None if no limit is desired. >>> Color . steps ( ... [ Color ( \"display-p3\" , [ 0 , 1 , 0 ]), \"red\" ], ... space = \"lch\" , ... out_space = \"srgb\" , ... max_delta_e = 10 , ... max_steps = 10 ... ) [color(srgb -0.5116 1.0183 -0.31067 / 1), color(srgb -0.09291 0.9391 -0.34554 / 1), color(srgb 0.49308 0.85343 -0.33745 / 1), color(srgb 0.6806 0.76025 -0.3189 / 1), color(srgb 0.80865 0.65865 -0.29271 / 1), color(srgb 0.89978 0.54736 -0.25782 / 1), color(srgb 0.96064 0.4236 -0.21195 / 1), color(srgb 0.99369 0.27779 -0.14854 / 1), color(srgb 1 0 0 / 1)] Color.steps( [Color(\"display-p3\", [0, 1, 0]), \"red\"], space=\"lch\", out_space=\"srgb\", max_delta_e=10, max_steps=10 ) Edit Share Run Cancel When specifying a max_delta_e , steps will function as a minimum required steps and will push the delta even smaller if the required steps is greater than the calculated steps via the maximum Delta E limit. >>> Color . steps ( ... [ Color ( \"display-p3\" , [ 0 , 1 , 0 ]), \"red\" ], ... space = \"lch\" , ... out_space = \"srgb\" , ... max_delta_e = 10 , ... steps = 50 ... ) [color(srgb -0.5116 1.0183 -0.31067 / 1), color(srgb -0.47276 1.0057 -0.32192 / 1), color(srgb -0.42946 0.99307 -0.33039 / 1), color(srgb -0.37992 0.98024 -0.33661 / 1), color(srgb -0.32082 0.96725 -0.341 / 1), color(srgb -0.24447 0.9541 -0.34385 / 1), color(srgb -0.1198 0.94078 -0.34542 / 1), color(srgb 0.15996 0.92729 -0.34592 / 1), color(srgb 0.26558 0.91362 -0.3455 / 1), color(srgb 0.33665 0.89976 -0.34431 / 1), color(srgb 0.3931 0.88572 -0.34248 / 1), color(srgb 0.44104 0.8715 -0.34036 / 1), color(srgb 0.48324 0.85707 -0.33806 / 1), color(srgb 0.52118 0.84244 -0.33557 / 1), color(srgb 0.55582 0.82761 -0.33289 / 1), color(srgb 0.58776 0.81258 -0.33002 / 1), color(srgb 0.61745 0.79733 -0.32696 / 1), color(srgb 0.64519 0.78187 -0.32371 / 1), color(srgb 0.67123 0.76619 -0.32025 / 1), color(srgb 0.69575 0.75029 -0.31659 / 1), color(srgb 0.7189 0.73416 -0.31273 / 1), color(srgb 0.74079 0.7178 -0.30866 / 1), color(srgb 0.76151 0.7012 -0.30437 / 1), color(srgb 0.78113 0.68437 -0.29987 / 1), color(srgb 0.79972 0.66729 -0.29515 / 1), color(srgb 0.81733 0.64995 -0.2902 / 1), color(srgb 0.834 0.63236 -0.28502 / 1), color(srgb 0.84977 0.6145 -0.2796 / 1), color(srgb 0.86467 0.59636 -0.27393 / 1), color(srgb 0.87872 0.57794 -0.26801 / 1), color(srgb 0.89194 0.55922 -0.26182 / 1), color(srgb 0.90434 0.54018 -0.25536 / 1), color(srgb 0.91596 0.52082 -0.2486 / 1), color(srgb 0.92679 0.50111 -0.24154 / 1), color(srgb 0.93686 0.48103 -0.23415 / 1), color(srgb 0.94616 0.46054 -0.22641 / 1), color(srgb 0.95471 0.43961 -0.2183 / 1), color(srgb 0.96252 0.41819 -0.20979 / 1), color(srgb 0.96959 0.39623 -0.20082 / 1), color(srgb 0.97593 0.37364 -0.19136 / 1), color(srgb 0.98155 0.35032 -0.18134 / 1), color(srgb 0.98644 0.32615 -0.17067 / 1), color(srgb 0.99062 0.30093 -0.15926 / 1), color(srgb 0.99409 0.27439 -0.14694 / 1), color(srgb 0.99685 0.24615 -0.13353 / 1), color(srgb 0.99891 0.21556 -0.11841 / 1), color(srgb 1.0002 0.18152 -0.10034 / 1), color(srgb 1.0009 0.14177 -0.07755 / 1), color(srgb 1.0008 0.09013 -0.04535 / 1), color(srgb 1 0 0 / 1)] Color.steps( [Color(\"display-p3\", [0, 1, 0]), \"red\"], space=\"lch\", out_space=\"srgb\", max_delta_e=10, steps=50 ) Edit Share Run Cancel steps uses the color class's default \u2206E method to calculate max \u2206E, the current default \u2206E being \u2206E * ab . While using something like \u2206E * 00 is far more accurate, it is a much more expensive operation. If desired, the class's default \u2206E can be changed via subclassing the color object and and changing DELTA_E class variable or by manually specifying the method via the delta_e parameter. \u2206E * ab . \u2206E * 00 >>> Color . steps ( ... [ Color ( \"display-p3\" , [ 0 , 1 , 0 ]), \"red\" ], ... space = \"lch\" , ... out_space = \"srgb\" , ... max_delta_e = 10 , ... delta_e = \"76\" ... ) [color(srgb -0.5116 1.0183 -0.31067 / 1), color(srgb -0.4504 0.99903 -0.32673 / 1), color(srgb -0.37655 0.97943 -0.33694 / 1), color(srgb -0.27847 0.95946 -0.34286 / 1), color(srgb -0.09291 0.9391 -0.34554 / 1), color(srgb 0.23528 0.91833 -0.34574 / 1), color(srgb 0.34809 0.89715 -0.34401 / 1), color(srgb 0.42823 0.87552 -0.34098 / 1), color(srgb 0.49308 0.85343 -0.33745 / 1), color(srgb 0.54849 0.83088 -0.33349 / 1), color(srgb 0.59727 0.80784 -0.32909 / 1), color(srgb 0.64097 0.7843 -0.32423 / 1), color(srgb 0.6806 0.76025 -0.3189 / 1), color(srgb 0.71679 0.73568 -0.3131 / 1), color(srgb 0.74999 0.71057 -0.30681 / 1), color(srgb 0.78053 0.6849 -0.30002 / 1), color(srgb 0.80865 0.65865 -0.29271 / 1), color(srgb 0.83451 0.6318 -0.28486 / 1), color(srgb 0.85826 0.60433 -0.27644 / 1), color(srgb 0.87999 0.57619 -0.26744 / 1), color(srgb 0.89978 0.54736 -0.25782 / 1), color(srgb 0.9177 0.51777 -0.24752 / 1), color(srgb 0.9338 0.48735 -0.2365 / 1), color(srgb 0.9481 0.456 -0.22467 / 1), color(srgb 0.96064 0.4236 -0.21195 / 1), color(srgb 0.97145 0.38994 -0.19821 / 1), color(srgb 0.98055 0.35476 -0.18326 / 1), color(srgb 0.98796 0.31761 -0.16684 / 1), color(srgb 0.99369 0.27779 -0.14854 / 1), color(srgb 0.99777 0.23405 -0.12767 / 1), color(srgb 1.0002 0.18378 -0.10158 / 1), color(srgb 1.0009 0.11978 -0.06417 / 1), color(srgb 1 0 0 / 1)] Color.steps( [Color(\"display-p3\", [0, 1, 0]), \"red\"], space=\"lch\", out_space=\"srgb\", max_delta_e=10, delta_e=\"76\" ) Edit Share Run Cancel >>> Color . steps ( ... [ Color ( \"display-p3\" , [ 0 , 1 , 0 ]), \"red\" ], ... space = \"lch\" , ... out_space = \"srgb\" , ... max_delta_e = 10 , ... delta_e = \"2000\" ... ) [color(srgb -0.5116 1.0183 -0.31067 / 1), color(srgb -0.37655 0.97943 -0.33694 / 1), color(srgb -0.09291 0.9391 -0.34554 / 1), color(srgb 0.34809 0.89715 -0.34401 / 1), color(srgb 0.49308 0.85343 -0.33745 / 1), color(srgb 0.59727 0.80784 -0.32909 / 1), color(srgb 0.6806 0.76025 -0.3189 / 1), color(srgb 0.74999 0.71057 -0.30681 / 1), color(srgb 0.80865 0.65865 -0.29271 / 1), color(srgb 0.85826 0.60433 -0.27644 / 1), color(srgb 0.89978 0.54736 -0.25782 / 1), color(srgb 0.9338 0.48735 -0.2365 / 1), color(srgb 0.96064 0.4236 -0.21195 / 1), color(srgb 0.98055 0.35476 -0.18326 / 1), color(srgb 0.99369 0.27779 -0.14854 / 1), color(srgb 1.0002 0.18378 -0.10158 / 1), color(srgb 1 0 0 / 1)] Color.steps( [Color(\"display-p3\", [0, 1, 0]), \"red\"], space=\"lch\", out_space=\"srgb\", max_delta_e=10, delta_e=\"2000\" ) Edit Share Run Cancel And much like interpolate , we can use stops and hints and any of the other supported interpolate features as well. >>> Color . steps ([ 'orange' , stop ( 'purple' , 0.25 ), 'green' ], method = 'bspline' , steps = 10 ) [color(srgb 1 0.64706 0 / 1), color(srgb 0.77185 0.43332 0.39421 / 1), color(srgb 0.58315 0.30002 0.43861 / 1), color(srgb 0.50763 0.29361 0.42001 / 1), color(srgb 0.46179 0.31175 0.39515 / 1), color(srgb 0.41587 0.34125 0.36122 / 1), color(srgb 0.36562 0.37769 0.31743 / 1), color(srgb 0.30451 0.41805 0.2607 / 1), color(srgb 0.21829 0.4601 0.18124 / 1), color(srgb 0 0.50196 0 / 1)] Color.steps(['orange', stop('purple', 0.25), 'green'], method='bspline', steps=10) Edit Share Run Cancel Extrapolation By default, ColorAide clamps the entire progress of an interpolation to always be between 0 and 1. In most cases, this is more what most user expects and why this is the default. It should be noted that this does not affect easing functions, as the clamping is done prior to any easing function calls. If it is desired to extrapolate past 0 and 1, extrapolate can set to True on all interpolation methods. >>> Color ( 'red' ) . mix ( 'blue' , 0.5 ) color(srgb 0.55044 0.32562 0.6365 / 1) >>> Color ( 'red' ) . mix ( 'blue' , - 0.5 , extrapolate = True ) color(srgb 1.4512 -0.57257 -0.46028 / 1) Color('red').mix('blue', 0.5) Color('red').mix('blue', -0.5, extrapolate=True) Edit Share Run Cancel As a larger example, we can purposely interpolate over a range with values beyond 0 and 1. Here we extended the range to -0.5 and 1.5. >>> offset , factor = 0.25 , 1.5 >>> i = Color . interpolate ([ 'red' , 'blue' ]) >>> HtmlGradient ([ i (( r * factor / 100 ) - offset ) for r in range ( 101 )]) [color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 0.99552 0.02344 0.03318 / 1), color(srgb 0.98207 0.07954 0.10229 / 1), color(srgb 0.96863 0.11367 0.14449 / 1), color(srgb 0.95519 0.1393 0.17749 / 1), color(srgb 0.94176 0.16017 0.20551 / 1), color(srgb 0.92832 0.17789 0.23032 / 1), color(srgb 0.91488 0.19332 0.25287 / 1), color(srgb 0.90145 0.20696 0.27372 / 1), color(srgb 0.88802 0.21916 0.29325 / 1), color(srgb 0.87458 0.23017 0.31171 / 1), color(srgb 0.86115 0.24016 0.3293 / 1), color(srgb 0.84771 0.24927 0.34615 / 1), color(srgb 0.83427 0.25759 0.36237 / 1), color(srgb 0.82084 0.26522 0.37806 / 1), color(srgb 0.80739 0.27221 0.39328 / 1), color(srgb 0.79395 0.27862 0.40808 / 1), color(srgb 0.7805 0.2845 0.42252 / 1), color(srgb 0.76705 0.28989 0.43664 / 1), color(srgb 0.75359 0.29482 0.45047 / 1), color(srgb 0.74012 0.29931 0.46403 / 1), color(srgb 0.72665 0.3034 0.47736 / 1), color(srgb 0.71317 0.30709 0.49048 / 1), color(srgb 0.69968 0.31042 0.5034 / 1), color(srgb 0.68619 0.31339 0.51615 / 1), color(srgb 0.67268 0.31601 0.52873 / 1), color(srgb 0.65916 0.3183 0.54117 / 1), color(srgb 0.64563 0.32027 0.55346 / 1), color(srgb 0.63208 0.32193 0.56564 / 1), color(srgb 0.61852 0.32328 0.57769 / 1), color(srgb 0.60495 0.32434 0.58964 / 1), color(srgb 0.59135 0.32509 0.60149 / 1), color(srgb 0.57774 0.32556 0.61324 / 1), color(srgb 0.5641 0.32573 0.62491 / 1), color(srgb 0.55044 0.32562 0.6365 / 1), color(srgb 0.53676 0.32522 0.64802 / 1), color(srgb 0.52304 0.32454 0.65946 / 1), color(srgb 0.5093 0.32357 0.67085 / 1), color(srgb 0.49552 0.32231 0.68217 / 1), color(srgb 0.48171 0.32077 0.69343 / 1), color(srgb 0.46786 0.31892 0.70465 / 1), color(srgb 0.45397 0.31678 0.71582 / 1), color(srgb 0.44003 0.31434 0.72694 / 1), color(srgb 0.42604 0.31158 0.73801 / 1), color(srgb 0.41199 0.3085 0.74905 / 1), color(srgb 0.39788 0.30509 0.76005 / 1), color(srgb 0.38371 0.30134 0.77102 / 1), color(srgb 0.36946 0.29723 0.78196 / 1), color(srgb 0.35512 0.29275 0.79286 / 1), color(srgb 0.3407 0.28788 0.80374 / 1), color(srgb 0.32617 0.2826 0.81459 / 1), color(srgb 0.31152 0.27688 0.82541 / 1), color(srgb 0.29675 0.2707 0.83622 / 1), color(srgb 0.28182 0.26401 0.847 / 1), color(srgb 0.26673 0.25677 0.85776 / 1), color(srgb 0.25145 0.24894 0.86851 / 1), color(srgb 0.23593 0.24046 0.87924 / 1), color(srgb 0.22015 0.23123 0.88995 / 1), color(srgb 0.20405 0.22117 0.90065 / 1), color(srgb 0.18756 0.21016 0.91134 / 1), color(srgb 0.1706 0.19801 0.92201 / 1), color(srgb 0.15303 0.18452 0.93267 / 1), color(srgb 0.13466 0.16934 0.94332 / 1), color(srgb 0.1152 0.15199 0.95397 / 1), color(srgb 0.09414 0.13166 0.9646 / 1), color(srgb 0.07051 0.10682 0.97523 / 1), color(srgb 0.04194 0.0739 0.98585 / 1), color(srgb 0.00985 0.02108 0.99646 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1)] >>> i = Color . interpolate ([ 'red' , 'blue' ], extrapolate = True ) >>> HtmlGradient ([ i (( r * factor / 100 ) - offset ) for r in range ( 101 )]) [color(srgb 1.2247 -0.37634 -0.36051 / 1), color(srgb 1.2112 -0.36299 -0.35175 / 1), color(srgb 1.1977 -0.34935 -0.34251 / 1), color(srgb 1.1842 -0.33536 -0.33272 / 1), color(srgb 1.1706 -0.32099 -0.32234 / 1), color(srgb 1.1571 -0.30619 -0.31127 / 1), color(srgb 1.1436 -0.29088 -0.29944 / 1), color(srgb 1.1302 -0.27498 -0.28673 / 1), color(srgb 1.1167 -0.25837 -0.27301 / 1), color(srgb 1.1032 -0.24093 -0.25808 / 1), color(srgb 1.0897 -0.22244 -0.2417 / 1), color(srgb 1.0763 -0.20264 -0.22353 / 1), color(srgb 1.0628 -0.18109 -0.20304 / 1), color(srgb 1.0493 -0.15714 -0.17943 / 1), color(srgb 1.0359 -0.12955 -0.15122 / 1), color(srgb 1.0224 -0.09572 -0.11531 / 1), color(srgb 1.009 -0.04719 -0.06178 / 1), color(srgb 0.99552 0.02344 0.03318 / 1), color(srgb 0.98207 0.07954 0.10229 / 1), color(srgb 0.96863 0.11367 0.14449 / 1), color(srgb 0.95519 0.1393 0.17749 / 1), color(srgb 0.94176 0.16017 0.20551 / 1), color(srgb 0.92832 0.17789 0.23032 / 1), color(srgb 0.91488 0.19332 0.25287 / 1), color(srgb 0.90145 0.20696 0.27372 / 1), color(srgb 0.88802 0.21916 0.29325 / 1), color(srgb 0.87458 0.23017 0.31171 / 1), color(srgb 0.86115 0.24016 0.3293 / 1), color(srgb 0.84771 0.24927 0.34615 / 1), color(srgb 0.83427 0.25759 0.36237 / 1), color(srgb 0.82084 0.26522 0.37806 / 1), color(srgb 0.80739 0.27221 0.39328 / 1), color(srgb 0.79395 0.27862 0.40808 / 1), color(srgb 0.7805 0.2845 0.42252 / 1), color(srgb 0.76705 0.28989 0.43664 / 1), color(srgb 0.75359 0.29482 0.45047 / 1), color(srgb 0.74012 0.29931 0.46403 / 1), color(srgb 0.72665 0.3034 0.47736 / 1), color(srgb 0.71317 0.30709 0.49048 / 1), color(srgb 0.69968 0.31042 0.5034 / 1), color(srgb 0.68619 0.31339 0.51615 / 1), color(srgb 0.67268 0.31601 0.52873 / 1), color(srgb 0.65916 0.3183 0.54117 / 1), color(srgb 0.64563 0.32027 0.55346 / 1), color(srgb 0.63208 0.32193 0.56564 / 1), color(srgb 0.61852 0.32328 0.57769 / 1), color(srgb 0.60495 0.32434 0.58964 / 1), color(srgb 0.59135 0.32509 0.60149 / 1), color(srgb 0.57774 0.32556 0.61324 / 1), color(srgb 0.5641 0.32573 0.62491 / 1), color(srgb 0.55044 0.32562 0.6365 / 1), color(srgb 0.53676 0.32522 0.64802 / 1), color(srgb 0.52304 0.32454 0.65946 / 1), color(srgb 0.5093 0.32357 0.67085 / 1), color(srgb 0.49552 0.32231 0.68217 / 1), color(srgb 0.48171 0.32077 0.69343 / 1), color(srgb 0.46786 0.31892 0.70465 / 1), color(srgb 0.45397 0.31678 0.71582 / 1), color(srgb 0.44003 0.31434 0.72694 / 1), color(srgb 0.42604 0.31158 0.73801 / 1), color(srgb 0.41199 0.3085 0.74905 / 1), color(srgb 0.39788 0.30509 0.76005 / 1), color(srgb 0.38371 0.30134 0.77102 / 1), color(srgb 0.36946 0.29723 0.78196 / 1), color(srgb 0.35512 0.29275 0.79286 / 1), color(srgb 0.3407 0.28788 0.80374 / 1), color(srgb 0.32617 0.2826 0.81459 / 1), color(srgb 0.31152 0.27688 0.82541 / 1), color(srgb 0.29675 0.2707 0.83622 / 1), color(srgb 0.28182 0.26401 0.847 / 1), color(srgb 0.26673 0.25677 0.85776 / 1), color(srgb 0.25145 0.24894 0.86851 / 1), color(srgb 0.23593 0.24046 0.87924 / 1), color(srgb 0.22015 0.23123 0.88995 / 1), color(srgb 0.20405 0.22117 0.90065 / 1), color(srgb 0.18756 0.21016 0.91134 / 1), color(srgb 0.1706 0.19801 0.92201 / 1), color(srgb 0.15303 0.18452 0.93267 / 1), color(srgb 0.13466 0.16934 0.94332 / 1), color(srgb 0.1152 0.15199 0.95397 / 1), color(srgb 0.09414 0.13166 0.9646 / 1), color(srgb 0.07051 0.10682 0.97523 / 1), color(srgb 0.04194 0.0739 0.98585 / 1), color(srgb 0.00985 0.02108 0.99646 / 1), color(srgb -0.01842 -0.04265 1.0071 / 1), color(srgb -0.04278 -0.08883 1.0177 / 1), color(srgb -0.06021 -0.12088 1.0283 / 1), color(srgb -0.07215 -0.1469 1.0389 / 1), color(srgb -0.0805 -0.1694 1.0495 / 1), color(srgb -0.08615 -0.18955 1.0601 / 1), color(srgb -0.08956 -0.20799 1.0707 / 1), color(srgb -0.09096 -0.22514 1.0812 / 1), color(srgb -0.09047 -0.24126 1.0918 / 1), color(srgb -0.08809 -0.25653 1.1024 / 1), color(srgb -0.0837 -0.27111 1.113 / 1), color(srgb -0.07705 -0.28509 1.1236 / 1), color(srgb -0.06766 -0.29855 1.1342 / 1), color(srgb -0.05456 -0.31157 1.1448 / 1), color(srgb -0.0356 -0.32419 1.1554 / 1), color(srgb -0.01177 -0.33646 1.166 / 1), color(srgb 0.01515 -0.34842 1.1766 / 1)] offset, factor = 0.25, 1.5 i = Color.interpolate(['red', 'blue']) HtmlGradient([i((r * factor / 100) - offset) for r in range(101)]) i = Color.interpolate(['red', 'blue'], extrapolate=True) HtmlGradient([i((r * factor / 100) - offset) for r in range(101)]) Edit Share Run Cancel Lastly, it is important to note that this affects stops as well, mainly stops applied to interpolation endpoints. When an endpoint is moved inwards via a color stop, the end range of the interpolation is clamped, extending the star and end color. But when extrapolation is enabled, a color stop on an endpoint essentially moves the start and end interpolation. And since there are no other colors on either end to interpolate with, extrapolation occurs. >>> Color . interpolate ([ stop ( 'red' , 0.25 ), stop ( 'blue' , 0.75 )]) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbf8de10> >>> Color . interpolate ([ stop ( 'red' , 0.25 ), stop ( 'blue' , 0.75 )], extrapolate = True ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9db97c5e0> Color.interpolate([stop('red', 0.25), stop('blue', 0.75)]) Color.interpolate([stop('red', 0.25), stop('blue', 0.75)], extrapolate=True) Edit Share Run Cancel Undefined/ NaN Handling Color spaces that have hue coordinates often have rules about when the hue is considered relevant. For instance, in the HSL color space, if saturation is zero, the hue is essentially powerless. This is because the color is \"without color\" or achromatic; therefore, the hue can have no affect on the actual color. ColorAide will generally respect the values a user provides, so if an achromatic HSL color is given a hue of 270 degrees, ColorAide will accept it, but the hue will not affect the color in any meaningful way. During conversions, such context is lost, and if an achromatic color is converted to the color space like HSL, the resultant color will have a hue that is noted as undefined. This is simply because there is no good hue for achromatic colors as they play no part in the color. Any hue is actually incorrect as achromatic colors have no real hue. Instead, colors will be returned with a value that represents that the hue is missing or undefined, or maybe better worded, could not be defined. Many libraries, like d3-color , chroma.js , and color.js , represent null hues with NaN (not a number). This is usually done to make color interpolation easier. Some, like d3-color, are a bit more liberal with NaN and will target special cases that are above and beyond the normal rules to help ensure good interpolation. For instance, they not only mark hue undefined on HSL colors when saturation is zero, but they'll mark saturation as NaN when lightness indicates \"black\" or \"white\". ColorAide also uses NaN , or in Python float ( 'nan' ) , to represent undefined channels. In certain situations, when a hue is deemed undefined, the hue value will be set to coloraide.NaN , which is just a constant containing float ( 'nan' ) . When performing linear interpolation, where only two color's channels are ever being evaluated together at a given time, if one color's channel has a NaN , the other color's channel will be used as the result. If both colors have a NaN for the same channel, then NaN will be returned. NaN Handling in B-Spline Interpolation NaN handling is a bit different for B-spline interpolation. Linear only evaluates colors at a given time, while B-spline uses a sliding window on four colors. Because the context is much wider and more complicated, NaN values will often get contexts from both side and create a new \"control point\" for the curve using linear interpolation. So the curve will use data from the defined points while ignoring the point that is undefined. Notice that in this example, because white's saturation is zero, the hue is undefined. Because the hue is undefined, when the color is mixed with a second color ( green ), the hue of the second color is used. >>> color = Color ( 'white' ) . convert ( 'hsl' ) >>> color [: - 1 ] [nan, 0.0, 1.0] >>> color2 = Color ( 'green' ) . convert ( 'hsl' ) >>> color2 [: - 1 ] [120.0, 1.0, 0.25098039215686274] >>> color . mix ( color2 , space = \"hsl\" ) color(--hsl 120 0.5 0.62549 / 1) color = Color('white').convert('hsl') color[:-1] color2 = Color('green').convert('hsl') color2[:-1] color.mix(color2, space=\"hsl\") Edit Share Run Cancel But if we manually set the hue to 0 instead of NaN , we can see that the mixing goes quite differently. >>> color = Color ( 'white' ) . convert ( 'hsl' ) . set ( 'hue' , 0 ) >>> color [: - 1 ] [0.0, 0.0, 1.0] >>> color2 = Color ( 'green' ) . convert ( 'hsl' ) >>> color2 [: - 1 ] [120.0, 1.0, 0.25098039215686274] >>> color . mix ( color2 , space = \"hsl\" ) color(--hsl 60 0.5 0.62549 / 1) color = Color('white').convert('hsl').set('hue', 0) color[:-1] color2 = Color('green').convert('hsl') color2[:-1] color.mix(color2, space=\"hsl\") Edit Share Run Cancel Technically, any channel can be set to NaN . And there are various ways to do this. The Color Manipulation documentation goes into the details of how these Nan values naturally occur and the various ways a user and manipulate them. .info-container {display: inline-block;}","title":"Color Interpolation"},{"location":"interpolation/#color-interpolation","text":"Interpolation is a type of estimation that finds new data points based on the range of a discrete set of known data points. When used in the context of color, it is finding one or more colors that reside between any two given colors. This is often used to simulate mixing colors, creating gradients, or even create color palettes. ColorAide provides a number of useful utilities based on interpolation.","title":"Color Interpolation"},{"location":"interpolation/#linear-interpolation","text":"One of the most common, and easiest ways to interpolate data between two points is to use linear interpolation. An easy way of thinking about this concept is to imagine drawing a straight line that connects two colors within a color space. We could then navigate up and down that line and return colors at different points to simulate mixing colors at various percentages or return the whole range and create a gradient. To further illustrate this point, the example below shows a slice of the Oklab color space at a lightness of 70%. On this 2D plane, we select two colors: oklab ( 0 . 7 0 . 15 0 . 1 ) and oklab ( 0 . 7 - 0 . 03 - 0 . 12 ) . We then connect these two colors with a line. We can then select any point on the line to simulate the mixing of these colors. 0% would yield the first color, 100% would yield the second color, and 50% would yield a new color: oklab ( 0 . 7 0 . 06 - 0 . 01 ) . Interpolation performed at 50% The interpolate method allows a user to create a linear interpolation function using two or more colors. A returned interpolation function accepts an input between 0 - 1 and will cause a new color between the specified colors to be returned. By default, colors are interpolated in the perceptually uniform Oklab color space, though any supported color space can be used instead. This also applies to all methods that use interpolation, such as steps , mix , etc. As an example, below we create an interpolation between rebeccapurple and lch ( 85 % 100 85 ) . We then step through values of 0.1 , 0.2 , 0.3 , etc. This returns colors at various positions on the line that connects the two colors, 0 returning rebeccapurple and 1 returning lch ( 85 % 100 85 ) . >>> i = Color . interpolate ([ \"rebeccapurple\" , \"lch(85% 100 85)\" ], space = 'lch' ) >>> [ i ( x / 10 ) . to_string () for x in range ( 10 + 1 )] ['rgb(102 51 153)', 'rgb(142.02 45.341 154.32)', 'rgb(178.57 36.395 149.51)', 'rgb(211.1 28.455 139.17)', 'rgb(238.6 32.963 124.25)', 'rgb(255 53.081 105.76)', 'rgb(255 91.068 90.053)', 'rgb(255 123.62 78.434)', 'rgb(255 152.43 69.779)', 'rgb(255 178.23 51.263)', 'rgb(255 204.41 0)'] i = Color.interpolate([\"rebeccapurple\", \"lch(85% 100 85)\"], space='lch') [i(x / 10).to_string() for x in range(10 + 1)] Edit Share Run Cancel If we create enough steps, we can create a gradient. >>> Color . interpolate ( ... [ \"rebeccapurple\" , \"lch(85% 100 85)\" ], ... space = 'lch' ... ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbba6c50> Color.interpolate( [\"rebeccapurple\", \"lch(85% 100 85)\"], space='lch' ) Edit Share Run Cancel Interpolating in Constrained Gamuts Some color spaces, like sRGB, have a limited gamut, but have extended ranges that allow them to represent out of gamut colors in a sane way. Other models, like HSL, HSV, and HWB have the same limited gamut, but have no sane way to represent out of gamut colors. If colors are requested to be interpolated and are too big to be interpolated in the requested color space and cannot properly be represented in that space or model, the colors will be gamut mapped before interpolation.","title":"Linear Interpolation"},{"location":"interpolation/#piecewise-interpolation","text":"Piecewise interpolation takes the idea of linear interpolation, and then applies it to multiple colors. As drawing a straight line through a series of points greater than two can be problematic to achieve, piecewise interpolation creates straight lines between each color. When the interpolate method receives more that two colors, the interpolation will utilize piecewise interpolation and interpolation will be broken up between each pair of colors. The function, just like when interpolating between two colors, still takes a range of 0 - 1, only it will now apply to the entire range that spans all the colors. Piecewise interpolation is simply a method of breaking up a data set and performing interpolation over small segments. >>> Color . interpolate ([ 'black' , 'red' , 'white' ]) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbf2f160> Color.interpolate(['black', 'red', 'white']) Edit Share Run Cancel This approach generally works well, but since the placement of colors may not be in a straight line, you will often have pivot points and the transition may not be quite as smooth.","title":"Piecewise Interpolation"},{"location":"interpolation/#cubic-spline-interpolation","text":"Linear interpolation is nice because it is easy to implement, and due to its straight forward nature, pretty fast. With that said, it doesn't always have the smoothest transitions. It turns out that there are other piecewise ways to interpolate that can yield smoother results. Inspired by some efforts seen on the web and in the great JavaScript library Culori , ColorAide implements a number of spline based interpolation methods. ColorAide implements 3 piecewise, cubic splines.","title":"Cubic Spline Interpolation"},{"location":"interpolation/#b-spline","text":"B-spline is a piecewise spline similar to Bezier curves. It utilizes \"control points\" that help shape the interpolation path through two or more colors. Like Bezier Curves, the path does not pass through all the colors, but it is clamped at the start and end. It can be used by specifying bspline as the interpolation method. >>> Color . interpolate ([ 'red' , 'green' , 'blue' , 'orange' ], method = 'bspline' ) <coloraide.interpolate.bspline.InterpolatorBSpline object at 0x7fe9dbbbe440> Color.interpolate(['red', 'green', 'blue', 'orange'], method='bspline') Edit Share Run Cancel","title":"B-Spline"},{"location":"interpolation/#natural","text":"The \"natural\" spline is an the same B-spline approach except an algorithm is applied that uses the colors as data points and calculates control points such that the interpolation passes through all the data points. The resultant spline has the continuity and properties of a natural spline, hence the name. One down side is that it can overshoot or undershoot a bit, and can occasionally cause the interpolation path to pass out of gamut if interpolating on an edge. It can be used by specifying natural as the interpolation method. >>> Color . interpolate ([ 'red' , 'green' , 'blue' , 'orange' ], method = 'natural' ) <coloraide.interpolate.bspline_natural.InterpolatorNaturalBSpline object at 0x7fe9dbe91750> Color.interpolate(['red', 'green', 'blue', 'orange'], method='natural') Edit Share Run Cancel","title":"Natural"},{"location":"interpolation/#monotone","text":"The \"monotone\" spline is a piecewise interpolation spline that preserves monotonicity. As far as we are concerned, the important thing to note is that it greatly reduces any overshoot or undershoot in the interpolation. >>> Color . interpolate ([ 'red' , 'green' , 'blue' , 'orange' ], method = 'monotone' ) <coloraide.interpolate.monotone.InterpolatorMonotone object at 0x7fe9dbf8f8b0> Color.interpolate(['red', 'green', 'blue', 'orange'], method='monotone') Edit Share Run Cancel","title":"Monotone"},{"location":"interpolation/#catmull-rom","text":"Catmull-Rom is Not Registered By Default Lastly, the Catmull-Rom spline is another \"interpolating\" spline that passes through all of its data points, similar to the \"natural\" spline, but it but does not share the same continuity and properties of a \"natural\" spline. Much like the \"natural\" spline, it can overshoot or undershoot. Catmull-Rom is not registered by default, but can be registered as shown below and then used by specifying catrom as the interpolation method. >>> from coloraide import Color >>> from coloraide.interpolate.catmull_rom import CatmullRom >>> class Custom ( Color ): ... ... >>> Custom . register ( CatmullRom ()) >>> Custom . interpolate ([ 'red' , 'green' , 'blue' , 'orange' ], method = 'catrom' ) <coloraide.interpolate.catmull_rom.InterpolatorCatmullRom object at 0x7fe9dbbd1e70> from coloraide import Color from coloraide.interpolate.catmull_rom import CatmullRom class Custom(Color): ... Custom.register(CatmullRom()) Custom.interpolate(['red', 'green', 'blue', 'orange'], method='catrom') Edit Share Run Cancel","title":"Catmull-Rom"},{"location":"interpolation/#hue-interpolation","text":"In interpolation, hues are handled special allowing us to control the way in which hues are evaluated. By default, the shortest angle between two hues is interpolated between, but the hue allows us to redefine this behavior in a number of different ways: shorter , longer , increasing , decreasing , and specified . Below, we can see how the interpolation varies using shorter vs longer (interpolate between the largest angle). >>> i = Color . interpolate ( ... [ \"lch(52% 58.1 22.7)\" , Color ( \"lch(56% 49.1 257.1)\" ) . mask ( \"hue\" , invert = True )], ... space = \"lch\" ... ) >>> i ( 0.2477 ) . to_string () lch(52 58.1 351.59) >>> i = Color . interpolate ( ... [ \"lch(52% 58.1 22.7)\" , Color ( \"lch(56% 49.1 257.1)\" ) . mask ( \"hue\" , invert = True )], ... space = \"lch\" , ... hue = \"longer\" ... ) >>> i ( 0.2477 ) . to_string () lch(52 58.1 80.761) i = Color.interpolate( [\"lch(52% 58.1 22.7)\", Color(\"lch(56% 49.1 257.1)\").mask(\"hue\", invert=True)], space=\"lch\" ) i(0.2477).to_string() i = Color.interpolate( [\"lch(52% 58.1 22.7)\", Color(\"lch(56% 49.1 257.1)\").mask(\"hue\", invert=True)], space=\"lch\", hue=\"longer\" ) i(0.2477).to_string() Edit Share Run Cancel To help visualize the different hue methods, consider the following evaluation between rebeccapurple and lch ( 85 % 85 805 ) . Below we will demonstrate each of the different hue evaluations. To learn more, check out the CSS level 4 specification which describes each one. Interpolating Multiple Colors The algorithm has been tweaked in order to calculate fix-ups of multiple hues such that they are all relative to each other. This is a requirement for interpolation methods that use cubic splines that evaluate many hues at the same time as opposed to linear, piecewise interpolation that only evaluates two hues at any given time. shorter longer increasing decreasing specified >>> Color . interpolate ( ... [ \"rebeccapurple\" , \"lch(85% 100 805)\" ], ... space = 'lch' , ... hue = \"shorter\" ... ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbbbec20> Color.interpolate( [\"rebeccapurple\", \"lch(85% 100 805)\"], space='lch', hue=\"shorter\" ) Edit Share Run Cancel >>> Color . interpolate ( ... [ \"rebeccapurple\" , \"lch(85% 100 805)\" ], ... space = 'lch' , ... hue = \"longer\" ... ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbbbf250> Color.interpolate( [\"rebeccapurple\", \"lch(85% 100 805)\"], space='lch', hue=\"longer\" ) Edit Share Run Cancel >>> Color . interpolate ( ... [ \"rebeccapurple\" , \"lch(85% 100 805)\" ], ... space = 'lch' , ... hue = \"increasing\" ... ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbe924d0> Color.interpolate( [\"rebeccapurple\", \"lch(85% 100 805)\"], space='lch', hue=\"increasing\" ) Edit Share Run Cancel >>> Color . interpolate ( ... [ \"rebeccapurple\" , \"lch(85% 100 805)\" ], ... space = 'lch' , ... hue = \"decreasing\" ... ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbf8e620> Color.interpolate( [\"rebeccapurple\", \"lch(85% 100 805)\"], space='lch', hue=\"decreasing\" ) Edit Share Run Cancel >>> Color . interpolate ( ... [ \"rebeccapurple\" , \"lch(85% 100 805)\" ], ... space = 'lch' , ... hue = \"specified\" ... ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbe91d50> Color.interpolate( [\"rebeccapurple\", \"lch(85% 100 805)\"], space='lch', hue=\"specified\" ) Edit Share Run Cancel","title":"Hue Interpolation"},{"location":"interpolation/#interpolating-with-alpha","text":"Interpolating color channels is pretty straight forward and uses traditional linear interpolation logic, but when introducing transparency to a color, interpolation uses a concept known as premultiplication which alters the normal interpolation process. Premultiplication is a technique that tends to produce better results when two colors have differing transparency. Consider the following two example. Normally, when transitioning to a \"transparent\" color, the colors will be more gray during the transition. This is because transparent is actually black. But when using premultiplication, the transition looks just as one would expect as the transparent color's channels are weighted less due to the high transparency. The example below transitions from white to a fully transparent color for both non-premultiplied and premultiplied interpolation. We've forced a white background ( for dark theme users ) to make the grayish transition of the non-premultiplied results easy to see. >>> Color . interpolate ([ 'white' , 'transparent' ], space = 'srgb' , premultiplied = False ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9db952b60> >>> Color . interpolate ([ 'white' , 'transparent' ], space = 'srgb' ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9db953e80> Color.interpolate(['white', 'transparent'], space='srgb', premultiplied=False) Color.interpolate(['white', 'transparent'], space='srgb') Edit Share Run Cancel Premultiplication does better because it takes into account the differing amounts of transparency that each color has. Colors that are more opaque are \"weighted\" more, and contribute more to the overall color. Consider the example below. Orange is fully opaque while blue is quite transparent. Logically, the blue shouldn't have as big an affect on the overall color as it is so faint, and yet, in the un-premultiplied example, when mixing the colors equally, we see that the resultant color is also equally influenced by the hue of both colors. In the premultiplied example, we see that orange is still quite dominant at 50%. >>> Color ( 'orange' ) . mix ( Color ( 'blue' ) . set ( 'alpha' , 0.25 ), space = 'srgb' , premultiplied = False ) color(srgb 0.5 0.32353 0.5 / 0.625) >>> Color ( 'orange' ) . mix ( Color ( 'blue' ) . set ( 'alpha' , 0.25 ), space = 'srgb' ) color(srgb 0.8 0.51765 0.2 / 0.625) Color('orange').mix(Color('blue').set('alpha', 0.25), space='srgb', premultiplied=False) Color('orange').mix(Color('blue').set('alpha', 0.25), space='srgb') Edit Share Run Cancel If we interpolate it, we can see the difference in transition. >>> Color . interpolate ([ 'orange' , Color ( 'blue' ) . set ( 'alpha' , 0.25 )], space = 'srgb' , premultiplied = False ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9db8f6380> >>> Color . interpolate ([ 'orange' , Color ( 'blue' ) . set ( 'alpha' , 0.25 )], space = 'srgb' ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbbbe770> Color.interpolate(['orange', Color('blue').set('alpha', 0.25)], space='srgb', premultiplied=False) Color.interpolate(['orange', Color('blue').set('alpha', 0.25)], space='srgb') Edit Share Run Cancel There may be some cases where it is desired to use a non-premultiplied. There are many reasons, one could simply be that you need to mimic the same behavior of a system that does not use premultiplied interpolation. If so, simply set premultiplied to False as shown above.","title":"Interpolating with Alpha"},{"location":"interpolation/#masking","text":"If desired, we can mask off specific channels that we do not wish to interpolate. Masking works by cloning the color and setting the specified channels as undefined (internally set to NaN ). When interpolating, if one color's channel has a NaN , the other color's channel will be used as the result, keeping that channel at a constant value. If both colors have a NaN for the same channel, then NaN will be returned. Magic Behind NaN There are times when NaN values can happen naturally, such as with achromatic colors with hues. To learn more, check out Undefined Handling/ NaN Handling . In the following example, we have a base color of lch ( 52 % 58 . 1 22 . 7 ) which we then interpolate with lch ( 56 % 49 . 1 257 . 1 ) . We then mask off the second color's channels except for hue . Applying this logic, we will end up with a range of colors that maintains the same lightness and chroma as the first color, but with different hues. We can see as we step through the colors that only the hue is interpolated. >>> i = Color . interpolate ( ... [ \"lch(52% 58.1 22.7)\" , Color ( \"lch(56% 49.1 257.1)\" ) . mask ([ 'lightness' , 'chroma' , 'alpha' ])], ... space = \"lch\" ... ) >>> [ i ( x / 10 ) . to_string () for x in range ( 10 )] ['lch(52 58.1 22.7)', 'lch(52 58.1 10.14)', 'lch(52 58.1 357.58)', 'lch(52 58.1 345.02)', 'lch(52 58.1 332.46)', 'lch(52 58.1 319.9)', 'lch(52 58.1 307.34)', 'lch(52 58.1 294.78)', 'lch(52 58.1 282.22)', 'lch(52 58.1 269.66)'] i = Color.interpolate( [\"lch(52% 58.1 22.7)\", Color(\"lch(56% 49.1 257.1)\").mask(['lightness', 'chroma', 'alpha'])], space=\"lch\" ) [i(x/10).to_string() for x in range(10)] Edit Share Run Cancel You can also create inverted masks. An inverted mask will mask all except the specified channel. >>> i = Color . interpolate ( ... [ \"lch(52% 58.1 22.7)\" , Color ( \"lch(56% 49.1 257.1)\" ) . mask ( 'hue' , invert = True )], ... space = \"lch\" ... ) >>> [ i ( x / 10 ) . to_string () for x in range ( 10 )] ['lch(52 58.1 22.7)', 'lch(52 58.1 10.14)', 'lch(52 58.1 357.58)', 'lch(52 58.1 345.02)', 'lch(52 58.1 332.46)', 'lch(52 58.1 319.9)', 'lch(52 58.1 307.34)', 'lch(52 58.1 294.78)', 'lch(52 58.1 282.22)', 'lch(52 58.1 269.66)'] i = Color.interpolate( [\"lch(52% 58.1 22.7)\", Color(\"lch(56% 49.1 257.1)\").mask('hue', invert=True)], space=\"lch\" ) [i(x/10).to_string() for x in range(10)] Edit Share Run Cancel Magic Behind Masking Masking actually clones the color, setting the specified channels to undefined values. To learn more about masking and undefined values, check out Undefined Handling .","title":"Masking"},{"location":"interpolation/#easing-functions","text":"When interpolating, whether using linear interpolation or something like B-Spline interpolation, the transitioning between colors is always linear in time, even if the path to those colors is not. For example, if you are interpolating between 2 colors and you request a 0.5 point on that line, it will always be in the middle. This is because, no matter how crooked the path, the rate of change on that path is always linear. By default, ColorAide always uses linear transitions when interpolating, but there are times that a different, more dynamic transition may be desired. This can be achieved by using the progress parameter on any of the interpolation related functions provided by ColorAide. progress accepts an easing function that takes a single time input and returns a new time input. This allows for a user to augment the rate of change when transition from one color to another. Inputs are almost always between 0 - 1 unless extrapolate is enabled and the user has manually input a range beyond 0 - 1. ColorAide provides 5 basic easing functions out of the box along with cubic_bezier which is used to create all of the aforementioned easing function except linear , which simply returns what is given as an input. Create Your Own Cubic Bezier Easings Online: https://cubic-bezier.com More Common Cubic Bezier Easings The following were all acquired from from https://matthewlein.com/tools/ceaser.js . ease_in_quad = cubic_bezier ( 0.550 , 0.085 , 0.680 , 0.530 ) ease_in_cubic = cubic_bezier ( 0.550 , 0.055 , 0.675 , 0.190 ) ease_in_quart = cubic_bezier ( 0.895 , 0.030 , 0.685 , 0.220 ) ease_in_quint = cubic_bezier ( 0.755 , 0.050 , 0.855 , 0.060 ) ease_in_sine = cubic_bezier ( 0.470 , 0.000 , 0.745 , 0.715 ) ease_in_expo = cubic_bezier ( 0.950 , 0.050 , 0.795 , 0.035 ) ease_in_circ = cubic_bezier ( 0.600 , 0.040 , 0.980 , 0.335 ) ease_in_back = cubic_bezier ( 0.600 , - 0.280 , 0.735 , 0.045 ) ease_out_quad = cubic_bezier ( 0.250 , 0.460 , 0.450 , 0.940 ) ease_out_cubic = cubic_bezier ( 0.215 , 0.610 , 0.355 , 1.000 ) ease_out_quart = cubic_bezier ( 0.165 , 0.840 , 0.440 , 1.000 ) ease_out_quint = cubic_bezier ( 0.230 , 1.000 , 0.320 , 1.000 ) ease_out_sine = cubic_bezier ( 0.390 , 0.575 , 0.565 , 1.000 ) ease_out_expo = cubic_bezier ( 0.190 , 1.000 , 0.220 , 1.000 ) ease_out_circ = cubic_bezier ( 0.075 , 0.820 , 0.165 , 1.000 ) ease_out_back = cubic_bezier ( 0.175 , 0.885 , 0.320 , 1.275 ) ease_in_out_quad = cubic_bezier ( 0.455 , 0.030 , 0.515 , 0.955 ) ease_in_out_cubic = cubic_bezier ( 0.645 , 0.045 , 0.355 , 1.000 ) ease_in_out_quart = cubic_bezier ( 0.770 , 0.000 , 0.175 , 1.000 ) ease_in_out_quint = cubic_bezier ( 0.860 , 0.000 , 0.070 , 1.000 ) ease_in_out_sine = cubic_bezier ( 0.445 , 0.050 , 0.550 , 0.950 ) ease_in_out_expo = cubic_bezier ( 1.000 , 0.000 , 0.000 , 1.000 ) ease_in_out_circ = cubic_bezier ( 0.785 , 0.135 , 0.150 , 0.860 ) ease_in_out_back = cubic_bezier ( 0.680 , - 0.550 , 0.265 , 1.550 ) Linear Ease Ease In Ease Out Ease In/Out Cubic Bezier Here, we are using the default \"ease in\" and \"ease out\" easing functions provided by ColorAide. >>> from coloraide import ease_in , ease_out >>> Color . interpolate ( ... [ \"green\" , \"blue\" ], ... progress = ease_in ... ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9db9505b0> >>> Color . interpolate ( ... [ \"green\" , \"blue\" ] ... ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbf8c790> >>> Color . interpolate ( ... [ \"green\" , \"blue\" ], ... progress = ease_out ... ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbf2d990> from coloraide import ease_in, ease_out Color.interpolate( [\"green\", \"blue\"], progress=ease_in ) Color.interpolate( [\"green\", \"blue\"] ) Color.interpolate( [\"green\", \"blue\"], progress=ease_out ) Edit Share Run Cancel Additionally, easing functions can be injected inline which allows a user to control how easing is performed between specific sub-interpolations within piecewise interpolation. >>> Color . interpolate ([ \"red\" , \"green\" , ease_out , \"blue\" ]) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbba71c0> Color.interpolate([\"red\", \"green\", ease_out, \"blue\"]) Edit Share Run Cancel ColorAide even lets you apply easing functions to specific channels, though they can only be done this way for the entire operation. This can be done to one or more channels at a time. Below, we apply an exponential \"ease in\" to alpha while allowing all other channels to interpolate normally. >>> ease_in_expo = cubic_bezier ( 0.950 , 0.050 , 0.795 , 0.035 ) >>> Color . interpolate ( ... [ \"lch(50% 50 0)\" , \"lch(90% 50 260 / 0.5)\" ], ... progress = { ... 'alpha' : ease_in_expo ... } ... ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbe92c80> ease_in_expo = cubic_bezier(0.950, 0.050, 0.795, 0.035) Color.interpolate( [\"lch(50% 50 0)\", \"lch(90% 50 260 / 0.5)\"], progress={ 'alpha': ease_in_expo } ) Edit Share Run Cancel We can also set all the channels to an easing function via all and then override specific channels. In this case, we exponentially \"ease out\" on all channels except the red channel, which we then force to be linear. >>> ease_out_expo = cubic_bezier ( 0.190 , 1.000 , 0.220 , 1.000 ) >>> Color . interpolate ( ... [ \"color(srgb 0 1 1)\" , \"color(srgb 1 0 0)\" ], ... progress = { ... 'all' : ease_out_expo , ... 'r' : linear ... }, ... space = 'srgb' ... ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbbd30d0> ease_out_expo = cubic_bezier(0.190, 1.000, 0.220, 1.000) Color.interpolate( [\"color(srgb 0 1 1)\", \"color(srgb 1 0 0)\"], progress={ 'all': ease_out_expo, 'r': linear }, space='srgb' ) Edit Share Run Cancel","title":"Easing Functions"},{"location":"interpolation/#color-stops-and-hints","text":"Color stops are the position where the transition to and from a color starts and ends. By default, color stops are evenly distributed between 0 - 1, but if desired, these color stops can be shifted. To specify color stops, simply wrap a color in a coloraide.stop object and specify the stop position. Stop positions will then cause the transition of the targeted color to be moved. >>> from coloraide import stop >>> Color . interpolate ([ 'orange' , 'purple' , 'green' ]) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbe92500> >>> Color . interpolate ([ 'orange' , stop ( 'purple' , 0.25 ), 'green' ]) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbf8dd80> from coloraide import stop Color.interpolate(['orange', 'purple', 'green']) Color.interpolate(['orange', stop('purple', 0.25), 'green']) Edit Share Run Cancel Color stops follow the rules as laid out in the CSS spec . CSS gradients also have a concept of \"hints\". Hints essentially define the midpoint between two colors. Instead of reinventing the wheel, and further complicating the interface, we've decided to just demonstrate color hints with easing functions. The logic comes directly from the CSS spec . Using the hint function, we can generate a midpoint easing method that moves the middle of the interpolation transition to the specified point which is relative to the two color stops it is between. >>> from coloraide import hint >>> Color . interpolate ([ 'orange' , 'purple' , 'green' ]) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbbd30d0> >>> Color . interpolate ([ 'orange' , hint ( 0.75 ), 'purple' , 'green' ]) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbbd1600> from coloraide import hint Color.interpolate(['orange', 'purple', 'green']) Color.interpolate(['orange', hint(0.75), 'purple', 'green']) Edit Share Run Cancel","title":"Color Stops and Hints"},{"location":"interpolation/#mixing","text":"Interpolation Options Any options not consumed by mix will be passed to the underlying interpolation function. This includes options like hue , progress , etc. The mix function is built on top of the interpolate function and provides a simple, quick, and intuitive simple mixing of two colors. Just pass in a color to mix with the base color, and you'll get an equal mix of the two. >>> Color ( \"red\" ) . mix ( Color ( \"blue\" )) color(srgb 0.55044 0.32562 0.6365 / 1) Color(\"red\").mix(Color(\"blue\")) Edit Share Run Cancel By default, colors are mixed at 50%, but the percentage can be controlled. Here we mix the color blue into the color red at 20%. With blue at 20% and red at 80%, this gives us a more reddish color. >>> Color ( \"red\" ) . mix ( Color ( \"blue\" ), 0.2 ) color(srgb 0.82084 0.26522 0.37806 / 1) Color(\"red\").mix(Color(\"blue\"), 0.2) Edit Share Run Cancel As with all interpolation based functions, if needed, a different color space can be specified with the space parameter or even a different interpolation method via method . mix accepts all the same parameters used in interpolate , though concepts like stops and hints are not allowed with mixing. >>> Color ( \"red\" ) . mix ( Color ( \"blue\" ), space = \"hsl\" , method = 'bspline' ) color(srgb 1 0 1 / 1) Color(\"red\").mix(Color(\"blue\"), space=\"hsl\", method='bspline') Edit Share Run Cancel Mix can also accept a string and will create the color for us which is great if we don't need to work with the second color afterwards. >>> Color ( \"red\" ) . mix ( \"blue\" , 0.2 ) color(srgb 0.82084 0.26522 0.37806 / 1) Color(\"red\").mix(\"blue\", 0.2) Edit Share Run Cancel Mixing will always return a new color unless in_place is set True .","title":"Mixing"},{"location":"interpolation/#steps","text":"Interpolation Options Any options not consumed by mix will be passed to the underlying interpolation function. This includes options like hue , progress , etc. The steps method provides an intuitive interface to create lists of discrete colors. Like mixing, it is also built on interpolate . Just provide two colors, and specify how many steps are wanted. >>> Color . steps ([ \"red\" , \"blue\" ], steps = 10 ) [color(srgb 1 0 0 / 1), color(srgb 0.90045 0.20791 0.27521 / 1), color(srgb 0.80092 0.27537 0.40045 / 1), color(srgb 0.70118 0.31007 0.50198 / 1), color(srgb 0.60092 0.32459 0.59316 / 1), color(srgb 0.49961 0.32272 0.67882 / 1), color(srgb 0.39631 0.30469 0.76127 / 1), color(srgb 0.28903 0.26729 0.84181 / 1), color(srgb 0.17188 0.19896 0.92122 / 1), color(srgb 0 0 1 / 1)] Color.steps([\"red\", \"blue\"], steps=10) Edit Share Run Cancel If desired, multiple colors can be provided, and steps will be returned for all the interpolated segments. When interpolating multiple colors, piecewise interpolation is used (which is covered in more detail later). >>> Color . steps ([ \"red\" , \"orange\" , \"yellow\" , \"green\" ], steps = 10 ) [color(srgb 1 0 0 / 1), color(srgb 1.01 0.34365 0.0003 / 1), color(srgb 1.0105 0.50766 0.00032 / 1), color(srgb 1 0.64706 0 / 1), color(srgb 1.009 0.76646 0.00013 / 1), color(srgb 1.0093 0.88367 0.00014 / 1), color(srgb 1 1 0 / 1), color(srgb 0.71561 0.83059 0.00014 / 1), color(srgb 0.42921 0.66463 0.00011 / 1), color(srgb 0 0.50196 0 / 1)] Color.steps([\"red\", \"orange\", \"yellow\", \"green\"], steps=10) Edit Share Run Cancel Steps can also be configured to return colors based on a maximum Delta E distance. This means you can ensure the distance between all colors is no greater than a certain value. In this example, we specify the color color ( display-p3 0 1 0 ) and interpolate steps between red . The result gives us an array of colors, where the distance between any two colors should be no greater than the Delta E result of 10. >>> Color . steps ( ... [ Color ( \"display-p3\" , [ 0 , 1 , 0 ]), \"red\" ], ... space = \"lch\" , ... out_space = \"srgb\" , ... max_delta_e = 10 ... ) [color(srgb -0.5116 1.0183 -0.31067 / 1), color(srgb -0.4504 0.99903 -0.32673 / 1), color(srgb -0.37655 0.97943 -0.33694 / 1), color(srgb -0.27847 0.95946 -0.34286 / 1), color(srgb -0.09291 0.9391 -0.34554 / 1), color(srgb 0.23528 0.91833 -0.34574 / 1), color(srgb 0.34809 0.89715 -0.34401 / 1), color(srgb 0.42823 0.87552 -0.34098 / 1), color(srgb 0.49308 0.85343 -0.33745 / 1), color(srgb 0.54849 0.83088 -0.33349 / 1), color(srgb 0.59727 0.80784 -0.32909 / 1), color(srgb 0.64097 0.7843 -0.32423 / 1), color(srgb 0.6806 0.76025 -0.3189 / 1), color(srgb 0.71679 0.73568 -0.3131 / 1), color(srgb 0.74999 0.71057 -0.30681 / 1), color(srgb 0.78053 0.6849 -0.30002 / 1), color(srgb 0.80865 0.65865 -0.29271 / 1), color(srgb 0.83451 0.6318 -0.28486 / 1), color(srgb 0.85826 0.60433 -0.27644 / 1), color(srgb 0.87999 0.57619 -0.26744 / 1), color(srgb 0.89978 0.54736 -0.25782 / 1), color(srgb 0.9177 0.51777 -0.24752 / 1), color(srgb 0.9338 0.48735 -0.2365 / 1), color(srgb 0.9481 0.456 -0.22467 / 1), color(srgb 0.96064 0.4236 -0.21195 / 1), color(srgb 0.97145 0.38994 -0.19821 / 1), color(srgb 0.98055 0.35476 -0.18326 / 1), color(srgb 0.98796 0.31761 -0.16684 / 1), color(srgb 0.99369 0.27779 -0.14854 / 1), color(srgb 0.99777 0.23405 -0.12767 / 1), color(srgb 1.0002 0.18378 -0.10158 / 1), color(srgb 1.0009 0.11978 -0.06417 / 1), color(srgb 1 0 0 / 1)] Color.steps( [Color(\"display-p3\", [0, 1, 0]), \"red\"], space=\"lch\", out_space=\"srgb\", max_delta_e=10 ) Edit Share Run Cancel max_steps can be used to limit the results of max_delta_e in case result balloons to an unexpected size. Obviously, this affects the Delta E between the colors inversely. It should be noted that steps are injected equally between every color when satisfying a max Delta E limit in order to avoid shifting the midpoint. In some cases, in order to satisfy both the max_delta_e and the max_steps requirement, the number of steps may even be clipped such that they are less than the max_steps limit. max_steps is set to 1000 by default, but can be set to None if no limit is desired. >>> Color . steps ( ... [ Color ( \"display-p3\" , [ 0 , 1 , 0 ]), \"red\" ], ... space = \"lch\" , ... out_space = \"srgb\" , ... max_delta_e = 10 , ... max_steps = 10 ... ) [color(srgb -0.5116 1.0183 -0.31067 / 1), color(srgb -0.09291 0.9391 -0.34554 / 1), color(srgb 0.49308 0.85343 -0.33745 / 1), color(srgb 0.6806 0.76025 -0.3189 / 1), color(srgb 0.80865 0.65865 -0.29271 / 1), color(srgb 0.89978 0.54736 -0.25782 / 1), color(srgb 0.96064 0.4236 -0.21195 / 1), color(srgb 0.99369 0.27779 -0.14854 / 1), color(srgb 1 0 0 / 1)] Color.steps( [Color(\"display-p3\", [0, 1, 0]), \"red\"], space=\"lch\", out_space=\"srgb\", max_delta_e=10, max_steps=10 ) Edit Share Run Cancel When specifying a max_delta_e , steps will function as a minimum required steps and will push the delta even smaller if the required steps is greater than the calculated steps via the maximum Delta E limit. >>> Color . steps ( ... [ Color ( \"display-p3\" , [ 0 , 1 , 0 ]), \"red\" ], ... space = \"lch\" , ... out_space = \"srgb\" , ... max_delta_e = 10 , ... steps = 50 ... ) [color(srgb -0.5116 1.0183 -0.31067 / 1), color(srgb -0.47276 1.0057 -0.32192 / 1), color(srgb -0.42946 0.99307 -0.33039 / 1), color(srgb -0.37992 0.98024 -0.33661 / 1), color(srgb -0.32082 0.96725 -0.341 / 1), color(srgb -0.24447 0.9541 -0.34385 / 1), color(srgb -0.1198 0.94078 -0.34542 / 1), color(srgb 0.15996 0.92729 -0.34592 / 1), color(srgb 0.26558 0.91362 -0.3455 / 1), color(srgb 0.33665 0.89976 -0.34431 / 1), color(srgb 0.3931 0.88572 -0.34248 / 1), color(srgb 0.44104 0.8715 -0.34036 / 1), color(srgb 0.48324 0.85707 -0.33806 / 1), color(srgb 0.52118 0.84244 -0.33557 / 1), color(srgb 0.55582 0.82761 -0.33289 / 1), color(srgb 0.58776 0.81258 -0.33002 / 1), color(srgb 0.61745 0.79733 -0.32696 / 1), color(srgb 0.64519 0.78187 -0.32371 / 1), color(srgb 0.67123 0.76619 -0.32025 / 1), color(srgb 0.69575 0.75029 -0.31659 / 1), color(srgb 0.7189 0.73416 -0.31273 / 1), color(srgb 0.74079 0.7178 -0.30866 / 1), color(srgb 0.76151 0.7012 -0.30437 / 1), color(srgb 0.78113 0.68437 -0.29987 / 1), color(srgb 0.79972 0.66729 -0.29515 / 1), color(srgb 0.81733 0.64995 -0.2902 / 1), color(srgb 0.834 0.63236 -0.28502 / 1), color(srgb 0.84977 0.6145 -0.2796 / 1), color(srgb 0.86467 0.59636 -0.27393 / 1), color(srgb 0.87872 0.57794 -0.26801 / 1), color(srgb 0.89194 0.55922 -0.26182 / 1), color(srgb 0.90434 0.54018 -0.25536 / 1), color(srgb 0.91596 0.52082 -0.2486 / 1), color(srgb 0.92679 0.50111 -0.24154 / 1), color(srgb 0.93686 0.48103 -0.23415 / 1), color(srgb 0.94616 0.46054 -0.22641 / 1), color(srgb 0.95471 0.43961 -0.2183 / 1), color(srgb 0.96252 0.41819 -0.20979 / 1), color(srgb 0.96959 0.39623 -0.20082 / 1), color(srgb 0.97593 0.37364 -0.19136 / 1), color(srgb 0.98155 0.35032 -0.18134 / 1), color(srgb 0.98644 0.32615 -0.17067 / 1), color(srgb 0.99062 0.30093 -0.15926 / 1), color(srgb 0.99409 0.27439 -0.14694 / 1), color(srgb 0.99685 0.24615 -0.13353 / 1), color(srgb 0.99891 0.21556 -0.11841 / 1), color(srgb 1.0002 0.18152 -0.10034 / 1), color(srgb 1.0009 0.14177 -0.07755 / 1), color(srgb 1.0008 0.09013 -0.04535 / 1), color(srgb 1 0 0 / 1)] Color.steps( [Color(\"display-p3\", [0, 1, 0]), \"red\"], space=\"lch\", out_space=\"srgb\", max_delta_e=10, steps=50 ) Edit Share Run Cancel steps uses the color class's default \u2206E method to calculate max \u2206E, the current default \u2206E being \u2206E * ab . While using something like \u2206E * 00 is far more accurate, it is a much more expensive operation. If desired, the class's default \u2206E can be changed via subclassing the color object and and changing DELTA_E class variable or by manually specifying the method via the delta_e parameter. \u2206E * ab . \u2206E * 00 >>> Color . steps ( ... [ Color ( \"display-p3\" , [ 0 , 1 , 0 ]), \"red\" ], ... space = \"lch\" , ... out_space = \"srgb\" , ... max_delta_e = 10 , ... delta_e = \"76\" ... ) [color(srgb -0.5116 1.0183 -0.31067 / 1), color(srgb -0.4504 0.99903 -0.32673 / 1), color(srgb -0.37655 0.97943 -0.33694 / 1), color(srgb -0.27847 0.95946 -0.34286 / 1), color(srgb -0.09291 0.9391 -0.34554 / 1), color(srgb 0.23528 0.91833 -0.34574 / 1), color(srgb 0.34809 0.89715 -0.34401 / 1), color(srgb 0.42823 0.87552 -0.34098 / 1), color(srgb 0.49308 0.85343 -0.33745 / 1), color(srgb 0.54849 0.83088 -0.33349 / 1), color(srgb 0.59727 0.80784 -0.32909 / 1), color(srgb 0.64097 0.7843 -0.32423 / 1), color(srgb 0.6806 0.76025 -0.3189 / 1), color(srgb 0.71679 0.73568 -0.3131 / 1), color(srgb 0.74999 0.71057 -0.30681 / 1), color(srgb 0.78053 0.6849 -0.30002 / 1), color(srgb 0.80865 0.65865 -0.29271 / 1), color(srgb 0.83451 0.6318 -0.28486 / 1), color(srgb 0.85826 0.60433 -0.27644 / 1), color(srgb 0.87999 0.57619 -0.26744 / 1), color(srgb 0.89978 0.54736 -0.25782 / 1), color(srgb 0.9177 0.51777 -0.24752 / 1), color(srgb 0.9338 0.48735 -0.2365 / 1), color(srgb 0.9481 0.456 -0.22467 / 1), color(srgb 0.96064 0.4236 -0.21195 / 1), color(srgb 0.97145 0.38994 -0.19821 / 1), color(srgb 0.98055 0.35476 -0.18326 / 1), color(srgb 0.98796 0.31761 -0.16684 / 1), color(srgb 0.99369 0.27779 -0.14854 / 1), color(srgb 0.99777 0.23405 -0.12767 / 1), color(srgb 1.0002 0.18378 -0.10158 / 1), color(srgb 1.0009 0.11978 -0.06417 / 1), color(srgb 1 0 0 / 1)] Color.steps( [Color(\"display-p3\", [0, 1, 0]), \"red\"], space=\"lch\", out_space=\"srgb\", max_delta_e=10, delta_e=\"76\" ) Edit Share Run Cancel >>> Color . steps ( ... [ Color ( \"display-p3\" , [ 0 , 1 , 0 ]), \"red\" ], ... space = \"lch\" , ... out_space = \"srgb\" , ... max_delta_e = 10 , ... delta_e = \"2000\" ... ) [color(srgb -0.5116 1.0183 -0.31067 / 1), color(srgb -0.37655 0.97943 -0.33694 / 1), color(srgb -0.09291 0.9391 -0.34554 / 1), color(srgb 0.34809 0.89715 -0.34401 / 1), color(srgb 0.49308 0.85343 -0.33745 / 1), color(srgb 0.59727 0.80784 -0.32909 / 1), color(srgb 0.6806 0.76025 -0.3189 / 1), color(srgb 0.74999 0.71057 -0.30681 / 1), color(srgb 0.80865 0.65865 -0.29271 / 1), color(srgb 0.85826 0.60433 -0.27644 / 1), color(srgb 0.89978 0.54736 -0.25782 / 1), color(srgb 0.9338 0.48735 -0.2365 / 1), color(srgb 0.96064 0.4236 -0.21195 / 1), color(srgb 0.98055 0.35476 -0.18326 / 1), color(srgb 0.99369 0.27779 -0.14854 / 1), color(srgb 1.0002 0.18378 -0.10158 / 1), color(srgb 1 0 0 / 1)] Color.steps( [Color(\"display-p3\", [0, 1, 0]), \"red\"], space=\"lch\", out_space=\"srgb\", max_delta_e=10, delta_e=\"2000\" ) Edit Share Run Cancel And much like interpolate , we can use stops and hints and any of the other supported interpolate features as well. >>> Color . steps ([ 'orange' , stop ( 'purple' , 0.25 ), 'green' ], method = 'bspline' , steps = 10 ) [color(srgb 1 0.64706 0 / 1), color(srgb 0.77185 0.43332 0.39421 / 1), color(srgb 0.58315 0.30002 0.43861 / 1), color(srgb 0.50763 0.29361 0.42001 / 1), color(srgb 0.46179 0.31175 0.39515 / 1), color(srgb 0.41587 0.34125 0.36122 / 1), color(srgb 0.36562 0.37769 0.31743 / 1), color(srgb 0.30451 0.41805 0.2607 / 1), color(srgb 0.21829 0.4601 0.18124 / 1), color(srgb 0 0.50196 0 / 1)] Color.steps(['orange', stop('purple', 0.25), 'green'], method='bspline', steps=10) Edit Share Run Cancel","title":"Steps"},{"location":"interpolation/#extrapolation","text":"By default, ColorAide clamps the entire progress of an interpolation to always be between 0 and 1. In most cases, this is more what most user expects and why this is the default. It should be noted that this does not affect easing functions, as the clamping is done prior to any easing function calls. If it is desired to extrapolate past 0 and 1, extrapolate can set to True on all interpolation methods. >>> Color ( 'red' ) . mix ( 'blue' , 0.5 ) color(srgb 0.55044 0.32562 0.6365 / 1) >>> Color ( 'red' ) . mix ( 'blue' , - 0.5 , extrapolate = True ) color(srgb 1.4512 -0.57257 -0.46028 / 1) Color('red').mix('blue', 0.5) Color('red').mix('blue', -0.5, extrapolate=True) Edit Share Run Cancel As a larger example, we can purposely interpolate over a range with values beyond 0 and 1. Here we extended the range to -0.5 and 1.5. >>> offset , factor = 0.25 , 1.5 >>> i = Color . interpolate ([ 'red' , 'blue' ]) >>> HtmlGradient ([ i (( r * factor / 100 ) - offset ) for r in range ( 101 )]) [color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 1 0 0 / 1), color(srgb 0.99552 0.02344 0.03318 / 1), color(srgb 0.98207 0.07954 0.10229 / 1), color(srgb 0.96863 0.11367 0.14449 / 1), color(srgb 0.95519 0.1393 0.17749 / 1), color(srgb 0.94176 0.16017 0.20551 / 1), color(srgb 0.92832 0.17789 0.23032 / 1), color(srgb 0.91488 0.19332 0.25287 / 1), color(srgb 0.90145 0.20696 0.27372 / 1), color(srgb 0.88802 0.21916 0.29325 / 1), color(srgb 0.87458 0.23017 0.31171 / 1), color(srgb 0.86115 0.24016 0.3293 / 1), color(srgb 0.84771 0.24927 0.34615 / 1), color(srgb 0.83427 0.25759 0.36237 / 1), color(srgb 0.82084 0.26522 0.37806 / 1), color(srgb 0.80739 0.27221 0.39328 / 1), color(srgb 0.79395 0.27862 0.40808 / 1), color(srgb 0.7805 0.2845 0.42252 / 1), color(srgb 0.76705 0.28989 0.43664 / 1), color(srgb 0.75359 0.29482 0.45047 / 1), color(srgb 0.74012 0.29931 0.46403 / 1), color(srgb 0.72665 0.3034 0.47736 / 1), color(srgb 0.71317 0.30709 0.49048 / 1), color(srgb 0.69968 0.31042 0.5034 / 1), color(srgb 0.68619 0.31339 0.51615 / 1), color(srgb 0.67268 0.31601 0.52873 / 1), color(srgb 0.65916 0.3183 0.54117 / 1), color(srgb 0.64563 0.32027 0.55346 / 1), color(srgb 0.63208 0.32193 0.56564 / 1), color(srgb 0.61852 0.32328 0.57769 / 1), color(srgb 0.60495 0.32434 0.58964 / 1), color(srgb 0.59135 0.32509 0.60149 / 1), color(srgb 0.57774 0.32556 0.61324 / 1), color(srgb 0.5641 0.32573 0.62491 / 1), color(srgb 0.55044 0.32562 0.6365 / 1), color(srgb 0.53676 0.32522 0.64802 / 1), color(srgb 0.52304 0.32454 0.65946 / 1), color(srgb 0.5093 0.32357 0.67085 / 1), color(srgb 0.49552 0.32231 0.68217 / 1), color(srgb 0.48171 0.32077 0.69343 / 1), color(srgb 0.46786 0.31892 0.70465 / 1), color(srgb 0.45397 0.31678 0.71582 / 1), color(srgb 0.44003 0.31434 0.72694 / 1), color(srgb 0.42604 0.31158 0.73801 / 1), color(srgb 0.41199 0.3085 0.74905 / 1), color(srgb 0.39788 0.30509 0.76005 / 1), color(srgb 0.38371 0.30134 0.77102 / 1), color(srgb 0.36946 0.29723 0.78196 / 1), color(srgb 0.35512 0.29275 0.79286 / 1), color(srgb 0.3407 0.28788 0.80374 / 1), color(srgb 0.32617 0.2826 0.81459 / 1), color(srgb 0.31152 0.27688 0.82541 / 1), color(srgb 0.29675 0.2707 0.83622 / 1), color(srgb 0.28182 0.26401 0.847 / 1), color(srgb 0.26673 0.25677 0.85776 / 1), color(srgb 0.25145 0.24894 0.86851 / 1), color(srgb 0.23593 0.24046 0.87924 / 1), color(srgb 0.22015 0.23123 0.88995 / 1), color(srgb 0.20405 0.22117 0.90065 / 1), color(srgb 0.18756 0.21016 0.91134 / 1), color(srgb 0.1706 0.19801 0.92201 / 1), color(srgb 0.15303 0.18452 0.93267 / 1), color(srgb 0.13466 0.16934 0.94332 / 1), color(srgb 0.1152 0.15199 0.95397 / 1), color(srgb 0.09414 0.13166 0.9646 / 1), color(srgb 0.07051 0.10682 0.97523 / 1), color(srgb 0.04194 0.0739 0.98585 / 1), color(srgb 0.00985 0.02108 0.99646 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1)] >>> i = Color . interpolate ([ 'red' , 'blue' ], extrapolate = True ) >>> HtmlGradient ([ i (( r * factor / 100 ) - offset ) for r in range ( 101 )]) [color(srgb 1.2247 -0.37634 -0.36051 / 1), color(srgb 1.2112 -0.36299 -0.35175 / 1), color(srgb 1.1977 -0.34935 -0.34251 / 1), color(srgb 1.1842 -0.33536 -0.33272 / 1), color(srgb 1.1706 -0.32099 -0.32234 / 1), color(srgb 1.1571 -0.30619 -0.31127 / 1), color(srgb 1.1436 -0.29088 -0.29944 / 1), color(srgb 1.1302 -0.27498 -0.28673 / 1), color(srgb 1.1167 -0.25837 -0.27301 / 1), color(srgb 1.1032 -0.24093 -0.25808 / 1), color(srgb 1.0897 -0.22244 -0.2417 / 1), color(srgb 1.0763 -0.20264 -0.22353 / 1), color(srgb 1.0628 -0.18109 -0.20304 / 1), color(srgb 1.0493 -0.15714 -0.17943 / 1), color(srgb 1.0359 -0.12955 -0.15122 / 1), color(srgb 1.0224 -0.09572 -0.11531 / 1), color(srgb 1.009 -0.04719 -0.06178 / 1), color(srgb 0.99552 0.02344 0.03318 / 1), color(srgb 0.98207 0.07954 0.10229 / 1), color(srgb 0.96863 0.11367 0.14449 / 1), color(srgb 0.95519 0.1393 0.17749 / 1), color(srgb 0.94176 0.16017 0.20551 / 1), color(srgb 0.92832 0.17789 0.23032 / 1), color(srgb 0.91488 0.19332 0.25287 / 1), color(srgb 0.90145 0.20696 0.27372 / 1), color(srgb 0.88802 0.21916 0.29325 / 1), color(srgb 0.87458 0.23017 0.31171 / 1), color(srgb 0.86115 0.24016 0.3293 / 1), color(srgb 0.84771 0.24927 0.34615 / 1), color(srgb 0.83427 0.25759 0.36237 / 1), color(srgb 0.82084 0.26522 0.37806 / 1), color(srgb 0.80739 0.27221 0.39328 / 1), color(srgb 0.79395 0.27862 0.40808 / 1), color(srgb 0.7805 0.2845 0.42252 / 1), color(srgb 0.76705 0.28989 0.43664 / 1), color(srgb 0.75359 0.29482 0.45047 / 1), color(srgb 0.74012 0.29931 0.46403 / 1), color(srgb 0.72665 0.3034 0.47736 / 1), color(srgb 0.71317 0.30709 0.49048 / 1), color(srgb 0.69968 0.31042 0.5034 / 1), color(srgb 0.68619 0.31339 0.51615 / 1), color(srgb 0.67268 0.31601 0.52873 / 1), color(srgb 0.65916 0.3183 0.54117 / 1), color(srgb 0.64563 0.32027 0.55346 / 1), color(srgb 0.63208 0.32193 0.56564 / 1), color(srgb 0.61852 0.32328 0.57769 / 1), color(srgb 0.60495 0.32434 0.58964 / 1), color(srgb 0.59135 0.32509 0.60149 / 1), color(srgb 0.57774 0.32556 0.61324 / 1), color(srgb 0.5641 0.32573 0.62491 / 1), color(srgb 0.55044 0.32562 0.6365 / 1), color(srgb 0.53676 0.32522 0.64802 / 1), color(srgb 0.52304 0.32454 0.65946 / 1), color(srgb 0.5093 0.32357 0.67085 / 1), color(srgb 0.49552 0.32231 0.68217 / 1), color(srgb 0.48171 0.32077 0.69343 / 1), color(srgb 0.46786 0.31892 0.70465 / 1), color(srgb 0.45397 0.31678 0.71582 / 1), color(srgb 0.44003 0.31434 0.72694 / 1), color(srgb 0.42604 0.31158 0.73801 / 1), color(srgb 0.41199 0.3085 0.74905 / 1), color(srgb 0.39788 0.30509 0.76005 / 1), color(srgb 0.38371 0.30134 0.77102 / 1), color(srgb 0.36946 0.29723 0.78196 / 1), color(srgb 0.35512 0.29275 0.79286 / 1), color(srgb 0.3407 0.28788 0.80374 / 1), color(srgb 0.32617 0.2826 0.81459 / 1), color(srgb 0.31152 0.27688 0.82541 / 1), color(srgb 0.29675 0.2707 0.83622 / 1), color(srgb 0.28182 0.26401 0.847 / 1), color(srgb 0.26673 0.25677 0.85776 / 1), color(srgb 0.25145 0.24894 0.86851 / 1), color(srgb 0.23593 0.24046 0.87924 / 1), color(srgb 0.22015 0.23123 0.88995 / 1), color(srgb 0.20405 0.22117 0.90065 / 1), color(srgb 0.18756 0.21016 0.91134 / 1), color(srgb 0.1706 0.19801 0.92201 / 1), color(srgb 0.15303 0.18452 0.93267 / 1), color(srgb 0.13466 0.16934 0.94332 / 1), color(srgb 0.1152 0.15199 0.95397 / 1), color(srgb 0.09414 0.13166 0.9646 / 1), color(srgb 0.07051 0.10682 0.97523 / 1), color(srgb 0.04194 0.0739 0.98585 / 1), color(srgb 0.00985 0.02108 0.99646 / 1), color(srgb -0.01842 -0.04265 1.0071 / 1), color(srgb -0.04278 -0.08883 1.0177 / 1), color(srgb -0.06021 -0.12088 1.0283 / 1), color(srgb -0.07215 -0.1469 1.0389 / 1), color(srgb -0.0805 -0.1694 1.0495 / 1), color(srgb -0.08615 -0.18955 1.0601 / 1), color(srgb -0.08956 -0.20799 1.0707 / 1), color(srgb -0.09096 -0.22514 1.0812 / 1), color(srgb -0.09047 -0.24126 1.0918 / 1), color(srgb -0.08809 -0.25653 1.1024 / 1), color(srgb -0.0837 -0.27111 1.113 / 1), color(srgb -0.07705 -0.28509 1.1236 / 1), color(srgb -0.06766 -0.29855 1.1342 / 1), color(srgb -0.05456 -0.31157 1.1448 / 1), color(srgb -0.0356 -0.32419 1.1554 / 1), color(srgb -0.01177 -0.33646 1.166 / 1), color(srgb 0.01515 -0.34842 1.1766 / 1)] offset, factor = 0.25, 1.5 i = Color.interpolate(['red', 'blue']) HtmlGradient([i((r * factor / 100) - offset) for r in range(101)]) i = Color.interpolate(['red', 'blue'], extrapolate=True) HtmlGradient([i((r * factor / 100) - offset) for r in range(101)]) Edit Share Run Cancel Lastly, it is important to note that this affects stops as well, mainly stops applied to interpolation endpoints. When an endpoint is moved inwards via a color stop, the end range of the interpolation is clamped, extending the star and end color. But when extrapolation is enabled, a color stop on an endpoint essentially moves the start and end interpolation. And since there are no other colors on either end to interpolate with, extrapolation occurs. >>> Color . interpolate ([ stop ( 'red' , 0.25 ), stop ( 'blue' , 0.75 )]) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbf8de10> >>> Color . interpolate ([ stop ( 'red' , 0.25 ), stop ( 'blue' , 0.75 )], extrapolate = True ) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9db97c5e0> Color.interpolate([stop('red', 0.25), stop('blue', 0.75)]) Color.interpolate([stop('red', 0.25), stop('blue', 0.75)], extrapolate=True) Edit Share Run Cancel","title":"Extrapolation"},{"location":"interpolation/#null-handling","text":"Color spaces that have hue coordinates often have rules about when the hue is considered relevant. For instance, in the HSL color space, if saturation is zero, the hue is essentially powerless. This is because the color is \"without color\" or achromatic; therefore, the hue can have no affect on the actual color. ColorAide will generally respect the values a user provides, so if an achromatic HSL color is given a hue of 270 degrees, ColorAide will accept it, but the hue will not affect the color in any meaningful way. During conversions, such context is lost, and if an achromatic color is converted to the color space like HSL, the resultant color will have a hue that is noted as undefined. This is simply because there is no good hue for achromatic colors as they play no part in the color. Any hue is actually incorrect as achromatic colors have no real hue. Instead, colors will be returned with a value that represents that the hue is missing or undefined, or maybe better worded, could not be defined. Many libraries, like d3-color , chroma.js , and color.js , represent null hues with NaN (not a number). This is usually done to make color interpolation easier. Some, like d3-color, are a bit more liberal with NaN and will target special cases that are above and beyond the normal rules to help ensure good interpolation. For instance, they not only mark hue undefined on HSL colors when saturation is zero, but they'll mark saturation as NaN when lightness indicates \"black\" or \"white\". ColorAide also uses NaN , or in Python float ( 'nan' ) , to represent undefined channels. In certain situations, when a hue is deemed undefined, the hue value will be set to coloraide.NaN , which is just a constant containing float ( 'nan' ) . When performing linear interpolation, where only two color's channels are ever being evaluated together at a given time, if one color's channel has a NaN , the other color's channel will be used as the result. If both colors have a NaN for the same channel, then NaN will be returned. NaN Handling in B-Spline Interpolation NaN handling is a bit different for B-spline interpolation. Linear only evaluates colors at a given time, while B-spline uses a sliding window on four colors. Because the context is much wider and more complicated, NaN values will often get contexts from both side and create a new \"control point\" for the curve using linear interpolation. So the curve will use data from the defined points while ignoring the point that is undefined. Notice that in this example, because white's saturation is zero, the hue is undefined. Because the hue is undefined, when the color is mixed with a second color ( green ), the hue of the second color is used. >>> color = Color ( 'white' ) . convert ( 'hsl' ) >>> color [: - 1 ] [nan, 0.0, 1.0] >>> color2 = Color ( 'green' ) . convert ( 'hsl' ) >>> color2 [: - 1 ] [120.0, 1.0, 0.25098039215686274] >>> color . mix ( color2 , space = \"hsl\" ) color(--hsl 120 0.5 0.62549 / 1) color = Color('white').convert('hsl') color[:-1] color2 = Color('green').convert('hsl') color2[:-1] color.mix(color2, space=\"hsl\") Edit Share Run Cancel But if we manually set the hue to 0 instead of NaN , we can see that the mixing goes quite differently. >>> color = Color ( 'white' ) . convert ( 'hsl' ) . set ( 'hue' , 0 ) >>> color [: - 1 ] [0.0, 0.0, 1.0] >>> color2 = Color ( 'green' ) . convert ( 'hsl' ) >>> color2 [: - 1 ] [120.0, 1.0, 0.25098039215686274] >>> color . mix ( color2 , space = \"hsl\" ) color(--hsl 60 0.5 0.62549 / 1) color = Color('white').convert('hsl').set('hue', 0) color[:-1] color2 = Color('green').convert('hsl') color2[:-1] color.mix(color2, space=\"hsl\") Edit Share Run Cancel Technically, any channel can be set to NaN . And there are various ways to do this. The Color Manipulation documentation goes into the details of how these Nan values naturally occur and the various ways a user and manipulate them. .info-container {display: inline-block;}","title":"Undefined/NaN Handling"},{"location":"manipulation/","text":"Manipulating Colors Once a Color object is created, you have access to all the color channels. Color channels can be read individually or extracted all at once. Getting and setting color channels is flexible and easy, allowing for intuitive access. Reading Coordinates There are various ways to read the current values of color coordinates. Channel properties can be read directly by indexing the color object with the channel name. >>> color = Color ( \"orange\" ) >>> color [ 'red' ] 1.0 color = Color(\"orange\") color['red'] Edit Share Run Cancel The object can also be indexed with numerical numbers and even use slicing to set or get multiple values. Color objects can also be iterated. >>> color = Color ( \"orange\" ) >>> color [ 0 ] 1.0 >>> color [: - 1 ] [1.0, 0.6470588235294118, 0.0] >>> [ c for c in color ] [1.0, 0.6470588235294118, 0.0, 1.0] color = Color(\"orange\") color[0] color[:-1] [c for c in color] Edit Share Run Cancel For more advanced get operations, the get method can be used. Channels can be accessed with normal strings: >>> color = Color ( \"orange\" ) >>> color . get ( \"green\" ) 0.6470588235294118 color = Color(\"orange\") color.get(\"green\") Edit Share Run Cancel They can also be used to access values of the current color in terms of other color space properties. Simply specify the color space and the color property. >>> color = Color ( \"orange\" ) >>> color . get ( \"lch.chroma\" ) 83.76900622509224 color = Color(\"orange\") color.get(\"lch.chroma\") Edit Share Run Cancel Modifying Coordinates As with coordinate retrieval, a number of ways can be used set coordinates as well Channel properties can be modified directly by using the channel. Here we modify red by adjusting its green property and get an orange hued color. >>> color = Color ( \"red\" ) >>> color [ 'green' ] = 0.5 >>> color . to_string () rgb(255 127.5 0) color = Color(\"red\") color['green'] = 0.5 color.to_string() Edit Share Run Cancel When doing so, keep in mind that the internal coordinates are being adjusted, so their scale and range is dictated by the given color space in which they relate to. sRGB, for example, specifies its color channels in the range of [0, 1], though it should allow extended ranges if required. Additionally, colors channels can be set with numerical indexes. Slicing can even be used to set multiple channels in one operation: >>> c1 = Color ( 'red' ) >>> c2 = Color ( 'blue' ) >>> c1 [:] = c2 [:] >>> c1 , c2 (color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1)) c1 = Color('red') c2 = Color('blue') c1[:] = c2[:] c1, c2 Edit Share Run Cancel More advanced set operations can be performed by using the set method. As these methods return a reference to the current class, multiple set operations can be chained together. Chaining multiple set operations together, we can transform white to rgb ( 0 127 . 5 255 ) . >>> Color ( \"white\" ) . set ( \"red\" , 0 ) . set ( \"green\" , 0.5 ) color(srgb 0 0.5 1 / 1) Color(\"white\").set(\"red\", 0).set(\"green\", 0.5) Edit Share Run Cancel Functions can also be used to modify a channel property. This allows us to do more complex set operations, like providing easing functions. Here we do a relative adjustment of the green channel and transform the color pink to rgb ( 255 249 . 6 203 ) . >>> Color ( \"pink\" ) . set ( 'green' , lambda g : g * 1.3 ) color(srgb 1 0.97882 0.79608 / 1) Color(\"pink\").set('green', lambda g: g * 1.3) Edit Share Run Cancel And just like the get method, we can use this method to set color channels in other color spaces. >>> c = Color ( \"red\" ) >>> c color(srgb 1 0 0 / 1) >>> c . set ( 'hsl.hue' , lambda x : x + 180 ) color(srgb 0 1 1 / 1) c = Color(\"red\") c c.set('hsl.hue', lambda x: x + 180) Edit Share Run Cancel Notes on Modifying Coordinates in Other Spaces As previously mentioned, coordinates in other spaces can be modified with the set function. Here we alter the color blue by editing the hue channel in the CIELCh color space and get rgb (- 63 . 911 91 . 016 - 63 . 173 ) . Keep in mind that the colors are being converted to the specified space under the hood, set, and then converted back, so if you have multiple operations to apply in a given color space, it may be more efficient to convert to that space, apply the set operations directly, and then convert back. >>> Color ( \"blue\" ) . set ( 'lch.hue' , 130 ) color(srgb -0.25063 0.35692 -0.24774 / 1) Color(\"blue\").set('lch.hue', 130) Edit Share Run Cancel When setting a color in another color space, the final value is subject to any rounding errors that may occur in the round trip to and from the specified color space. Also, depending on the transform functions of the spaces involved, and whether the original color is on the edge of its own gamut, this can lead to a color going slightly out of gamut, and if one of the spaces involved in the conversion doesn't handle out of gamut colors with sensible values, you may get something unexpected back. Consider the following example comparing the modification of an HSL color in HWB vs Oklab. >>> Color ( 'hsl(0 0 % 50% )' ) . set ( 'hwb.blackness' , 0 ) . set ( 'hwb.whiteness' , 100 ) color(--hsl none 0 1 / 1) >>> Color ( 'hsl(0 0 % 50% )' ) . set ( 'oklab.lightness' , 1 ) color(--hsl 223.91 -1.3211 1 / 1) >>> Color ( 'hsl(0 0 % 50% )' ) . set ( 'oklab.lightness' , 1 ) . convert ( 'srgb' )[:] [0.9999999929041132, 1.0000000085633445, 1.0000000512914544, 1.0] Color('hsl(0 0% 50%)').set('hwb.blackness', 0).set('hwb.whiteness', 100) Color('hsl(0 0% 50%)').set('oklab.lightness', 1) Color('hsl(0 0% 50%)').set('oklab.lightness', 1).convert('srgb')[:] Edit Share Run Cancel The above example cleanly converts between HSL and HWB as the conversion between these two is much more precise, but the Oklab example is not quite as precise and returns a color with a saturation that is way out of bounds. This is partly because the Oklab max whiteness isn't exactly 1 , but more like ~0.999... , The HSL model doesn't really represent out of gamut colors in a logical way and, in this case, creates a color with a negative saturation. It looks worse than it really is as when we convert it to sRGB, we see it is barely off. None of this is a bug, it is just the nature of the algorithms we are using to convert, the precision of the floats, and the slight rounding errors that occur when using floating-point arithmetic , etc. Undefined Values Colors in general can sometimes have undefined channels. This can actually happen in a number of ways. Channels can naturally be undefined under certain situations as defined by the color space. For instance, spaces with hues will have powerless hues when the color is achromatic. This can occur if saturation or chroma is zero, or when a color has no lightness, etc. If a hue is manually defined to an achromatic color hue is considered defined, though that value will still be powerless during conversion. But lets considered an achromatic color in a rectangular color space being converted to a cylindrical color space with hue. During the conversion process, there is nothing to suggest to the algorithm what the hue should be. For instance, if saturation is zero, one could argue the hue should be 0 , but that is actually a red hue, and achromatic colors have no hue. In the end, no hue is actually satisfactory, so an undefined hue is applied. >>> color = Color ( 'white' ) . convert ( 'hsl' ) >>> color [:] [nan, 0.0, 1.0, 1.0] color = Color('white').convert('hsl') color[:] Edit Share Run Cancel When specifying raw data, and an insufficient amount of channel data is provided, the missing channels will be assumed as undefined, the exception is that alpha channel which is assumed to be 1 unless explicitly defined or explicitly set as undefined. >>> Color ( 'srgb' , [ 1 ])[:] [1.0, nan, nan, 1.0] >>> Color ( 'srgb' , [ 1 , 0 , 0 ], NaN )[:] [1.0, 0.0, 0.0, nan] Color('srgb', [1])[:] Color('srgb', [1, 0, 0], NaN)[:] Edit Share Run Cancel Undefined values can also occur when a user specifies a channel with the none keyword in CSS syntax. This can also be done in raw color data by directly passing float ( 'nan' ) \u2013 the provided NaN constant is essentially an alias for this. One may question why such a thing would ever be desired, but this can be quite useful when interpolating as undefined channels will not be interpolated. It can be thought of as a way to mask off channels. Checkout the Interpolation section in the documentation to learn more. >>> from coloraide import NaN >>> color = Color ( \"srgb\" , [ 0.3 , NaN , 0.4 ]) >>> color [:] [0.3, nan, 0.4, 1.0] >>> color = Color ( 'rgb(30% none 40%)' ) >>> color [:] [0.3, nan, 0.4, 1.0] from coloraide import NaN color = Color(\"srgb\", [0.3, NaN, 0.4]) color[:] color = Color('rgb(30% none 40%)') color[:] Edit Share Run Cancel Lastly, a user can use the mask method which is a quick way to set one or multiple channels as undefined. Additionally, it returns a clone leaving the original untouched by default. >>> Color ( 'white' )[:] [1.0, 1.0, 1.0, 1.0] >>> Color ( 'white' ) . mask ([ 'red' , 'green' ])[:] [nan, nan, 1.0, 1.0] Color('white')[:] Color('white').mask(['red', 'green'])[:] Edit Share Run Cancel The alpha channel can also be masked: >>> Color ( 'white' ) . mask ( 'alpha' )[ - 1 ] nan Color('white').mask('alpha')[-1] Edit Share Run Cancel You can also do inverse masks, or masks that apply to every channel not specified. >>> c = Color ( 'white' ) . mask ( 'blue' , invert = True ) >>> c [:] [nan, nan, 1.0, nan] c = Color('white').mask('blue', invert=True) c[:] Edit Share Run Cancel Checking for Undefined Values As previously mentioned, a color channel can be undefined for a number of reasons. And in cases such as interpolation, undefined values can even be useful. On the other hand, sometimes an undefined value may need to be handled special. Undefined values are represented as the float value NaN . And since NaN values are not numbers \u2013 hence the name \"not a number\" \u2013 they don't quite work the same as normal numbers. They don't contribute to math operations like add, multiply, and divide. Any math operation performed with a NaN will simply yield NaN . NaN values are essentially infectious. At first glance, the behavior of NaN values can seem confusing, but it is actually pretty intuitive. If we define a color with an undefined channel, and try to add to that value, what should we get? In reality, if the value is undefined, how could we possibly add to it? The only sane answer is to return NaN again. >>> color = Color ( 'color(srgb 1 none 1)' ) >>> color [ 'green' ] + 0.5 nan color = Color('color(srgb 1 none 1)') color['green'] + 0.5 Edit Share Run Cancel Because a NaN may cause surprising results, it can be useful to check if a hue (or any channel) is NaN before applying certain operations where NaN may be undesirable, especially if the color potentially came from an unknown source.To make checking for NaN s easy, the convenience function is_nan has been made available. You can simply give is_nan the property you wish to check, and it will return either return True or False . >>> Color ( 'hsl(none 0 % 100% )' ) . is_nan ( 'hue' ) True Color('hsl(none 0% 100%)').is_nan('hue') Edit Share Run Cancel This is equivalent to using the math library and comparing the value directly: >>> import math >>> math . isnan ( Color ( 'hsl(none 0 % 100% )' )[ 'hue' ]) True import math math.isnan(Color('hsl(none 0% 100%)')['hue']) Edit Share Run Cancel .info-container {display: inline-block;}","title":"Manipulating Colors"},{"location":"manipulation/#manipulating-colors","text":"Once a Color object is created, you have access to all the color channels. Color channels can be read individually or extracted all at once. Getting and setting color channels is flexible and easy, allowing for intuitive access.","title":"Manipulating Colors"},{"location":"manipulation/#reading-coordinates","text":"There are various ways to read the current values of color coordinates. Channel properties can be read directly by indexing the color object with the channel name. >>> color = Color ( \"orange\" ) >>> color [ 'red' ] 1.0 color = Color(\"orange\") color['red'] Edit Share Run Cancel The object can also be indexed with numerical numbers and even use slicing to set or get multiple values. Color objects can also be iterated. >>> color = Color ( \"orange\" ) >>> color [ 0 ] 1.0 >>> color [: - 1 ] [1.0, 0.6470588235294118, 0.0] >>> [ c for c in color ] [1.0, 0.6470588235294118, 0.0, 1.0] color = Color(\"orange\") color[0] color[:-1] [c for c in color] Edit Share Run Cancel For more advanced get operations, the get method can be used. Channels can be accessed with normal strings: >>> color = Color ( \"orange\" ) >>> color . get ( \"green\" ) 0.6470588235294118 color = Color(\"orange\") color.get(\"green\") Edit Share Run Cancel They can also be used to access values of the current color in terms of other color space properties. Simply specify the color space and the color property. >>> color = Color ( \"orange\" ) >>> color . get ( \"lch.chroma\" ) 83.76900622509224 color = Color(\"orange\") color.get(\"lch.chroma\") Edit Share Run Cancel","title":"Reading Coordinates"},{"location":"manipulation/#modifying-coordinates","text":"As with coordinate retrieval, a number of ways can be used set coordinates as well Channel properties can be modified directly by using the channel. Here we modify red by adjusting its green property and get an orange hued color. >>> color = Color ( \"red\" ) >>> color [ 'green' ] = 0.5 >>> color . to_string () rgb(255 127.5 0) color = Color(\"red\") color['green'] = 0.5 color.to_string() Edit Share Run Cancel When doing so, keep in mind that the internal coordinates are being adjusted, so their scale and range is dictated by the given color space in which they relate to. sRGB, for example, specifies its color channels in the range of [0, 1], though it should allow extended ranges if required. Additionally, colors channels can be set with numerical indexes. Slicing can even be used to set multiple channels in one operation: >>> c1 = Color ( 'red' ) >>> c2 = Color ( 'blue' ) >>> c1 [:] = c2 [:] >>> c1 , c2 (color(srgb 0 0 1 / 1), color(srgb 0 0 1 / 1)) c1 = Color('red') c2 = Color('blue') c1[:] = c2[:] c1, c2 Edit Share Run Cancel More advanced set operations can be performed by using the set method. As these methods return a reference to the current class, multiple set operations can be chained together. Chaining multiple set operations together, we can transform white to rgb ( 0 127 . 5 255 ) . >>> Color ( \"white\" ) . set ( \"red\" , 0 ) . set ( \"green\" , 0.5 ) color(srgb 0 0.5 1 / 1) Color(\"white\").set(\"red\", 0).set(\"green\", 0.5) Edit Share Run Cancel Functions can also be used to modify a channel property. This allows us to do more complex set operations, like providing easing functions. Here we do a relative adjustment of the green channel and transform the color pink to rgb ( 255 249 . 6 203 ) . >>> Color ( \"pink\" ) . set ( 'green' , lambda g : g * 1.3 ) color(srgb 1 0.97882 0.79608 / 1) Color(\"pink\").set('green', lambda g: g * 1.3) Edit Share Run Cancel And just like the get method, we can use this method to set color channels in other color spaces. >>> c = Color ( \"red\" ) >>> c color(srgb 1 0 0 / 1) >>> c . set ( 'hsl.hue' , lambda x : x + 180 ) color(srgb 0 1 1 / 1) c = Color(\"red\") c c.set('hsl.hue', lambda x: x + 180) Edit Share Run Cancel Notes on Modifying Coordinates in Other Spaces As previously mentioned, coordinates in other spaces can be modified with the set function. Here we alter the color blue by editing the hue channel in the CIELCh color space and get rgb (- 63 . 911 91 . 016 - 63 . 173 ) . Keep in mind that the colors are being converted to the specified space under the hood, set, and then converted back, so if you have multiple operations to apply in a given color space, it may be more efficient to convert to that space, apply the set operations directly, and then convert back. >>> Color ( \"blue\" ) . set ( 'lch.hue' , 130 ) color(srgb -0.25063 0.35692 -0.24774 / 1) Color(\"blue\").set('lch.hue', 130) Edit Share Run Cancel When setting a color in another color space, the final value is subject to any rounding errors that may occur in the round trip to and from the specified color space. Also, depending on the transform functions of the spaces involved, and whether the original color is on the edge of its own gamut, this can lead to a color going slightly out of gamut, and if one of the spaces involved in the conversion doesn't handle out of gamut colors with sensible values, you may get something unexpected back. Consider the following example comparing the modification of an HSL color in HWB vs Oklab. >>> Color ( 'hsl(0 0 % 50% )' ) . set ( 'hwb.blackness' , 0 ) . set ( 'hwb.whiteness' , 100 ) color(--hsl none 0 1 / 1) >>> Color ( 'hsl(0 0 % 50% )' ) . set ( 'oklab.lightness' , 1 ) color(--hsl 223.91 -1.3211 1 / 1) >>> Color ( 'hsl(0 0 % 50% )' ) . set ( 'oklab.lightness' , 1 ) . convert ( 'srgb' )[:] [0.9999999929041132, 1.0000000085633445, 1.0000000512914544, 1.0] Color('hsl(0 0% 50%)').set('hwb.blackness', 0).set('hwb.whiteness', 100) Color('hsl(0 0% 50%)').set('oklab.lightness', 1) Color('hsl(0 0% 50%)').set('oklab.lightness', 1).convert('srgb')[:] Edit Share Run Cancel The above example cleanly converts between HSL and HWB as the conversion between these two is much more precise, but the Oklab example is not quite as precise and returns a color with a saturation that is way out of bounds. This is partly because the Oklab max whiteness isn't exactly 1 , but more like ~0.999... , The HSL model doesn't really represent out of gamut colors in a logical way and, in this case, creates a color with a negative saturation. It looks worse than it really is as when we convert it to sRGB, we see it is barely off. None of this is a bug, it is just the nature of the algorithms we are using to convert, the precision of the floats, and the slight rounding errors that occur when using floating-point arithmetic , etc.","title":"Modifying Coordinates"},{"location":"manipulation/#undefined-values","text":"Colors in general can sometimes have undefined channels. This can actually happen in a number of ways. Channels can naturally be undefined under certain situations as defined by the color space. For instance, spaces with hues will have powerless hues when the color is achromatic. This can occur if saturation or chroma is zero, or when a color has no lightness, etc. If a hue is manually defined to an achromatic color hue is considered defined, though that value will still be powerless during conversion. But lets considered an achromatic color in a rectangular color space being converted to a cylindrical color space with hue. During the conversion process, there is nothing to suggest to the algorithm what the hue should be. For instance, if saturation is zero, one could argue the hue should be 0 , but that is actually a red hue, and achromatic colors have no hue. In the end, no hue is actually satisfactory, so an undefined hue is applied. >>> color = Color ( 'white' ) . convert ( 'hsl' ) >>> color [:] [nan, 0.0, 1.0, 1.0] color = Color('white').convert('hsl') color[:] Edit Share Run Cancel When specifying raw data, and an insufficient amount of channel data is provided, the missing channels will be assumed as undefined, the exception is that alpha channel which is assumed to be 1 unless explicitly defined or explicitly set as undefined. >>> Color ( 'srgb' , [ 1 ])[:] [1.0, nan, nan, 1.0] >>> Color ( 'srgb' , [ 1 , 0 , 0 ], NaN )[:] [1.0, 0.0, 0.0, nan] Color('srgb', [1])[:] Color('srgb', [1, 0, 0], NaN)[:] Edit Share Run Cancel Undefined values can also occur when a user specifies a channel with the none keyword in CSS syntax. This can also be done in raw color data by directly passing float ( 'nan' ) \u2013 the provided NaN constant is essentially an alias for this. One may question why such a thing would ever be desired, but this can be quite useful when interpolating as undefined channels will not be interpolated. It can be thought of as a way to mask off channels. Checkout the Interpolation section in the documentation to learn more. >>> from coloraide import NaN >>> color = Color ( \"srgb\" , [ 0.3 , NaN , 0.4 ]) >>> color [:] [0.3, nan, 0.4, 1.0] >>> color = Color ( 'rgb(30% none 40%)' ) >>> color [:] [0.3, nan, 0.4, 1.0] from coloraide import NaN color = Color(\"srgb\", [0.3, NaN, 0.4]) color[:] color = Color('rgb(30% none 40%)') color[:] Edit Share Run Cancel Lastly, a user can use the mask method which is a quick way to set one or multiple channels as undefined. Additionally, it returns a clone leaving the original untouched by default. >>> Color ( 'white' )[:] [1.0, 1.0, 1.0, 1.0] >>> Color ( 'white' ) . mask ([ 'red' , 'green' ])[:] [nan, nan, 1.0, 1.0] Color('white')[:] Color('white').mask(['red', 'green'])[:] Edit Share Run Cancel The alpha channel can also be masked: >>> Color ( 'white' ) . mask ( 'alpha' )[ - 1 ] nan Color('white').mask('alpha')[-1] Edit Share Run Cancel You can also do inverse masks, or masks that apply to every channel not specified. >>> c = Color ( 'white' ) . mask ( 'blue' , invert = True ) >>> c [:] [nan, nan, 1.0, nan] c = Color('white').mask('blue', invert=True) c[:] Edit Share Run Cancel","title":"Undefined Values"},{"location":"manipulation/#checking-for-undefined-values","text":"As previously mentioned, a color channel can be undefined for a number of reasons. And in cases such as interpolation, undefined values can even be useful. On the other hand, sometimes an undefined value may need to be handled special. Undefined values are represented as the float value NaN . And since NaN values are not numbers \u2013 hence the name \"not a number\" \u2013 they don't quite work the same as normal numbers. They don't contribute to math operations like add, multiply, and divide. Any math operation performed with a NaN will simply yield NaN . NaN values are essentially infectious. At first glance, the behavior of NaN values can seem confusing, but it is actually pretty intuitive. If we define a color with an undefined channel, and try to add to that value, what should we get? In reality, if the value is undefined, how could we possibly add to it? The only sane answer is to return NaN again. >>> color = Color ( 'color(srgb 1 none 1)' ) >>> color [ 'green' ] + 0.5 nan color = Color('color(srgb 1 none 1)') color['green'] + 0.5 Edit Share Run Cancel Because a NaN may cause surprising results, it can be useful to check if a hue (or any channel) is NaN before applying certain operations where NaN may be undesirable, especially if the color potentially came from an unknown source.To make checking for NaN s easy, the convenience function is_nan has been made available. You can simply give is_nan the property you wish to check, and it will return either return True or False . >>> Color ( 'hsl(none 0 % 100% )' ) . is_nan ( 'hue' ) True Color('hsl(none 0% 100%)').is_nan('hue') Edit Share Run Cancel This is equivalent to using the math library and comparing the value directly: >>> import math >>> math . isnan ( Color ( 'hsl(none 0 % 100% )' )[ 'hue' ]) True import math math.isnan(Color('hsl(none 0% 100%)')['hue']) Edit Share Run Cancel .info-container {display: inline-block;}","title":"Checking for Undefined Values"},{"location":"playground/","text":"Notebook Submit Cancel .info-container {display: inline-block;}","title":"Playground"},{"location":"strings/","text":"String Output ColorAide supports serializing colors in the same formats that it accepts as inputs. This includes all CSS formats for the associated color spaces, and if a color space is not supported in CSS, the color ( space ... ) format. ColorAide exposes various options to allow users to serialize in the form they most prefer. Convert to Strings Colors can be serialized to strings by using the to_string method. The color class will convert the current color into one of the many of CSS formats supported for the given color space. >>> Color ( \"srgb\" , [ 0.5 , 0 , 1 ], 0.3 ) . to_string () rgb(127.5 0 255 / 0.3) Color(\"srgb\", [0.5, 0, 1], 0.3).to_string() Edit Share Run Cancel There are a number of options that are common among all color spaces, but there are also some color space specific options. We will only cover the color spaces shipped with ColorAide. It is possible to write a color space plugin that uses very different options. Common Options All color spaces support the following parameters. Alpha alpha is set to None by default and controls whether the alpha channel is shown in the serialized output. When in the default state, alpha will only be shown if the alpha channel has a value less than 100%, but if set to True , alpha will always be shown. Setting to False will cause alpha to be ignored in the output. Precision precision controls the precision of the output values. The name is a little misleading as it will actually adjust the precision and scale of the values. The default is 5. In some cases, like the sRGB hex output, precision may not really come into play as hex values are rounded to the nearest whole number. >>> Color ( \"rgb(30.3456 % 75% 100%)\" ) . to_string ( precision = 5 , percent = True ) rgb(30.346% 75% 100%) >>> Color ( \"rgb(30.3456 % 75% 100%)\" ) . to_string ( precision = 4 , percent = True ) rgb(30.35% 75% 100%) >>> Color ( \"rgb(30.3456 % 75% 100%)\" ) . to_string ( precision = 3 , percent = True ) rgb(30.3% 75% 100%) >>> Color ( \"rgb(30.3456 % 75% 100%)\" ) . to_string ( precision = 2 , percent = True ) rgb(30% 75% 100%) >>> Color ( \"rgb(30.3456 % 75% 100%)\" ) . to_string ( precision = 1 , percent = True ) rgb(30% 80% 100%) Color(\"rgb(30.3456% 75% 100%)\").to_string(precision=5, percent=True) Color(\"rgb(30.3456% 75% 100%)\").to_string(precision=4, percent=True) Color(\"rgb(30.3456% 75% 100%)\").to_string(precision=3, percent=True) Color(\"rgb(30.3456% 75% 100%)\").to_string(precision=2, percent=True) Color(\"rgb(30.3456% 75% 100%)\").to_string(precision=1, percent=True) Edit Share Run Cancel Providing a precision of 0 will simply enable simple rounding to the nearest whole number. >>> Color ( \"rgb(30.3456 % 75% 100%)\" ) . to_string ( precision = 0 , percent = True ) rgb(30% 75% 100%) Color(\"rgb(30.3456% 75% 100%)\").to_string(precision=0, percent=True) Edit Share Run Cancel Providing a precision of -1 is a special input that will give the highest precision that can be given. Not particularly helpful except to look at the raw decimal number. >>> Color ( \"rgb(30.3456 % 75% 100%)\" ) . to_string ( precision =- 1 , percent = True ) rgb(30.345600000000001017497197608463466167449951171875% 75% 100%) Color(\"rgb(30.3456% 75% 100%)\").to_string(precision=-1, percent=True) Edit Share Run Cancel One note though, format of the value matters. Here we output in the range of 0 - 255. We can see that a precision of 1 , in this case, can throw the color out of gamut. So remember to use a sufficient precision for what you are doing and the values you are working in. >>> Color ( \"rgb(30.3456 % 75% 100%)\" ) . to_string ( precision = 1 ) rgb(80 200 300) Color(\"rgb(30.3456% 75% 100%)\").to_string(precision=1) Edit Share Run Cancel Fit fit is set to True by default and controls whether colors are fit to their gamut or not. Some color spaces are technically unbounded, so no fitting may occur in those color spaces. Additionally, some color formats, like sRGB hex, are always fitted (regardless of this setting) as they must fit into the gamut or they cannot be translated. >>> Color ( \"rgb(30 % 105% 0%)\" ) . to_string () rgb(109.21 255 60.975) >>> Color ( \"rgb(30 % 105% 0%)\" ) . to_string ( fit = False ) rgb(76.5 267.75 0) Color(\"rgb(30% 105% 0%)\").to_string() Color(\"rgb(30% 105% 0%)\").to_string(fit=False) Edit Share Run Cancel Additionally, we can choose a different fitting method by passing fit the name of the method we would like. >>> Color ( \"rgb(30 % 105% 0%)\" ) . to_string () rgb(109.21 255 60.975) >>> Color ( \"rgb(30 % 105% 0%)\" ) . to_string ( fit = 'clip' ) rgb(76.5 255 0) Color(\"rgb(30% 105% 0%)\").to_string() Color(\"rgb(30% 105% 0%)\").to_string(fit='clip') Edit Share Run Cancel Color color , for some color spaces, is the default output, but for others this format can be explicitly requested by setting color to True . If set to True , this will take priority over other format options. >>> Color ( \"rebeccapurple\" ) . to_string ( color = True ) color(srgb 0.4 0.2 0.6) Color(\"rebeccapurple\").to_string(color=True) Edit Share Run Cancel None Colors that have undefined channels are internally represented with NaN . On output, these can be displayed as none per the most recent CSS spec. These are very new, so most browsers do not support them. This is disabled by default until a time when this behavior is common enough. NaN values will not survive fitting unless a color channel is naturally undefined. An example would be a hue when the color has saturation or chroma set to zero. >>> Color ( 'hsl(none 0 % 30% )' ) . to_string ( none = True ) hsl(none 0% 30%) Color('hsl(none 0% 30%)').to_string(none=True) Edit Share Run Cancel The one exception is that legacy rgb() , rgba() , hsl() , and hsla() forms (comma separated) do not support none per the CSS spec. Format Specific Options These options may occur in various color spaces depending on the CSS output format. Comma In CSS, there are a few color spaces that allow a comma format: srgb and hsl . ColorAide allows these to be read in and to be output in their legacy comma format. These are the only formats that ship with comma support. If we want commas, we can force the comma syntax by setting comma to True . This can alter some color space output in other subtle ways. As the comma format is the old legacy approach, when sRGB has commas enabled, it will use rgba instead of rgb . If using the non-comma syntax, rgb is always used, even when the color has transparency. >>> Color ( \"rgb(30 75 100 / 20%)\" ) . to_string ( comma = True ) rgba(30, 75, 100, 0.2) Color(\"rgb(30 75 100 / 20%)\").to_string(comma=True) Edit Share Run Cancel Percent RGB, CIELab, CIELCh, Oklab, and OkLCh can receive and output colors with optional percents for certain channels. This will output those channels in the range of [0%,100%] instead of their usual numeric value. >>> Color ( \"rebeccapurple\" ) . to_string ( percent = True ) rgb(40% 20% 60%) >>> Color ( \"rebeccapurple\" ) . convert ( 'lab' ) . to_string ( percent = True ) lab(32.393% 30.738% -38.153%) Color(\"rebeccapurple\").to_string(percent=True) Color(\"rebeccapurple\").convert('lab').to_string(percent=True) Edit Share Run Cancel sRGB Specific Options These options are currently specific to the sRGB color space. Hex sRGB can output colors to a hex format which is unique compared to HSL and others. Simply enable hex . >>> Color ( \"rebeccapurple\" ) . to_string ( hex = True ) #663399 Color(\"rebeccapurple\").to_string(hex=True) Edit Share Run Cancel Upper You can force hex to output in uppercase. >>> Color ( \"red\" ) . to_string ( hex = True ) #ff0000 >>> Color ( \"red\" ) . to_string ( hex = True , upper = True ) #FF0000 Color(\"red\").to_string(hex=True) Color(\"red\").to_string(hex=True, upper=True) Edit Share Run Cancel Compress When converting to the hex color format, a color can be compressed in certain cases. Enabling compress will compress a hex color if possible. >>> Color ( \"#11223388\" ) . to_string ( hex = True ) #11223388 >>> Color ( \"#11223388\" ) . to_string ( hex = True , compress = True ) #1238 Color(\"#11223388\").to_string(hex=True) Color(\"#11223388\").to_string(hex=True, compress=True) Edit Share Run Cancel Names sRGB can also output color names. If a color evaluates to a hex code which also evaluates to a color name in the internal CSS color name mapping, then a color name will be returned. If the color does not match a color name, it will fallback to whatever the other options dictate. >>> Color ( \"#663399\" ) . to_string ( names = True ) rebeccapurple Color(\"#663399\").to_string(names=True) Edit Share Run Cancel .info-container {display: inline-block;}","title":"String Output"},{"location":"strings/#string-output","text":"ColorAide supports serializing colors in the same formats that it accepts as inputs. This includes all CSS formats for the associated color spaces, and if a color space is not supported in CSS, the color ( space ... ) format. ColorAide exposes various options to allow users to serialize in the form they most prefer.","title":"String Output"},{"location":"strings/#convert-to-strings","text":"Colors can be serialized to strings by using the to_string method. The color class will convert the current color into one of the many of CSS formats supported for the given color space. >>> Color ( \"srgb\" , [ 0.5 , 0 , 1 ], 0.3 ) . to_string () rgb(127.5 0 255 / 0.3) Color(\"srgb\", [0.5, 0, 1], 0.3).to_string() Edit Share Run Cancel There are a number of options that are common among all color spaces, but there are also some color space specific options. We will only cover the color spaces shipped with ColorAide. It is possible to write a color space plugin that uses very different options.","title":"Convert to Strings"},{"location":"strings/#common-options","text":"All color spaces support the following parameters.","title":"Common Options"},{"location":"strings/#alpha","text":"alpha is set to None by default and controls whether the alpha channel is shown in the serialized output. When in the default state, alpha will only be shown if the alpha channel has a value less than 100%, but if set to True , alpha will always be shown. Setting to False will cause alpha to be ignored in the output.","title":"Alpha"},{"location":"strings/#precision","text":"precision controls the precision of the output values. The name is a little misleading as it will actually adjust the precision and scale of the values. The default is 5. In some cases, like the sRGB hex output, precision may not really come into play as hex values are rounded to the nearest whole number. >>> Color ( \"rgb(30.3456 % 75% 100%)\" ) . to_string ( precision = 5 , percent = True ) rgb(30.346% 75% 100%) >>> Color ( \"rgb(30.3456 % 75% 100%)\" ) . to_string ( precision = 4 , percent = True ) rgb(30.35% 75% 100%) >>> Color ( \"rgb(30.3456 % 75% 100%)\" ) . to_string ( precision = 3 , percent = True ) rgb(30.3% 75% 100%) >>> Color ( \"rgb(30.3456 % 75% 100%)\" ) . to_string ( precision = 2 , percent = True ) rgb(30% 75% 100%) >>> Color ( \"rgb(30.3456 % 75% 100%)\" ) . to_string ( precision = 1 , percent = True ) rgb(30% 80% 100%) Color(\"rgb(30.3456% 75% 100%)\").to_string(precision=5, percent=True) Color(\"rgb(30.3456% 75% 100%)\").to_string(precision=4, percent=True) Color(\"rgb(30.3456% 75% 100%)\").to_string(precision=3, percent=True) Color(\"rgb(30.3456% 75% 100%)\").to_string(precision=2, percent=True) Color(\"rgb(30.3456% 75% 100%)\").to_string(precision=1, percent=True) Edit Share Run Cancel Providing a precision of 0 will simply enable simple rounding to the nearest whole number. >>> Color ( \"rgb(30.3456 % 75% 100%)\" ) . to_string ( precision = 0 , percent = True ) rgb(30% 75% 100%) Color(\"rgb(30.3456% 75% 100%)\").to_string(precision=0, percent=True) Edit Share Run Cancel Providing a precision of -1 is a special input that will give the highest precision that can be given. Not particularly helpful except to look at the raw decimal number. >>> Color ( \"rgb(30.3456 % 75% 100%)\" ) . to_string ( precision =- 1 , percent = True ) rgb(30.345600000000001017497197608463466167449951171875% 75% 100%) Color(\"rgb(30.3456% 75% 100%)\").to_string(precision=-1, percent=True) Edit Share Run Cancel One note though, format of the value matters. Here we output in the range of 0 - 255. We can see that a precision of 1 , in this case, can throw the color out of gamut. So remember to use a sufficient precision for what you are doing and the values you are working in. >>> Color ( \"rgb(30.3456 % 75% 100%)\" ) . to_string ( precision = 1 ) rgb(80 200 300) Color(\"rgb(30.3456% 75% 100%)\").to_string(precision=1) Edit Share Run Cancel","title":"Precision"},{"location":"strings/#fit","text":"fit is set to True by default and controls whether colors are fit to their gamut or not. Some color spaces are technically unbounded, so no fitting may occur in those color spaces. Additionally, some color formats, like sRGB hex, are always fitted (regardless of this setting) as they must fit into the gamut or they cannot be translated. >>> Color ( \"rgb(30 % 105% 0%)\" ) . to_string () rgb(109.21 255 60.975) >>> Color ( \"rgb(30 % 105% 0%)\" ) . to_string ( fit = False ) rgb(76.5 267.75 0) Color(\"rgb(30% 105% 0%)\").to_string() Color(\"rgb(30% 105% 0%)\").to_string(fit=False) Edit Share Run Cancel Additionally, we can choose a different fitting method by passing fit the name of the method we would like. >>> Color ( \"rgb(30 % 105% 0%)\" ) . to_string () rgb(109.21 255 60.975) >>> Color ( \"rgb(30 % 105% 0%)\" ) . to_string ( fit = 'clip' ) rgb(76.5 255 0) Color(\"rgb(30% 105% 0%)\").to_string() Color(\"rgb(30% 105% 0%)\").to_string(fit='clip') Edit Share Run Cancel","title":"Fit"},{"location":"strings/#color","text":"color , for some color spaces, is the default output, but for others this format can be explicitly requested by setting color to True . If set to True , this will take priority over other format options. >>> Color ( \"rebeccapurple\" ) . to_string ( color = True ) color(srgb 0.4 0.2 0.6) Color(\"rebeccapurple\").to_string(color=True) Edit Share Run Cancel","title":"Color"},{"location":"strings/#none","text":"Colors that have undefined channels are internally represented with NaN . On output, these can be displayed as none per the most recent CSS spec. These are very new, so most browsers do not support them. This is disabled by default until a time when this behavior is common enough. NaN values will not survive fitting unless a color channel is naturally undefined. An example would be a hue when the color has saturation or chroma set to zero. >>> Color ( 'hsl(none 0 % 30% )' ) . to_string ( none = True ) hsl(none 0% 30%) Color('hsl(none 0% 30%)').to_string(none=True) Edit Share Run Cancel The one exception is that legacy rgb() , rgba() , hsl() , and hsla() forms (comma separated) do not support none per the CSS spec.","title":"None"},{"location":"strings/#format-specific-options","text":"These options may occur in various color spaces depending on the CSS output format.","title":"Format Specific Options"},{"location":"strings/#comma","text":"In CSS, there are a few color spaces that allow a comma format: srgb and hsl . ColorAide allows these to be read in and to be output in their legacy comma format. These are the only formats that ship with comma support. If we want commas, we can force the comma syntax by setting comma to True . This can alter some color space output in other subtle ways. As the comma format is the old legacy approach, when sRGB has commas enabled, it will use rgba instead of rgb . If using the non-comma syntax, rgb is always used, even when the color has transparency. >>> Color ( \"rgb(30 75 100 / 20%)\" ) . to_string ( comma = True ) rgba(30, 75, 100, 0.2) Color(\"rgb(30 75 100 / 20%)\").to_string(comma=True) Edit Share Run Cancel","title":"Comma"},{"location":"strings/#percent","text":"RGB, CIELab, CIELCh, Oklab, and OkLCh can receive and output colors with optional percents for certain channels. This will output those channels in the range of [0%,100%] instead of their usual numeric value. >>> Color ( \"rebeccapurple\" ) . to_string ( percent = True ) rgb(40% 20% 60%) >>> Color ( \"rebeccapurple\" ) . convert ( 'lab' ) . to_string ( percent = True ) lab(32.393% 30.738% -38.153%) Color(\"rebeccapurple\").to_string(percent=True) Color(\"rebeccapurple\").convert('lab').to_string(percent=True) Edit Share Run Cancel","title":"Percent"},{"location":"strings/#srgb-specific-options","text":"These options are currently specific to the sRGB color space.","title":"sRGB Specific Options"},{"location":"strings/#hex","text":"sRGB can output colors to a hex format which is unique compared to HSL and others. Simply enable hex . >>> Color ( \"rebeccapurple\" ) . to_string ( hex = True ) #663399 Color(\"rebeccapurple\").to_string(hex=True) Edit Share Run Cancel","title":"Hex"},{"location":"strings/#upper","text":"You can force hex to output in uppercase. >>> Color ( \"red\" ) . to_string ( hex = True ) #ff0000 >>> Color ( \"red\" ) . to_string ( hex = True , upper = True ) #FF0000 Color(\"red\").to_string(hex=True) Color(\"red\").to_string(hex=True, upper=True) Edit Share Run Cancel","title":"Upper"},{"location":"strings/#compress","text":"When converting to the hex color format, a color can be compressed in certain cases. Enabling compress will compress a hex color if possible. >>> Color ( \"#11223388\" ) . to_string ( hex = True ) #11223388 >>> Color ( \"#11223388\" ) . to_string ( hex = True , compress = True ) #1238 Color(\"#11223388\").to_string(hex=True) Color(\"#11223388\").to_string(hex=True, compress=True) Edit Share Run Cancel","title":"Compress"},{"location":"strings/#names","text":"sRGB can also output color names. If a color evaluates to a hex code which also evaluates to a color name in the internal CSS color name mapping, then a color name will be returned. If the color does not match a color name, it will fallback to whatever the other options dictate. >>> Color ( \"#663399\" ) . to_string ( names = True ) rebeccapurple Color(\"#663399\").to_string(names=True) Edit Share Run Cancel .info-container {display: inline-block;}","title":"Names"},{"location":"about/acknowledgments/","text":"Acknowledgments All projects gain help and inspiration from somewhere, and we wanted to document the places in which we we gathered knowledge, ideas, and help. Projects Color.js When we began writing ColorAide, we wanted a simple interface to deal with different colors. We also wanted to support CSS colors which a lot of people are familiar with. We had a number of questions about the CSS spec and stumbled on Color.js , a JavaScript library developed and maintained by the co-authors of the CSS spec. We found Color.js and its authors helped clarify a number of confusing points. Additionally, their library did end up heavily inspiring many aspects of our own API as its approach very much aligned with the direction we had already started down. Culori The Culori library helped inspire the use of cubic splines as interpolation methods. References When researching color vision deficiencies, aside from the usual scientific papers, a couple of sites were found to be quite helpful. daltonlens.org was particularly helpful. As it comes from the perspective of an actual Protan, it provided reviews on various algorithm's and explained in great depth some approaches and why they were preferred over others. ixora.io was another useful site that went into great details specifically about the Vi\u00e9not approach. .info-container {display: inline-block;}","title":"Acknowledgments"},{"location":"about/acknowledgments/#acknowledgments","text":"All projects gain help and inspiration from somewhere, and we wanted to document the places in which we we gathered knowledge, ideas, and help.","title":"Acknowledgments"},{"location":"about/acknowledgments/#projects","text":"","title":"Projects"},{"location":"about/acknowledgments/#colorjs","text":"When we began writing ColorAide, we wanted a simple interface to deal with different colors. We also wanted to support CSS colors which a lot of people are familiar with. We had a number of questions about the CSS spec and stumbled on Color.js , a JavaScript library developed and maintained by the co-authors of the CSS spec. We found Color.js and its authors helped clarify a number of confusing points. Additionally, their library did end up heavily inspiring many aspects of our own API as its approach very much aligned with the direction we had already started down.","title":"Color.js"},{"location":"about/acknowledgments/#culori","text":"The Culori library helped inspire the use of cubic splines as interpolation methods.","title":"Culori"},{"location":"about/acknowledgments/#references","text":"When researching color vision deficiencies, aside from the usual scientific papers, a couple of sites were found to be quite helpful. daltonlens.org was particularly helpful. As it comes from the perspective of an actual Protan, it provided reviews on various algorithm's and explained in great depth some approaches and why they were preferred over others. ixora.io was another useful site that went into great details specifically about the Vi\u00e9not approach. .info-container {display: inline-block;}","title":"References"},{"location":"about/changelog/","text":"Changelog 1.3 ENHANCE : Color vision deficiency filters can now be instantiated with different default methods for severe and anomalous cases. FIX : Fix premultiplication handling when using compose . 1.2 NEW : Add new monotone interpolation method. ENHANCE : Better extrapolation past end of spline. FIX : Small speed up in natural spline calculation. FIX : Fix import that should have been relative, not absolute. 1.1 NEW : Slight refactor of interpolation plugin so that common code does not need to be duplicated, and the interpolate method no longer needs to accept an easing parameter as the plugin class exposes a new ease method to automatically acquire the proper, specified easing function and apply it. NEW : Functions built upon interpolation can now use a new extrapolate parameter to enable extrapolation if interpolation inputs exceed 0 - 1. point will be passed to Interpolator.interpolate un-clamped if extrapolate is enabled. If a particular interpolation plugin needs to do additional work to handle extrapolation, they can check self.extrapolate to know whether extrapolation is enabled. NEW : Implement and provide the following easing functions as described in the CSS Easing Level 1 spec: cubic_bezier , ease , ease_in , ease_out , and ease_in_out . Also provide a simple linear easing function. New : Add natural and catrom cubic spline options for interpolation. The catrom (Catmull-Rom) spline requires the plugin to be registered in order to use it. FIX : Due to floating point math, B-spline could sometimes return an interpolation of fully opaque colors with an imperceptible amount of transparency. If alpha is very close ( 1e-6 ) to being opaque, just round it to opaque. FIX : An easing function's output should not be clamped, only the input, and that only needs to occur on the the outer range of an entire interpolation. 1.0 Stable Release! Checkout migration guide if you were an early adopter. NEW : Bezier interpolation dropped for B-spline which provides much better interpolation. NEW : All new interpolation methods now supports hue fix-ups: shorter , longer , increasing , decreasing , and specified . NEW : Interpolation is now exposed as a plugin to allow for expansion. FIX : Fixed an issue related to premultiplication and undefined alpha channels. 1.0rc1 Plugin Refactor For more flexibility there was one final rework of plugins. Registering requires all plugins to be instantiated before being passed into Color.register , but this allows a user redefine some defaults of certain plugins. coloraide.ColorAll was moved to coloraide.everythng.ColorAll to avoid allocating plugins when they are not desired. In the process, we also renamed a number of plugin classes for consistency and predictability, details found below. NEW : Updated some class names for consistency and predictability. XyY \u2192 xyY , Din99o \u2192 DIN99o , SRGB \u2192 sRGB , and ORGB \u2192 oRGB . Lastly, LCh should be the default casing convention. This convention will be followed unless a spec mentions otherwise. Changes: Lch \u2192 LCh , LchD65 \u2192 LChD65 , Oklch \u2192 OkLCh , Lchuv \u2192 LChuv , Lch99o \u2192 LCh99o , LchChroma \u2192 LChChroma , OklchChroma \u2192 OkLChChroma , and Lchish \u2192 LChish . NEW : Updated migration guide with recent plugin changes. NEW : coloraide.ColorAll renamed and moved to coloraide.everything.ColorAll . This prevents unnecessary inclusion and allocation of objects that are not desired. NEW : Default Color object now only registers bradford CAT by default, all others must be registered separately, or coloraide.everything.Color could be used. NEW : All plugin classes must be instantiated when being registered. This allows some plugins to be instantiated with different defaults. This allows some plugins to be configured with different defaults. # Before change: Color . register ([ Plugin1 , Plugin2 ]) # After change: Color . register ([ Plugin1 (), Plugin2 ( optional_parm = True )]) FIX : Negative luminance is now clamped during contrast calculations. 1.0b3 FIX : Fixed the bad CAT16 matrix for chromatic adaptation. FIX : Small fix related to how CAT plugin classes are defined for better abstraction. FIX : Restrict optional keywords in Color.register() and Color.deregister() to keyword only parameters. 1.0b2 Breaking Changes 1.0b2 only introduces one more last breaking change that was forgotten in 1.0b1. BREAK : Remove filters parameter on new class instantiation. NEW : Added new migration guide to the documentation to help early adopters move to the 1.0 release. NEW : Added HPLuv space described in the HSLuv spec. NEW : Added new color spaces: ACES 2065-1, ACEScg, ACEScc, and ACEScct. NEW : Contrast is now exposed as a plugin to allow for future expansion of approaches. While there is currently only one approach, methods can be selected via the method attribute. NEW : Add new random method for generating a random color for a given color space. 1.0b1 Breaking Changes 1.0b1 introduces a number of breaking changes. As we are very close to releasing the first stable release, we've taken opportunity to address any issues related to speed and usability. While this is unfortunate for early adopters, we feel that in the long run that these changes will make ColorAide a better library. We've also added new a new Bezier interpolation method and added many more color spaces! BREAK : The coloraide.Color object now only registers a subset of the available color spaces and \u2206E algorithms in order to create a lighter default color object. coloraide.ColorAll has been provided for a quick way to get access to all available color spaces and plugins. Generally, it is recommend to subclass Color and register just what is desired. BREAK : Reworked interpolation: interpolate and steps functions are now @classmethod s. This alleviates the awkward handling of interpolating colors greater than 2. Before, the first color always had to be an instance and then the rest had to be fed into that instance, now the the methods can be called from the base class or an instance with all the colors fed in via a list. Only the colors in the list will be evaluated during interpolation. Piecewise object has been removed. stop objects are used to wrap colors to apply a new color stop. easing functions can be supplied in the middle of two colors via the list input. hint function has been provided to simulate CSS color hinting. hint returns an easing function that modifies the midpoint to the specified point between two color stops. A new bezier interpolation method has been provided. When using interpolate , steps , or mix the interpolation style can be changed via the method parameter. bezier and linear are available with linear being the default. BREAK : Dictionary input/output now matches the following format (where alpha is optional): { \"space\" : \"name\" , \"coords\" : [ 0 , 0 , 0 ], \"alpha\" : 1 } This allows for quicker processing and less complexity dealing with channel names and aliases. BREAK : The CSS Level 4 Color spec has accepted our proposed changes to the gamut mapping algorithm. With this change, the oklch-chroma gamut mapping algorithm is now compliant with the CSS spec, and css-color-4 is no longer needed. If you were experimenting with css-color-4 , please use oklch-chroma instead. The algorithm is faster and does not have the color banding issue that css-color-4 had, and it is now exactly the same as the CSS spec. BREAK : New breaking change. Refactor of Space plugins. Space plugins are no longer instantiated which cuts down on overhead lending to better performance. BOUNDS and CHANNEL_NAMES attributes were combined into one attribute called CHANNELS which serves the same purpose as the former attributes. Space plugins also no longer need to define channel property accessors as those are handled through CHANNELS in a more generic way. This is a breaking change for any custom plugins. Additionally, the Space plugin's null_adjust method has been renamed as normalize matching its functionality and usage in regards to the Color object. It no longer accepts color coordinates and alpha channel coordinates separately, but will receive them as a single list and return them as such. BREAK : Color 's fit and clip methods now perform the operation in place, modifying the current color directly. The in_place parameter has been removed. To create a new color when performing these actions, simply clone the color first: color . clone () . clip () . BREAK : Remove deprecated dynamic properties which helps to increase speed by removing overhead on class property access. BREAK : Remove deprecated dynamic properties which helps to increase speed by removing overhead on class property access. Use indexing instead: color['red'] or color[0] . BREAK : Remove deprecated coords() method. Use indexing and slices instead: color[:-1] . NEW : Update lch() , lab() , oklch() , and oklab() to optionally support percentages for lightness, chroma, a, and b. Lightness is no longer enforced to be a percentage in the CSS syntax and these spaces will serialize as a number by default instead. Optionally, these forms can force a percentage output via the to_string method when using the percentage option. Percent ranges roughly correspond with the Display P3 gamut per the CSS specification. Additionally, CSS color spaces using the color() format as an input will translate using these same ranges if the channels are percentages. hue will also be respected and treated as 0 - 360 when using a percentage. Non-CSS color spaces will also respect their defined ranges when using percentages in the color() form. NEW : Add silent option to deregister so that if a proper category is specified, and the plugin does not exit, the operation will not throw an error. NEW : Add new color spaces: display-p3-linear , a98-rgb-linear , rec2020-linear , prophoto-rgb-linear , and rec2100pq , hsi , rlab , hunter-lab , xyy , prismatic , orgb , cmy , cmyk , ipt , and igpgtg . NEW : Monochromatic color harmony must also be performed in a cylindrical color space to make achromatic detection easier. This means all color harmonies now must be performed under a cylindrical color space. NEW : Use Lab D65 for \u2206E 2000, \u2206E 76, \u2206E HyAB, Euclidean distance, and LCh D65 for LCh Chroma gamut mapping. Lab D65 is far more commonly used for the aforementioned \u2206E methods. LCh Chroma gamut mapping, which uses \u2206E 2000 needs to use the same D65 white point to avoid wasting conversion time. FIX : Better handling of monochromatic harmonies that are near white or black. FIX : Small fix to steps \u2206E logic. 0.18.1 FIX : Fix issue where when generating steps with a max_delta_e , the \u2206E was reduced too much causing additional, unnecessary steps along with longer processing time. 0.18.0 NEW : Allow dictionary input to use aliases in the dictionary. FIX : If too many channels are given to a color space via raw data, ensure the operation fails. FIX : Sync up achromatic logic of the Okhsl and Okhsv normalize function with the actual conversion algorithm. FIX : Regression that caused cat16 not to work due to a misnamed variable. 0.17.0 Interpolations Are Now Premultiplied ColorAide has moved to make premultiplication the default for interpolation methods such as mix , steps , and interpolate . The aim is to provide more accurate interpolation when using transparent colors. In cases where premultiplication is not desired, it can be disabled by setting it to False . There are real reasons to do so as it may be desirous to mimic an old implementation that has always used naive interpolation of transparent colors. Additionally, in the past, premultiplication was not really documented as it had not been fully tested. Premultiplication is now covered in the documentation. NEW : All mixing/interpolation methods will use premultiply = True by default. NEW : Allow aliases in interpolation's progress mappings. FIX : Fix premultiplication when alpha is undefined. FIX : Fix some potential issues in some matrix math logic. FIX : Piecewise () object didn't default all the non-required parameters to None as documented. 0.16.0 Deprecations In interest of speed, and due to the overhead inflicted on every class attribute access, we've decided to deprecate dynamic properties. This includes dynamic color properties (e.g. Color.red ) and dynamic \u2206E methods (e.g. Color.delta_e_2000() ). As far as color channel coordinate access is concerned, we've reworked a faster more useful approach. \u2206E already has a suitable replacement and will be the only approach moving forward. Use of delta_e_<method> is deprecated. Users should use the already available delta_e(color, method=name) approach when using non-default \u2206E methods. Color channel access has changed. Dynamic channel properties have been deprecated. Usage of Color.coords() has also been deprecated. All channels can now easily be accessed with indexing. Color.get() and Color.set() have not changed. You can index with numbers: Color[0] . You can index with channel names: Color['red'] . You can slice to get specific color coordinates: Color[:-1] . You can get all coordinates: Color[:] or list(Color) . You can even iterate coordinates: [c for c in Color] . Indexing also supports assignment: Color[0] = 1 or Color[:3] = [1, 1, 1] . Please consider updating usage to utilize the suggested approaches. The aforementioned methods will be removed sometime before the 1.0 release. NEW : Color objects are now indexable and channels can be retrieved using either numbers or strings, e.g., Color [ 0 ] or Color [ 'red' ] . Slicing and assignments via slicing are also supported: Color1 [:] = Color2 [:] . NEW : Color.coords() , dynamic color properties, and dynamic \u2206E methods are all deprecated. NEW : Input method names for distancing, gamut mapping, compositing, and space methods are now case sensitive. There were inconsistencies in some places, so it was opted to make all case sensitive. NEW : The ability to create color harmonies has been added via the new harmony() method. Also, the default color space used to calculate color harmonies can be overridden by the class property HARMONY . NEW : Add new support for filters added via the filter() method. Filters include the W3C Filter Effects Level 1 and color vision deficiency simulation. NEW : Some performance enhancements in conversions. NEW : Chromatic adaptation is now exposed as a plugin. New CAT plugins can be created externally and registered. FIX : Okhsl and Okhsv handling of achromatic values during conversion. 0.15.1 FIX : Fix an issue related to matching colors in a buffer at a given offset. 0.15.0 Warning No changes in the public API have changed, but type annotations have. If you were importing type annotations, you will have to update them. Also, if any undocumented math related methods were accessed (for plugins or otherwise) they've been moved to coloraide.algebra NEW : A number of performance improvements. NEW : Regenerate all matrices with our own matrix tools so that there is consistency between precision of pre-generated matrices and on-the-fly matrix generation. Reduces some noise in a few color space transforms. NEW : Changes to type annotations. Mutable<type> , where type is either Matrix , Vector , or Array , are simply known as <type> . Types previously specified as <type> , where type is either Matrix , Vector , or Array , are now known as <type>Like . The types are expected to be mutable lists, anything else is noted as \"like\". NEW : All matrix and math utilities have been moved to coloraide.algebra . FIX : Fix rare issue where precision adjustment could fail. FIX : Fix matrix divide logic when dividing a number or vector by a matrix. There are no actual usage of these cases in the code but they were fixed in case they are used in the future. 0.14.1 FIX : Fix bug related to parsing strings without full matching. 0.14.0 Note No changes should break existing color space plugins. Moved objects and references are still also available in old locations, and new functionality is implemented in such a way as to not break existing plugins, but plugins should be updated as sometime before the 1.0 release, such legacy access will be removed. NEW : Faster parsing. Instead of parsing color(space ...) each time it is evaluated for a different color space, parse it generically and then associate it with a given registered color space. If a color spaces wishes to opt out of the color(space ...) input format, the space should set COLOR_FORMAT to False . This means there is no need to call super.match() when overriding Color.match() to ensure support for the color(space ...) format as it will be handled unless COLOR_FORMAT is turned off. DEFAULT_MATCH usage should also be discontinued as it now does nothing. NEW : Other speed optimizations. NEW : All CSS parsing and serialization is now contained in a single module at coloraide.css . This simplifies the current color space classes greatly when it comes to supporting CSS specific formats. NEW : Move our white space mapping to the cat module as it makes more sense there. NEW : GamutBound , GamutUnbound , and associated flags are now contained under coloraide.gamut.bounds . NEW : normalize will also remove masked values to properly adjust the color. FIX : Compositing and blending should not \"fit\" colors before applying, it is only specified that the range should be clamped at the end of blending. FIX : Fix issue where a subclassed Color() object could not recognize the base class or other subclasses. 0.13.0 NEW : Add new closest method that takes a list of colors and returns the one that is closet to the calling color object. NEW : CSS color syntax no longer allows for forgiving channels in color() . This means that when a channel other than alpha is omitted, we will no longer treat them as undefined. Instead, the color will simply fail to parse. Raw data channels also must specify all channels. NEW : Clamp lower bounds of chroma at the channel level. NEW : coloraide.spaces.WHITES is now a 2 deep dictionary containing both 2\u02da and 10\u02da observer variants of white points. NEW : Color space plugins now specify WHITE as a tuple with the x and y chromaticity coordinates. This allows a space to specify unknown white points if desired. FIX : Fix longer hue interpolation when \u03b81 - \u03b82 = 0 . The spec is wrong in this case, and interpolation should still occur the long way around instead of keeping hue constant. FIX : Reduce redundancy in some CSS parsing patterns. FIX : Minor performance improvements. FIX : Legacy rgb() , rgba() , hsl() , and hsla() comma separated forms in CSS do not support none , only the new space separated forms do. FIX : Ensure py.typed is installed with package so that type annotations work properly. 0.12.0 NEW : Add a gamut mapping variant that matches the CSS Color Level 4 spec. FIX : Fix precision rounding issue. 0.11.0 Breaking Changes Prior to 0.11.0, if you specified a cylindrical space directly, ColorAide would normalize undefined hues the same way that the conversion algorithm did. In the below case, saturation is zero, so the hue was declared undefined. >>> Color ( 'hsl(270 0 % 50% )' ) color ( -- hsl none 0 0.5 / 1 ) We should not have been doing this, and it made some cases of interpolation a bit confusing. It is no longer done as the hues are in fact specified by the user, even if they are powerless in relation to contributing to the rendered color. When a cylindrical color is converted or if a user declares the channel as undefined with none or some other way, then the channel will be declared undefined, because in these cases, they truly are. >>> Color ( 'white' ) . convert ( 'hsl' ) color ( -- hsl none 0 1 / 1 ) >>> Color ( 'color(--hsl none 0 0.5)' ) color ( -- hsl none 0 0.5 ) If you are working directly in a cylindrical color space and ever wish to force the normalization of color hues as undefined when the color meets the usual requirements as specified by the color space's current rules, just call normalize on the color and it will apply the same logic that occurs during the conversion process. >>> Color ( 'hsl(270 0 % 50% )' ) . normalize () color ( -- hsl none 0 0.5 / 1 ) If you relied on commas in CSS forms that did not support them, this behavior is no longer allowed. It was thought that CSS may consider allowing comma formats in formats like hwb() , etc., and it was considered, but ultimately the decision was to avoid adding such support. We've updated our input and output support to reflect this. Color spaces can always be subclassed and have this support added back, if desired, but will not be shipped as the default anymore. The D65 form of Luv and LChuv is now the only supported Luv based color spaces by default now. D50 Luv and LChuv have been dropped and luv and lchuv now refers to the D65 version. In most places, the D65 is the most common used white space as most monitors are calibrated for this white point. The only reason CIELab and CIELCh are D50 by default is that CSS requires it. Anyone interested in using Luv with a different white point can easily subclass the current Luv and create a new plugin color space that uses the new white point. Renamed DIN99o LCh identifier to the short name of lch99o . NEW : ColorAide now only ships with the D65 version Luv and LChuv as D65, in most places is the expected white space. Now, the identifier luv and lchuv will refer to the D65 version of the respective color spaces. D50 variants are no longer available by default. NEW : Add the HSLuv color space. NEW : DIN99o LCh identifier was renamed from din99o-lch to lch99o . To use in CSS color() form, use --lch99o . NEW : Refactor chroma reduction/ MINDE logic to cut processing time in half. Gamut mapping results remain very similar. NEW : Be more strict with CSS inputs and outputs. hwb() , lab() , lch() , oklab() , and oklch() no longer support comma string formats. NEW : Officially drop Python 3.6 support. FIX : Do not assume user defined, powerless hues as undefined. If they are defined by the user, they should be respected, even if they have no effect on the current color. This helps to ensure interpolations acts in an unsurprising way. If a user manually specifies the channel with none , then it will be considered undefined, or if the color goes through a conversion to a space that cannot pick an appropriate hue, they will also be undefined. 0.10.0 NEW : Switch back to using CIELCh for gamut mapping ( lch-chroma ). There are still some edge cases that make oklch-chroma less desirable. FIX : Fix an issue where when attempting to generate steps some \u2206E distance apart, the maximum step range was not respected and could result in large hangs. 0.9.0 Breaking Changes Custom gamut mapping plugins no longer return coordinates and require the method to update the passed in color. NEW : Improved, faster gamut mapping algorithm. NEW : FIT plugins (gamut mapping) no longer return coordinates but should modify the color passed in. NEW : Expose default interpolation space as a class variable that can be controlled when creating a custom class via class inheritance. NEW : Colors can now directly specify the \u2206E method that is used when interpolating color steps and using max_delta_e via the new delta_e argument. If the delta_e parameter is omitted, the color object's default \u2206E method will be used. NEW : Oklab is now the default interpolation color space. NEW : Interpolation will now avoid fitting colors that are out of gamut unless the color space cannot represent out of gamut colors. Currently, all of the RGB colors ( srgb , display-p3 , etc.) all support extended ranges, but the HSL, HWB, and HSV color models for srgb (including spaces such as okhsl and okhsv ) do not support extended ranges and will still be gamut mapped. FIX : Remove some incorrect code from the gamut mapping algorithm that would shortcut the mapping to reduce chroma to zero. 0.8.0 Breaking Changes The use of xyz as the color space name has been changed in favor of xyz-d65 . This better matches the CSS specification. As we are still in a prerelease state, we have not provided any backwards compatibility. CSS color input strings in the form color ( xyz x y z ) will continue to be accepted as CSS will allow both the xyz and the xyz-d65 identifier, but output serialization will prefer the color ( xyz-d65 x y z ) form as using xyz is an alias for xyz-d65 . Again, this breaking change only affects operations where the color space \"name\" is used in the API to specify usage of a specific color space in order to create a color, convert, mutate, interpolate, etc. Color ( 'red' ) . convert ( 'xyz' ) # Bad Color ( 'red' ) . convert ( 'xyz-d65' ) # Okay Color ( 'xyz' [ 0 , 0 , 0 ]) # Bad Color ( 'xyz-d65' [ 0 , 0 , 0 ]) # Okay Color ( 'red' ) . interpolate ( 'green' , space = 'xyz' ) # Bad Color ( 'red' ) . interpolate ( 'green' , space = 'xyz-d65' ) # Okay # No changes to CSS inputs Color ( 'color(xyz 0 0 0)' ) # Okay Color ( 'color(xyz-d65 0 0 0)' ) # Okay NEW : Add the official CSS syntax oklab() and oklch() for the Oklab and OkLCh color spaces respectively. NEW : Custom fit plugin's fit method now allows additional kwargs in its signature. The API will accept kwargs allowing a custom fit plugin to have configurable parameters. None of the current built-in plugins provide additional parameters, but this is provided in case it is found useful in the future. NEW : XYZ D65 space will now be known as xyz-d65 , not xyz . Per the CSS specification, we also ensure XYZ D65 color space serializes as xyz-d65 instead of the alias xyz . CSS input string format will still accept the xyz identifier as this is defined in the CSS specification as an alias for xyz-d65 , but when serializing a color to a string, the xyz-d65 will be used as the preferred form. NEW : By default, gamut mapping is done with oklch-chroma which matches the current CSS specification. If desired, the old way ( lch-chroma ) can manually be specified or set as the default by subclassing Color and setting FIT to lch-chroma . FIX : Ensure the convert method's fit parameter is typed appropriately and is documented correctly. 0.7.0 NEW : Formally expose srgb-linear as a valid color space. NEW : Distance plugins and gamut mapping plugins now use classmethod instead of staticmethod . This allows for inheritance from other classes and the overriding of plugin options included as class members. NEW : Tweak LCh chroma gamut mapping threshold. FIX : Issue where it is possible, when generating steps, to cause a shift in midpoint of colors if exceeding the maximum steps. Ensure that no stops are injected if injecting a stop between every color would exceed the max steps. 0.6.0 NEW : Update spaces such that they provide a single conversion point which simplifies color space API and centralizes all conversion logic allowing us to pull chromatic adaptation out of spaces. NEW : color() output format never uses percent when serializing, but will optionally accept percent as input. NEW : Slight refactor of color space, delta E, and gamut mapping plugins. All now specify there name via the property NAME instead of methods space() for color spaces and name() for other plugins. NEW : Restructure source structure by flattening out some directories and better organizing source files. This changes some import paths. NEW : Color spaces do not specify alpha in CHANNEL_NAMES as the alpha name cannot be changed. NEW : Color space objects do not need a constant to track number of color channels. 0.5.0 NEW : Add type annotations and refactor code to better accommodate the type annotations. Public API not really affected, but a bit of the internals have changed. FIX : Fix issue where compose , if backdrop list is empty, would not respect in_place option. 0.4.0 NEW : Officially support Python 3.10. NEW : Slightly more accurate Oklab matrix calculation. NEW : Exported dictionary form can now be used as a normal color input in functions like contrast , interpolate , etc. NEW : Color objects will accept a dictionary mapping when alpha is not specified. When this occurs, alpha is assumed to be 1 . FIX : Fix an object compare issue. 0.3.0 Breaking Changes XYZ changes below will cause breakage as xyz now refers to XYZ with D65 instead of D50. Also, CSS identifiers changed per the recent specification change. NEW : When calling dir() on Color() , ensure dynamic methods are in the list. NEW : xyz now refers to XYZ D65. CSS color () function now specifies D65 color as either color ( xyz x y z ) or color ( xyz-d65 x y z ) . XYZ D50 is now specified as color ( xyz-D50 x y z ) . NEW : Add CIELuv and CIELCh uv D65 variants. 0.2.0 NEW : Provide dedicated clip method. clip is still a specifiable method under the fit function. It is also a reserved name under fit and cannot be overridden via plugins or be removed. NEW : Add more conversion shortcuts to OK family of color spaces. FIX : Fix an issue where the shorter conversion path wasn't always taken as convert couldn't find to/from methods if the color space name had - in it. 0.1.0 First non-alpha prerelease. Notable changes from the last alpha listed below. Breaking Changes There are some breaking changes if coming from the previous alpha releases. All sRGB cylindrical spaces' non-hue data ranges are no longer scaled to 0 - 100, but use 0 - 1. Hue ranges have not changed. NEW : By accepting HSL, HSV, and HWB as non-hue channels as 0-100, we do lose a little precision, so for 1.0, we are switching to accepting and returning raw data values between 0 - 1. We've kept hue between 0 - 360 as it is easier for users to deal with hues between 0 - 360. Doing this will also match the new color spaces Okhsl and Okhsv that need to be kept at 0 - 1 to get better rounding. NEW : We do not currently restrict percentages anymore in color () functions. There is no hard rules that we need to at this time and no currently specified spaces that do this in the CSS specification. This is relaxed for now until some future time when it becomes clear we must. NEW : New okhsl and okhsv color space. NEW : All color channels now accept the none keyword to specify an undefined channel. They can also optionally output CSS strings with the keyword. NEW : Interpolation will return an undefined channel if both colors have that channel set to undefined. NEW : Provide a way to dump a color object to a simple dictionary and have the Color() object accept that dictionary to recreate the color object. NEW : Provide cat16 chromatic adaptation. NEW : Add normalize method to force channel normalization (evaluation of channels and setting undefined as appropriate). NEW : Interpolated and composited colors will normalize undefined channels when returning a color. NEW : Jzazbz now also has an alias for az and bz channels as a and b respectively. FIX : Fix an attribute \"get\" issue where attributes that were not present on the Color() object appeared to be present when using hasattr() . FIX : More accurate Oklab matrix. .info-container {display: inline-block;}","title":"Changelog"},{"location":"about/changelog/#changelog","text":"","title":"Changelog"},{"location":"about/changelog/#13","text":"ENHANCE : Color vision deficiency filters can now be instantiated with different default methods for severe and anomalous cases. FIX : Fix premultiplication handling when using compose .","title":"1.3"},{"location":"about/changelog/#12","text":"NEW : Add new monotone interpolation method. ENHANCE : Better extrapolation past end of spline. FIX : Small speed up in natural spline calculation. FIX : Fix import that should have been relative, not absolute.","title":"1.2"},{"location":"about/changelog/#11","text":"NEW : Slight refactor of interpolation plugin so that common code does not need to be duplicated, and the interpolate method no longer needs to accept an easing parameter as the plugin class exposes a new ease method to automatically acquire the proper, specified easing function and apply it. NEW : Functions built upon interpolation can now use a new extrapolate parameter to enable extrapolation if interpolation inputs exceed 0 - 1. point will be passed to Interpolator.interpolate un-clamped if extrapolate is enabled. If a particular interpolation plugin needs to do additional work to handle extrapolation, they can check self.extrapolate to know whether extrapolation is enabled. NEW : Implement and provide the following easing functions as described in the CSS Easing Level 1 spec: cubic_bezier , ease , ease_in , ease_out , and ease_in_out . Also provide a simple linear easing function. New : Add natural and catrom cubic spline options for interpolation. The catrom (Catmull-Rom) spline requires the plugin to be registered in order to use it. FIX : Due to floating point math, B-spline could sometimes return an interpolation of fully opaque colors with an imperceptible amount of transparency. If alpha is very close ( 1e-6 ) to being opaque, just round it to opaque. FIX : An easing function's output should not be clamped, only the input, and that only needs to occur on the the outer range of an entire interpolation.","title":"1.1"},{"location":"about/changelog/#10","text":"Stable Release! Checkout migration guide if you were an early adopter. NEW : Bezier interpolation dropped for B-spline which provides much better interpolation. NEW : All new interpolation methods now supports hue fix-ups: shorter , longer , increasing , decreasing , and specified . NEW : Interpolation is now exposed as a plugin to allow for expansion. FIX : Fixed an issue related to premultiplication and undefined alpha channels.","title":"1.0"},{"location":"about/changelog/#10rc1","text":"Plugin Refactor For more flexibility there was one final rework of plugins. Registering requires all plugins to be instantiated before being passed into Color.register , but this allows a user redefine some defaults of certain plugins. coloraide.ColorAll was moved to coloraide.everythng.ColorAll to avoid allocating plugins when they are not desired. In the process, we also renamed a number of plugin classes for consistency and predictability, details found below. NEW : Updated some class names for consistency and predictability. XyY \u2192 xyY , Din99o \u2192 DIN99o , SRGB \u2192 sRGB , and ORGB \u2192 oRGB . Lastly, LCh should be the default casing convention. This convention will be followed unless a spec mentions otherwise. Changes: Lch \u2192 LCh , LchD65 \u2192 LChD65 , Oklch \u2192 OkLCh , Lchuv \u2192 LChuv , Lch99o \u2192 LCh99o , LchChroma \u2192 LChChroma , OklchChroma \u2192 OkLChChroma , and Lchish \u2192 LChish . NEW : Updated migration guide with recent plugin changes. NEW : coloraide.ColorAll renamed and moved to coloraide.everything.ColorAll . This prevents unnecessary inclusion and allocation of objects that are not desired. NEW : Default Color object now only registers bradford CAT by default, all others must be registered separately, or coloraide.everything.Color could be used. NEW : All plugin classes must be instantiated when being registered. This allows some plugins to be instantiated with different defaults. This allows some plugins to be configured with different defaults. # Before change: Color . register ([ Plugin1 , Plugin2 ]) # After change: Color . register ([ Plugin1 (), Plugin2 ( optional_parm = True )]) FIX : Negative luminance is now clamped during contrast calculations.","title":"1.0rc1"},{"location":"about/changelog/#10b3","text":"FIX : Fixed the bad CAT16 matrix for chromatic adaptation. FIX : Small fix related to how CAT plugin classes are defined for better abstraction. FIX : Restrict optional keywords in Color.register() and Color.deregister() to keyword only parameters.","title":"1.0b3"},{"location":"about/changelog/#10b2","text":"Breaking Changes 1.0b2 only introduces one more last breaking change that was forgotten in 1.0b1. BREAK : Remove filters parameter on new class instantiation. NEW : Added new migration guide to the documentation to help early adopters move to the 1.0 release. NEW : Added HPLuv space described in the HSLuv spec. NEW : Added new color spaces: ACES 2065-1, ACEScg, ACEScc, and ACEScct. NEW : Contrast is now exposed as a plugin to allow for future expansion of approaches. While there is currently only one approach, methods can be selected via the method attribute. NEW : Add new random method for generating a random color for a given color space.","title":"1.0b2"},{"location":"about/changelog/#10b1","text":"Breaking Changes 1.0b1 introduces a number of breaking changes. As we are very close to releasing the first stable release, we've taken opportunity to address any issues related to speed and usability. While this is unfortunate for early adopters, we feel that in the long run that these changes will make ColorAide a better library. We've also added new a new Bezier interpolation method and added many more color spaces! BREAK : The coloraide.Color object now only registers a subset of the available color spaces and \u2206E algorithms in order to create a lighter default color object. coloraide.ColorAll has been provided for a quick way to get access to all available color spaces and plugins. Generally, it is recommend to subclass Color and register just what is desired. BREAK : Reworked interpolation: interpolate and steps functions are now @classmethod s. This alleviates the awkward handling of interpolating colors greater than 2. Before, the first color always had to be an instance and then the rest had to be fed into that instance, now the the methods can be called from the base class or an instance with all the colors fed in via a list. Only the colors in the list will be evaluated during interpolation. Piecewise object has been removed. stop objects are used to wrap colors to apply a new color stop. easing functions can be supplied in the middle of two colors via the list input. hint function has been provided to simulate CSS color hinting. hint returns an easing function that modifies the midpoint to the specified point between two color stops. A new bezier interpolation method has been provided. When using interpolate , steps , or mix the interpolation style can be changed via the method parameter. bezier and linear are available with linear being the default. BREAK : Dictionary input/output now matches the following format (where alpha is optional): { \"space\" : \"name\" , \"coords\" : [ 0 , 0 , 0 ], \"alpha\" : 1 } This allows for quicker processing and less complexity dealing with channel names and aliases. BREAK : The CSS Level 4 Color spec has accepted our proposed changes to the gamut mapping algorithm. With this change, the oklch-chroma gamut mapping algorithm is now compliant with the CSS spec, and css-color-4 is no longer needed. If you were experimenting with css-color-4 , please use oklch-chroma instead. The algorithm is faster and does not have the color banding issue that css-color-4 had, and it is now exactly the same as the CSS spec. BREAK : New breaking change. Refactor of Space plugins. Space plugins are no longer instantiated which cuts down on overhead lending to better performance. BOUNDS and CHANNEL_NAMES attributes were combined into one attribute called CHANNELS which serves the same purpose as the former attributes. Space plugins also no longer need to define channel property accessors as those are handled through CHANNELS in a more generic way. This is a breaking change for any custom plugins. Additionally, the Space plugin's null_adjust method has been renamed as normalize matching its functionality and usage in regards to the Color object. It no longer accepts color coordinates and alpha channel coordinates separately, but will receive them as a single list and return them as such. BREAK : Color 's fit and clip methods now perform the operation in place, modifying the current color directly. The in_place parameter has been removed. To create a new color when performing these actions, simply clone the color first: color . clone () . clip () . BREAK : Remove deprecated dynamic properties which helps to increase speed by removing overhead on class property access. BREAK : Remove deprecated dynamic properties which helps to increase speed by removing overhead on class property access. Use indexing instead: color['red'] or color[0] . BREAK : Remove deprecated coords() method. Use indexing and slices instead: color[:-1] . NEW : Update lch() , lab() , oklch() , and oklab() to optionally support percentages for lightness, chroma, a, and b. Lightness is no longer enforced to be a percentage in the CSS syntax and these spaces will serialize as a number by default instead. Optionally, these forms can force a percentage output via the to_string method when using the percentage option. Percent ranges roughly correspond with the Display P3 gamut per the CSS specification. Additionally, CSS color spaces using the color() format as an input will translate using these same ranges if the channels are percentages. hue will also be respected and treated as 0 - 360 when using a percentage. Non-CSS color spaces will also respect their defined ranges when using percentages in the color() form. NEW : Add silent option to deregister so that if a proper category is specified, and the plugin does not exit, the operation will not throw an error. NEW : Add new color spaces: display-p3-linear , a98-rgb-linear , rec2020-linear , prophoto-rgb-linear , and rec2100pq , hsi , rlab , hunter-lab , xyy , prismatic , orgb , cmy , cmyk , ipt , and igpgtg . NEW : Monochromatic color harmony must also be performed in a cylindrical color space to make achromatic detection easier. This means all color harmonies now must be performed under a cylindrical color space. NEW : Use Lab D65 for \u2206E 2000, \u2206E 76, \u2206E HyAB, Euclidean distance, and LCh D65 for LCh Chroma gamut mapping. Lab D65 is far more commonly used for the aforementioned \u2206E methods. LCh Chroma gamut mapping, which uses \u2206E 2000 needs to use the same D65 white point to avoid wasting conversion time. FIX : Better handling of monochromatic harmonies that are near white or black. FIX : Small fix to steps \u2206E logic.","title":"1.0b1"},{"location":"about/changelog/#0181","text":"FIX : Fix issue where when generating steps with a max_delta_e , the \u2206E was reduced too much causing additional, unnecessary steps along with longer processing time.","title":"0.18.1"},{"location":"about/changelog/#0180","text":"NEW : Allow dictionary input to use aliases in the dictionary. FIX : If too many channels are given to a color space via raw data, ensure the operation fails. FIX : Sync up achromatic logic of the Okhsl and Okhsv normalize function with the actual conversion algorithm. FIX : Regression that caused cat16 not to work due to a misnamed variable.","title":"0.18.0"},{"location":"about/changelog/#0170","text":"Interpolations Are Now Premultiplied ColorAide has moved to make premultiplication the default for interpolation methods such as mix , steps , and interpolate . The aim is to provide more accurate interpolation when using transparent colors. In cases where premultiplication is not desired, it can be disabled by setting it to False . There are real reasons to do so as it may be desirous to mimic an old implementation that has always used naive interpolation of transparent colors. Additionally, in the past, premultiplication was not really documented as it had not been fully tested. Premultiplication is now covered in the documentation. NEW : All mixing/interpolation methods will use premultiply = True by default. NEW : Allow aliases in interpolation's progress mappings. FIX : Fix premultiplication when alpha is undefined. FIX : Fix some potential issues in some matrix math logic. FIX : Piecewise () object didn't default all the non-required parameters to None as documented.","title":"0.17.0"},{"location":"about/changelog/#0160","text":"Deprecations In interest of speed, and due to the overhead inflicted on every class attribute access, we've decided to deprecate dynamic properties. This includes dynamic color properties (e.g. Color.red ) and dynamic \u2206E methods (e.g. Color.delta_e_2000() ). As far as color channel coordinate access is concerned, we've reworked a faster more useful approach. \u2206E already has a suitable replacement and will be the only approach moving forward. Use of delta_e_<method> is deprecated. Users should use the already available delta_e(color, method=name) approach when using non-default \u2206E methods. Color channel access has changed. Dynamic channel properties have been deprecated. Usage of Color.coords() has also been deprecated. All channels can now easily be accessed with indexing. Color.get() and Color.set() have not changed. You can index with numbers: Color[0] . You can index with channel names: Color['red'] . You can slice to get specific color coordinates: Color[:-1] . You can get all coordinates: Color[:] or list(Color) . You can even iterate coordinates: [c for c in Color] . Indexing also supports assignment: Color[0] = 1 or Color[:3] = [1, 1, 1] . Please consider updating usage to utilize the suggested approaches. The aforementioned methods will be removed sometime before the 1.0 release. NEW : Color objects are now indexable and channels can be retrieved using either numbers or strings, e.g., Color [ 0 ] or Color [ 'red' ] . Slicing and assignments via slicing are also supported: Color1 [:] = Color2 [:] . NEW : Color.coords() , dynamic color properties, and dynamic \u2206E methods are all deprecated. NEW : Input method names for distancing, gamut mapping, compositing, and space methods are now case sensitive. There were inconsistencies in some places, so it was opted to make all case sensitive. NEW : The ability to create color harmonies has been added via the new harmony() method. Also, the default color space used to calculate color harmonies can be overridden by the class property HARMONY . NEW : Add new support for filters added via the filter() method. Filters include the W3C Filter Effects Level 1 and color vision deficiency simulation. NEW : Some performance enhancements in conversions. NEW : Chromatic adaptation is now exposed as a plugin. New CAT plugins can be created externally and registered. FIX : Okhsl and Okhsv handling of achromatic values during conversion.","title":"0.16.0"},{"location":"about/changelog/#0151","text":"FIX : Fix an issue related to matching colors in a buffer at a given offset.","title":"0.15.1"},{"location":"about/changelog/#0150","text":"Warning No changes in the public API have changed, but type annotations have. If you were importing type annotations, you will have to update them. Also, if any undocumented math related methods were accessed (for plugins or otherwise) they've been moved to coloraide.algebra NEW : A number of performance improvements. NEW : Regenerate all matrices with our own matrix tools so that there is consistency between precision of pre-generated matrices and on-the-fly matrix generation. Reduces some noise in a few color space transforms. NEW : Changes to type annotations. Mutable<type> , where type is either Matrix , Vector , or Array , are simply known as <type> . Types previously specified as <type> , where type is either Matrix , Vector , or Array , are now known as <type>Like . The types are expected to be mutable lists, anything else is noted as \"like\". NEW : All matrix and math utilities have been moved to coloraide.algebra . FIX : Fix rare issue where precision adjustment could fail. FIX : Fix matrix divide logic when dividing a number or vector by a matrix. There are no actual usage of these cases in the code but they were fixed in case they are used in the future.","title":"0.15.0"},{"location":"about/changelog/#0141","text":"FIX : Fix bug related to parsing strings without full matching.","title":"0.14.1"},{"location":"about/changelog/#0140","text":"Note No changes should break existing color space plugins. Moved objects and references are still also available in old locations, and new functionality is implemented in such a way as to not break existing plugins, but plugins should be updated as sometime before the 1.0 release, such legacy access will be removed. NEW : Faster parsing. Instead of parsing color(space ...) each time it is evaluated for a different color space, parse it generically and then associate it with a given registered color space. If a color spaces wishes to opt out of the color(space ...) input format, the space should set COLOR_FORMAT to False . This means there is no need to call super.match() when overriding Color.match() to ensure support for the color(space ...) format as it will be handled unless COLOR_FORMAT is turned off. DEFAULT_MATCH usage should also be discontinued as it now does nothing. NEW : Other speed optimizations. NEW : All CSS parsing and serialization is now contained in a single module at coloraide.css . This simplifies the current color space classes greatly when it comes to supporting CSS specific formats. NEW : Move our white space mapping to the cat module as it makes more sense there. NEW : GamutBound , GamutUnbound , and associated flags are now contained under coloraide.gamut.bounds . NEW : normalize will also remove masked values to properly adjust the color. FIX : Compositing and blending should not \"fit\" colors before applying, it is only specified that the range should be clamped at the end of blending. FIX : Fix issue where a subclassed Color() object could not recognize the base class or other subclasses.","title":"0.14.0"},{"location":"about/changelog/#0130","text":"NEW : Add new closest method that takes a list of colors and returns the one that is closet to the calling color object. NEW : CSS color syntax no longer allows for forgiving channels in color() . This means that when a channel other than alpha is omitted, we will no longer treat them as undefined. Instead, the color will simply fail to parse. Raw data channels also must specify all channels. NEW : Clamp lower bounds of chroma at the channel level. NEW : coloraide.spaces.WHITES is now a 2 deep dictionary containing both 2\u02da and 10\u02da observer variants of white points. NEW : Color space plugins now specify WHITE as a tuple with the x and y chromaticity coordinates. This allows a space to specify unknown white points if desired. FIX : Fix longer hue interpolation when \u03b81 - \u03b82 = 0 . The spec is wrong in this case, and interpolation should still occur the long way around instead of keeping hue constant. FIX : Reduce redundancy in some CSS parsing patterns. FIX : Minor performance improvements. FIX : Legacy rgb() , rgba() , hsl() , and hsla() comma separated forms in CSS do not support none , only the new space separated forms do. FIX : Ensure py.typed is installed with package so that type annotations work properly.","title":"0.13.0"},{"location":"about/changelog/#0120","text":"NEW : Add a gamut mapping variant that matches the CSS Color Level 4 spec. FIX : Fix precision rounding issue.","title":"0.12.0"},{"location":"about/changelog/#0110","text":"Breaking Changes Prior to 0.11.0, if you specified a cylindrical space directly, ColorAide would normalize undefined hues the same way that the conversion algorithm did. In the below case, saturation is zero, so the hue was declared undefined. >>> Color ( 'hsl(270 0 % 50% )' ) color ( -- hsl none 0 0.5 / 1 ) We should not have been doing this, and it made some cases of interpolation a bit confusing. It is no longer done as the hues are in fact specified by the user, even if they are powerless in relation to contributing to the rendered color. When a cylindrical color is converted or if a user declares the channel as undefined with none or some other way, then the channel will be declared undefined, because in these cases, they truly are. >>> Color ( 'white' ) . convert ( 'hsl' ) color ( -- hsl none 0 1 / 1 ) >>> Color ( 'color(--hsl none 0 0.5)' ) color ( -- hsl none 0 0.5 ) If you are working directly in a cylindrical color space and ever wish to force the normalization of color hues as undefined when the color meets the usual requirements as specified by the color space's current rules, just call normalize on the color and it will apply the same logic that occurs during the conversion process. >>> Color ( 'hsl(270 0 % 50% )' ) . normalize () color ( -- hsl none 0 0.5 / 1 ) If you relied on commas in CSS forms that did not support them, this behavior is no longer allowed. It was thought that CSS may consider allowing comma formats in formats like hwb() , etc., and it was considered, but ultimately the decision was to avoid adding such support. We've updated our input and output support to reflect this. Color spaces can always be subclassed and have this support added back, if desired, but will not be shipped as the default anymore. The D65 form of Luv and LChuv is now the only supported Luv based color spaces by default now. D50 Luv and LChuv have been dropped and luv and lchuv now refers to the D65 version. In most places, the D65 is the most common used white space as most monitors are calibrated for this white point. The only reason CIELab and CIELCh are D50 by default is that CSS requires it. Anyone interested in using Luv with a different white point can easily subclass the current Luv and create a new plugin color space that uses the new white point. Renamed DIN99o LCh identifier to the short name of lch99o . NEW : ColorAide now only ships with the D65 version Luv and LChuv as D65, in most places is the expected white space. Now, the identifier luv and lchuv will refer to the D65 version of the respective color spaces. D50 variants are no longer available by default. NEW : Add the HSLuv color space. NEW : DIN99o LCh identifier was renamed from din99o-lch to lch99o . To use in CSS color() form, use --lch99o . NEW : Refactor chroma reduction/ MINDE logic to cut processing time in half. Gamut mapping results remain very similar. NEW : Be more strict with CSS inputs and outputs. hwb() , lab() , lch() , oklab() , and oklch() no longer support comma string formats. NEW : Officially drop Python 3.6 support. FIX : Do not assume user defined, powerless hues as undefined. If they are defined by the user, they should be respected, even if they have no effect on the current color. This helps to ensure interpolations acts in an unsurprising way. If a user manually specifies the channel with none , then it will be considered undefined, or if the color goes through a conversion to a space that cannot pick an appropriate hue, they will also be undefined.","title":"0.11.0"},{"location":"about/changelog/#0100","text":"NEW : Switch back to using CIELCh for gamut mapping ( lch-chroma ). There are still some edge cases that make oklch-chroma less desirable. FIX : Fix an issue where when attempting to generate steps some \u2206E distance apart, the maximum step range was not respected and could result in large hangs.","title":"0.10.0"},{"location":"about/changelog/#090","text":"Breaking Changes Custom gamut mapping plugins no longer return coordinates and require the method to update the passed in color. NEW : Improved, faster gamut mapping algorithm. NEW : FIT plugins (gamut mapping) no longer return coordinates but should modify the color passed in. NEW : Expose default interpolation space as a class variable that can be controlled when creating a custom class via class inheritance. NEW : Colors can now directly specify the \u2206E method that is used when interpolating color steps and using max_delta_e via the new delta_e argument. If the delta_e parameter is omitted, the color object's default \u2206E method will be used. NEW : Oklab is now the default interpolation color space. NEW : Interpolation will now avoid fitting colors that are out of gamut unless the color space cannot represent out of gamut colors. Currently, all of the RGB colors ( srgb , display-p3 , etc.) all support extended ranges, but the HSL, HWB, and HSV color models for srgb (including spaces such as okhsl and okhsv ) do not support extended ranges and will still be gamut mapped. FIX : Remove some incorrect code from the gamut mapping algorithm that would shortcut the mapping to reduce chroma to zero.","title":"0.9.0"},{"location":"about/changelog/#080","text":"Breaking Changes The use of xyz as the color space name has been changed in favor of xyz-d65 . This better matches the CSS specification. As we are still in a prerelease state, we have not provided any backwards compatibility. CSS color input strings in the form color ( xyz x y z ) will continue to be accepted as CSS will allow both the xyz and the xyz-d65 identifier, but output serialization will prefer the color ( xyz-d65 x y z ) form as using xyz is an alias for xyz-d65 . Again, this breaking change only affects operations where the color space \"name\" is used in the API to specify usage of a specific color space in order to create a color, convert, mutate, interpolate, etc. Color ( 'red' ) . convert ( 'xyz' ) # Bad Color ( 'red' ) . convert ( 'xyz-d65' ) # Okay Color ( 'xyz' [ 0 , 0 , 0 ]) # Bad Color ( 'xyz-d65' [ 0 , 0 , 0 ]) # Okay Color ( 'red' ) . interpolate ( 'green' , space = 'xyz' ) # Bad Color ( 'red' ) . interpolate ( 'green' , space = 'xyz-d65' ) # Okay # No changes to CSS inputs Color ( 'color(xyz 0 0 0)' ) # Okay Color ( 'color(xyz-d65 0 0 0)' ) # Okay NEW : Add the official CSS syntax oklab() and oklch() for the Oklab and OkLCh color spaces respectively. NEW : Custom fit plugin's fit method now allows additional kwargs in its signature. The API will accept kwargs allowing a custom fit plugin to have configurable parameters. None of the current built-in plugins provide additional parameters, but this is provided in case it is found useful in the future. NEW : XYZ D65 space will now be known as xyz-d65 , not xyz . Per the CSS specification, we also ensure XYZ D65 color space serializes as xyz-d65 instead of the alias xyz . CSS input string format will still accept the xyz identifier as this is defined in the CSS specification as an alias for xyz-d65 , but when serializing a color to a string, the xyz-d65 will be used as the preferred form. NEW : By default, gamut mapping is done with oklch-chroma which matches the current CSS specification. If desired, the old way ( lch-chroma ) can manually be specified or set as the default by subclassing Color and setting FIT to lch-chroma . FIX : Ensure the convert method's fit parameter is typed appropriately and is documented correctly.","title":"0.8.0"},{"location":"about/changelog/#070","text":"NEW : Formally expose srgb-linear as a valid color space. NEW : Distance plugins and gamut mapping plugins now use classmethod instead of staticmethod . This allows for inheritance from other classes and the overriding of plugin options included as class members. NEW : Tweak LCh chroma gamut mapping threshold. FIX : Issue where it is possible, when generating steps, to cause a shift in midpoint of colors if exceeding the maximum steps. Ensure that no stops are injected if injecting a stop between every color would exceed the max steps.","title":"0.7.0"},{"location":"about/changelog/#060","text":"NEW : Update spaces such that they provide a single conversion point which simplifies color space API and centralizes all conversion logic allowing us to pull chromatic adaptation out of spaces. NEW : color() output format never uses percent when serializing, but will optionally accept percent as input. NEW : Slight refactor of color space, delta E, and gamut mapping plugins. All now specify there name via the property NAME instead of methods space() for color spaces and name() for other plugins. NEW : Restructure source structure by flattening out some directories and better organizing source files. This changes some import paths. NEW : Color spaces do not specify alpha in CHANNEL_NAMES as the alpha name cannot be changed. NEW : Color space objects do not need a constant to track number of color channels.","title":"0.6.0"},{"location":"about/changelog/#050","text":"NEW : Add type annotations and refactor code to better accommodate the type annotations. Public API not really affected, but a bit of the internals have changed. FIX : Fix issue where compose , if backdrop list is empty, would not respect in_place option.","title":"0.5.0"},{"location":"about/changelog/#040","text":"NEW : Officially support Python 3.10. NEW : Slightly more accurate Oklab matrix calculation. NEW : Exported dictionary form can now be used as a normal color input in functions like contrast , interpolate , etc. NEW : Color objects will accept a dictionary mapping when alpha is not specified. When this occurs, alpha is assumed to be 1 . FIX : Fix an object compare issue.","title":"0.4.0"},{"location":"about/changelog/#030","text":"Breaking Changes XYZ changes below will cause breakage as xyz now refers to XYZ with D65 instead of D50. Also, CSS identifiers changed per the recent specification change. NEW : When calling dir() on Color() , ensure dynamic methods are in the list. NEW : xyz now refers to XYZ D65. CSS color () function now specifies D65 color as either color ( xyz x y z ) or color ( xyz-d65 x y z ) . XYZ D50 is now specified as color ( xyz-D50 x y z ) . NEW : Add CIELuv and CIELCh uv D65 variants.","title":"0.3.0"},{"location":"about/changelog/#020","text":"NEW : Provide dedicated clip method. clip is still a specifiable method under the fit function. It is also a reserved name under fit and cannot be overridden via plugins or be removed. NEW : Add more conversion shortcuts to OK family of color spaces. FIX : Fix an issue where the shorter conversion path wasn't always taken as convert couldn't find to/from methods if the color space name had - in it.","title":"0.2.0"},{"location":"about/changelog/#010","text":"First non-alpha prerelease. Notable changes from the last alpha listed below. Breaking Changes There are some breaking changes if coming from the previous alpha releases. All sRGB cylindrical spaces' non-hue data ranges are no longer scaled to 0 - 100, but use 0 - 1. Hue ranges have not changed. NEW : By accepting HSL, HSV, and HWB as non-hue channels as 0-100, we do lose a little precision, so for 1.0, we are switching to accepting and returning raw data values between 0 - 1. We've kept hue between 0 - 360 as it is easier for users to deal with hues between 0 - 360. Doing this will also match the new color spaces Okhsl and Okhsv that need to be kept at 0 - 1 to get better rounding. NEW : We do not currently restrict percentages anymore in color () functions. There is no hard rules that we need to at this time and no currently specified spaces that do this in the CSS specification. This is relaxed for now until some future time when it becomes clear we must. NEW : New okhsl and okhsv color space. NEW : All color channels now accept the none keyword to specify an undefined channel. They can also optionally output CSS strings with the keyword. NEW : Interpolation will return an undefined channel if both colors have that channel set to undefined. NEW : Provide a way to dump a color object to a simple dictionary and have the Color() object accept that dictionary to recreate the color object. NEW : Provide cat16 chromatic adaptation. NEW : Add normalize method to force channel normalization (evaluation of channels and setting undefined as appropriate). NEW : Interpolated and composited colors will normalize undefined channels when returning a color. NEW : Jzazbz now also has an alias for az and bz channels as a and b respectively. FIX : Fix an attribute \"get\" issue where attributes that were not present on the Color() object appeared to be present when using hasattr() . FIX : More accurate Oklab matrix. .info-container {display: inline-block;}","title":"0.1.0"},{"location":"about/contributing/","text":"Contributing & Support There are many ways to help support this project, regardless of skills and abilities. If you enjoy this project and want to get involved, consider checking out one of the various ways below. Feel free to get creative, there may be other ways to contribute in which we have not thought of! Become a Sponsor Open source projects take time and money. Help support the project by becoming a sponsor. You can add your support at any tier you feel comfortable with. No amount is too little. We also accept one time contributions via PayPal. GitHub Sponsors PayPal Bug Reports Please read the documentation and search the issue tracker to try and find the answer to your question before posting an issue. When creating an issue on the repository, please provide as much info as possible: Version being used. Operating system. Version of Python. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. The more info provided, the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed. Reviewing Code Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm. Answer Questions in Issues Take time and answer questions and offer suggestions to people who've created issues in the issue tracker. Often people will have questions that you might have an answer for. Or maybe you know how to help them accomplish a specific task they are asking about. Feel free to share your experience to help others out. Pull Requests Pull requests are welcome, and a great way to help fix bugs and add new features. Documentation Improvements A ton of time has been spent not only creating and supporting this tool and related extensions, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the tool and/or extensions by helping to improve the documentation. .info-container {display: inline-block;}","title":"Contributing &amp; Support"},{"location":"about/contributing/#contributing--support","text":"There are many ways to help support this project, regardless of skills and abilities. If you enjoy this project and want to get involved, consider checking out one of the various ways below. Feel free to get creative, there may be other ways to contribute in which we have not thought of!","title":"Contributing &amp; Support"},{"location":"about/contributing/#become-a-sponsor","text":"Open source projects take time and money. Help support the project by becoming a sponsor. You can add your support at any tier you feel comfortable with. No amount is too little. We also accept one time contributions via PayPal. GitHub Sponsors PayPal","title":"Become a Sponsor "},{"location":"about/contributing/#bug-reports","text":"Please read the documentation and search the issue tracker to try and find the answer to your question before posting an issue. When creating an issue on the repository, please provide as much info as possible: Version being used. Operating system. Version of Python. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. The more info provided, the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.","title":"Bug Reports"},{"location":"about/contributing/#reviewing-code","text":"Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.","title":"Reviewing Code"},{"location":"about/contributing/#answer-questions-in-issues","text":"Take time and answer questions and offer suggestions to people who've created issues in the issue tracker. Often people will have questions that you might have an answer for. Or maybe you know how to help them accomplish a specific task they are asking about. Feel free to share your experience to help others out.","title":"Answer Questions in Issues"},{"location":"about/contributing/#pull-requests","text":"Pull requests are welcome, and a great way to help fix bugs and add new features.","title":"Pull Requests"},{"location":"about/contributing/#documentation-improvements","text":"A ton of time has been spent not only creating and supporting this tool and related extensions, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the tool and/or extensions by helping to improve the documentation. .info-container {display: inline-block;}","title":"Documentation Improvements"},{"location":"about/license/","text":"License MIT License Copyright \u00a9 2020 - 2022 Isaac Muse Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. .info-container {display: inline-block;}","title":"License"},{"location":"about/license/#license","text":"MIT License Copyright \u00a9 2020 - 2022 Isaac Muse Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. .info-container {display: inline-block;}","title":"License"},{"location":"about/releases/1.0/","text":"1.0 Migration Notes ColorAide has been a constantly evolving project. As we've pushed for a stable release, the 1.0 milestone was no exception. For any of the early adopters, there are a number of things to be aware of when migrating to 1.0. In this guide, we'll cover the changes most likely to impact users. Plugins Plugins have gone through a number of reworks. In 1.0, we now require all plugins to be registered as instances. Prior to 1.0 plugins were just passed in un-instantiated. Some plugins were used as static classes almost, and some (color spaces) were instantiated on the creation of every color. In 1.0, all plugins are required to be instantiated prior to registration. This gives the user the opportunity to specify any alternative defaults if desired. >>> Color ( 'red' ) . delta_e ( 'blue' , method = 'cmc' ) 114.23012812016573 >>> from coloraide.distance.delta_e_cmc import DECMC >>> class Custom ( Color ): ... DELTA_E = \"cmc\" ... >>> Custom . register ( DECMC ( l = 1 , c = 1 ), overwrite = True ) >>> Custom ( 'red' ) . delta_e ( 'blue' ) 115.77446003768313 Color('red').delta_e('blue', method='cmc') from coloraide.distance.delta_e_cmc import DECMC class Custom(Color): DELTA_E = \"cmc\" Custom.register(DECMC(l=1, c=1), overwrite=True) Custom('red').delta_e('blue') Edit Share Run Cancel Plugin Renames ColorAide had some inconsistencies when it came to some plugin names. For instance, we would use variations of Lch , LCH , etc. This made it more difficult to predict how a plugin was named, and remember it. In this case appropriate casing is usually LCh . All plugins referring to LCh were renamed to be more consistent. Outside of LCh related classes, there were a few additional renames to better match the color space of interest's real name. Old Name New Name Lch LCh LchD65 LChD65 Oklch OkLCh Lchuv LChuv Lch99o LCh99o LchChroma LChChroma OklchChroma OkLChchroma Lchish LChish XyY xyY Din99o DIN99o SRGB sRGB SRGBLinear sRGBLinear ORGB oRGB Default Plugins Over the course of development, we've added a good number of color spaces. With the 1.0 release, it was decided to have the default Color object not register all available color spaces out of the box as the amount of color spaces has grown quite substantially. As not all color spaces are registered by default, \u2206E plugins tied to color spaces no longer registered by default will also not be registered by default. Lastly, since the bradford CAT is the default, it was deemed unnecessary to register all the other CAT plugins by default. With all of that said, all of the exiting plugins are still available and can be included if/when needed. If any of the plugins that are no longer registered by default are needed, there are a couple of options: The recommended way is to just subclass the Color object and cherry pick the plugins that are needed. When classing, all the plugins registered in the base will be copied over to the derived class. Then we can just pass in the instantiated plugins. >>> from coloraide import Color as Base >>> from coloraide.spaces.jzazbz import Jzazbz >>> from coloraide.distance.delta_e_z import DEZ >>> class Color ( Base ): ... ... >>> Color . register ([ Jzazbz (), DEZ ()]) >>> Color ( 'red' ) . convert ( 'jzazbz' ) color(--jzazbz 0.13438 0.11789 0.11188 / 1) >>> Color ( 'red' ) . delta_e ( 'blue' , method = 'jz' ) 0.3396038842016558 from coloraide import Color as Base from coloraide.spaces.jzazbz import Jzazbz from coloraide.distance.delta_e_z import DEZ class Color(Base): ... Color.register([Jzazbz(), DEZ()]) Color('red').convert('jzazbz') Color('red').delta_e('blue', method='jz') Edit Share Run Cancel We also provide a new color object derived from Color that includes all color spaces called ColorAll . This object won't be as light, but will provide quick and easy access to everything ColorAide offers. By default, it registers every plugin. It can be found under coloraide.everything . >>> from coloraide.everything import ColorAll as Color >>> Color ( 'purple' ) . convert ( 'hunter-lab' ) color(--hunter-lab 24.796 50.842 -35.444 / 1) from coloraide.everything import ColorAll as Color Color('purple').convert('hunter-lab') Edit Share Run Cancel Dynamic Properties/Functions and Coordinate Access Prior to 1.0, ColorAide's Color object had color channel properties that would magically mutate based on what the current color space was that the object currently held. While cool, this added overhead to every class attribute access. In an effort to dramatically reduce unnecessary overhead, this feature had to be rethought. Additionally, \u2206E methods were also added dynamically. For instance, if we had the \u2206E 2000 distancing plugin registered, we'd have access to \u2206E via Color.delta_e_2000 or Color . delta_e ( color , method = '2000' ) . Again, the overhead to magically provide these properties the way we were posed the same problem as what was seen with dynamic color channel properties Additionally, the Color object used to have a coords() function to get all the non-alpha color channels. This function was not really problematic, but as we decided a solution for the dynamic properties, it became apparent that we would no longer need such a function. 1.0 removed the overhead of magic dynamic properties and functions. In particular, we decided to approach color channel access in a new and different way. Moving forward, the Color object is now iterable and indexable. Channels can be directly indexed via channel names or numerical indexes. You can even use slices: >>> color = Color ( 'orange' ) >>> color color(srgb 1 0.64706 0 / 1) >>> color [ 'blue' ] 0.0 >>> color [ 0 ] 1.0 >>> color [: - 1 ] [1.0, 0.6470588235294118, 0.0] color = Color('orange') color color['blue'] color[0] color[:-1] Edit Share Run Cancel Color objects are also iterable, so you can just loop them as well, or cast the object as a list. >>> for channel in Color ( 'orange' ): ... print ( channel ) ... 1.0 0.6470588235294118 0.0 1.0 >>> list ( Color ( 'green' )) [0.0, 0.5019607843137255, 0.0, 1.0] for channel in Color('orange'): print(channel) list(Color('green')) Edit Share Run Cancel Setting channels is just as easy and can be done by indexing channels with names, numerical indexes, or even slices. >>> color = Color ( 'transparent' ) >>> color [:] = [ 1 , 0 , 0 , 0.5 ] >>> color color(srgb 1 0 0 / 0.5) color = Color('transparent') color[:] = [1, 0, 0, 0.5] color Edit Share Run Cancel As far as \u2206E methods are concerned, we already had two different ways to approach this, so we simply removed the dynamic functions. To access any of the different \u2206E methods, simply call the generic delta_e function and provide the method . >>> Color ( 'red' ) . delta_e ( 'green' , method = '2000' ) 72.18053591241998 Color('red').delta_e('green', method='2000') Edit Share Run Cancel Gamut Mapping and Clipping During our path to 1.0, we noticed that when performing gamut mapping and clipping, in most cases, we were performing them \"in place\" instead of the default which generated new Color instances. There are times when we occasionally wanted a new instance of the color when fitting a color to its gamut, but that turned out to not be the norm. Generating new instances obviously will create more overhead, and in some cases, such as color mixing, returning a new color opposed to mutating the existing one makes a lot more sense, but with gamut mapping and clipping, for efficiency, we were often forcing \"in place\" operations. 1.0 now does gamut mapping and clipping in place by default. With this change, the in_place parameter is not longer available for fit() and clip() . So, if migrating to 1.0, if you were calling fit() and clip() directly, a few changes will need to be made. If you'd like to do an in place gamut correction, simply call the function. If you'd like to generate a new instance, clone the color first. >>> color1 = Color ( 'display-p3' , [ 1 , 1 , 0 ]) >>> color1 . fit ( 'srgb' ) color(display-p3 0.99859 0.9923 0.32854 / 1) >>> color1 color(display-p3 0.99859 0.9923 0.32854 / 1) >>> color2 = Color ( 'display-p3' , [ 0 , 1 , 0 ]) >>> color3 = color2 . clone () . fit ( 'srgb' ) >>> color2 , color3 (color(display-p3 0 1 0 / 1), color(display-p3 0.45742 0.98328 0.29762 / 1)) color1 = Color('display-p3', [1, 1, 0]) color1.fit('srgb') color1 color2 = Color('display-p3', [0, 1, 0]) color3 = color2.clone().fit('srgb') color2, color3 Edit Share Run Cancel Dictionary Output The dictionary format for input and output as been simplified for the 1.0 release. Prior to 1.0, the Color object used to export color dictionaries with the space name and each channel under an individually named key: { 'space' : 'srgb' , 'r' : 1 , 'g' : 0 , 'b' : 0 , 'alpha' : 1 } This required more overhead, particularly when parsing to handle channel alias and the like. For 1.0, we've streamlined the format to export the data with all color coordinates under coords and the alpha channel still under alpha . This makes streamlines the process of handling dictionaries as inputs and outputting them when requested, in turn, improving performance. >>> d = Color ( 'rebeccapurple' ) . to_dict () >>> d {'space': 'srgb', 'coords': [0.4, 0.2, 0.6], 'alpha': 1.0} >>> Color ( d ) color(srgb 0.4 0.2 0.6 / 1) d = Color('rebeccapurple').to_dict() d Color(d) Edit Share Run Cancel Interpolation Interpolation was an area we were generally unhappy with, so it was majorly overhauled. Prior to 1.0, interpolation could be a bit awkward. Interpolation used to require the first color in the interpolation to be the calling object, and all the rest had to be fed in. Color ( 'red' ) . interpolate ([ 'blue' , 'green' , 'orange' ]) When performing a simple mix, this felt natural and made sense: Color ( 'red' ) . mix ( 'blue' , 0.25 ) But with long chains of colors, this just felt cumbersome. To remedy this, we changed the interpolate and steps methods to @classmethods . We left mix as is since with two colors it feels natural. So moving forward, interpolate and steps will execute interpolations from class methods. >>> Color . interpolate ([ 'red' , 'blue' , 'green' , 'orange' ]) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9db7f5510> >>> Color . steps ([ 'red' , 'blue' , 'green' , 'orange' ], steps = 10 ) [color(srgb 1 0 0 / 1), color(srgb 0.70118 0.31007 0.50198 / 1), color(srgb 0.39631 0.30469 0.76127 / 1), color(srgb 0 0 1 / 1), color(srgb -0.20255 0.35952 0.74044 / 1), color(srgb -0.19845 0.45628 0.46971 / 1), color(srgb 0 0.50196 0 / 1), color(srgb 0.46864 0.56246 0.00026 / 1), color(srgb 0.7411 0.61106 0.00031 / 1), color(srgb 1 0.64706 0 / 1)] Color.interpolate(['red', 'blue', 'green', 'orange']) Color.steps(['red', 'blue', 'green', 'orange'], steps=10) Edit Share Run Cancel This means that you do not have to call the function from an instantiated object, and if you do, the instantiated color that is making the call will not be included in the interpolation. Only the colors in the list are considered during the interpolation. >>> Color ( 'white' ) . interpolate ([ 'red' , 'blue' , 'green' , 'orange' ]) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9db7f7d90> Color('white').interpolate(['red', 'blue', 'green', 'orange']) Edit Share Run Cancel This will make even more sense as we highlight the other changes. Another problem we faced was the awkwardness of color stops and easing functions. Before we used to have a Piecewise object that you'd wrap a channel in to create color stops or inject easing functions and other various behaviors between colors, but it had to be applied on the second color in the chain, and this didn't quite work for the first color. If you wanted to add a stop to the first color, you then had to use a special stop parameter\u2026it was unintuitive. from coloraide import Piecewise Color ( 'red' ) . interpolate ([ 'blue' , Piecewise ( 'orange' , 0.75 , progress = lambda t : t * 3 ), 'purple' ], stop = 0.25 ) In 1.0, we simplified things greatly. Since interpolate and steps now require that all colors must be in the input list if they are to be considered for interpolation, we can process them all in a consistent and more intuitive manner. As before, steps and interpolate allow you to set function parameters to generally control the behavior for the entire interpolation across all colors. You can also still add easing functions via progress which will also affect the entire interpolation by default, but now you can inject easing functions directly between colors which will only be applied between those two colors. >>> Color . interpolate ([ 'red' , lambda t : t * 3 , 'orange' , 'purple' ]) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbf8c790> Color.interpolate(['red', lambda t: t * 3, 'orange', 'purple']) Edit Share Run Cancel You can also directly wrap any color in the list with stop to change the color stop position. Since the first color is now treated like all the other colors, there is no need for the stop function parameter either. >>> from coloraide import stop >>> Color . interpolate ([ stop ( 'red' , 0.25 ), stop ( 'orange' , 0.75 ), 'purple' ]) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbbd0760> from coloraide import stop Color.interpolate([stop('red', 0.25), stop('orange', 0.75), 'purple']) Edit Share Run Cancel And if you are familiar with CSS color hinting, which essentially alters the midpoint between two color stops, we've added a hint function which takes a new relative midpoint and returns a midpoint easing function which essentially acts the same as CSS interpolation hints. >>> from coloraide import hint >>> Color . interpolate ([ 'yellow' , 'pink' ]) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbba4be0> >>> Color . interpolate ([ 'yellow' , hint ( 0.25 ), 'pink' ]) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbba6800> from coloraide import hint Color.interpolate(['yellow', 'pink']) Color.interpolate(['yellow', hint(0.25), 'pink']) Edit Share Run Cancel All of this makes for a less confusing experience when using interpolation. Additionally, all of the changes simplified the logic allowing us to even add a new interpolation method! >>> Color . interpolate ([ 'red' , 'blue' , 'green' , 'orange' ], method = 'bspline' ) <coloraide.interpolate.bspline.InterpolatorBSpline object at 0x7fe9dbbd0490> Color.interpolate(['red', 'blue', 'green', 'orange'], method='bspline') Edit Share Run Cancel Color Space Filters In the beginning, the Color space object was created with a naive filtering system. It added a little overhead, but the real issue was the fact that it only filtered inputs through new , match , and through normal instantiation. It did not filter through almost any other method that accepted inputs. It was decided to leave color filtering up to the user. >>> c = Color ( 'display-p3' , [ 1 , 1 , 0 ]) >>> try : ... if c . space () not in [ 'srgb' , 'hsl' , 'hwb' ]: ... raise ValueError ( 'Invalid Color Space' ) ... except ValueError as e : ... print ( e ) ... Invalid Color Space c = Color('display-p3', [1, 1, 0]) try: if c.space() not in ['srgb', 'hsl', 'hwb']: raise ValueError('Invalid Color Space') except ValueError as e: print(e) Edit Share Run Cancel .info-container {display: inline-block;}","title":"1.0"},{"location":"about/releases/1.0/#10-migration-notes","text":"ColorAide has been a constantly evolving project. As we've pushed for a stable release, the 1.0 milestone was no exception. For any of the early adopters, there are a number of things to be aware of when migrating to 1.0. In this guide, we'll cover the changes most likely to impact users.","title":"1.0 Migration Notes"},{"location":"about/releases/1.0/#plugins","text":"Plugins have gone through a number of reworks. In 1.0, we now require all plugins to be registered as instances. Prior to 1.0 plugins were just passed in un-instantiated. Some plugins were used as static classes almost, and some (color spaces) were instantiated on the creation of every color. In 1.0, all plugins are required to be instantiated prior to registration. This gives the user the opportunity to specify any alternative defaults if desired. >>> Color ( 'red' ) . delta_e ( 'blue' , method = 'cmc' ) 114.23012812016573 >>> from coloraide.distance.delta_e_cmc import DECMC >>> class Custom ( Color ): ... DELTA_E = \"cmc\" ... >>> Custom . register ( DECMC ( l = 1 , c = 1 ), overwrite = True ) >>> Custom ( 'red' ) . delta_e ( 'blue' ) 115.77446003768313 Color('red').delta_e('blue', method='cmc') from coloraide.distance.delta_e_cmc import DECMC class Custom(Color): DELTA_E = \"cmc\" Custom.register(DECMC(l=1, c=1), overwrite=True) Custom('red').delta_e('blue') Edit Share Run Cancel","title":"Plugins"},{"location":"about/releases/1.0/#plugin-renames","text":"ColorAide had some inconsistencies when it came to some plugin names. For instance, we would use variations of Lch , LCH , etc. This made it more difficult to predict how a plugin was named, and remember it. In this case appropriate casing is usually LCh . All plugins referring to LCh were renamed to be more consistent. Outside of LCh related classes, there were a few additional renames to better match the color space of interest's real name. Old Name New Name Lch LCh LchD65 LChD65 Oklch OkLCh Lchuv LChuv Lch99o LCh99o LchChroma LChChroma OklchChroma OkLChchroma Lchish LChish XyY xyY Din99o DIN99o SRGB sRGB SRGBLinear sRGBLinear ORGB oRGB","title":"Plugin Renames"},{"location":"about/releases/1.0/#default-plugins","text":"Over the course of development, we've added a good number of color spaces. With the 1.0 release, it was decided to have the default Color object not register all available color spaces out of the box as the amount of color spaces has grown quite substantially. As not all color spaces are registered by default, \u2206E plugins tied to color spaces no longer registered by default will also not be registered by default. Lastly, since the bradford CAT is the default, it was deemed unnecessary to register all the other CAT plugins by default. With all of that said, all of the exiting plugins are still available and can be included if/when needed. If any of the plugins that are no longer registered by default are needed, there are a couple of options: The recommended way is to just subclass the Color object and cherry pick the plugins that are needed. When classing, all the plugins registered in the base will be copied over to the derived class. Then we can just pass in the instantiated plugins. >>> from coloraide import Color as Base >>> from coloraide.spaces.jzazbz import Jzazbz >>> from coloraide.distance.delta_e_z import DEZ >>> class Color ( Base ): ... ... >>> Color . register ([ Jzazbz (), DEZ ()]) >>> Color ( 'red' ) . convert ( 'jzazbz' ) color(--jzazbz 0.13438 0.11789 0.11188 / 1) >>> Color ( 'red' ) . delta_e ( 'blue' , method = 'jz' ) 0.3396038842016558 from coloraide import Color as Base from coloraide.spaces.jzazbz import Jzazbz from coloraide.distance.delta_e_z import DEZ class Color(Base): ... Color.register([Jzazbz(), DEZ()]) Color('red').convert('jzazbz') Color('red').delta_e('blue', method='jz') Edit Share Run Cancel We also provide a new color object derived from Color that includes all color spaces called ColorAll . This object won't be as light, but will provide quick and easy access to everything ColorAide offers. By default, it registers every plugin. It can be found under coloraide.everything . >>> from coloraide.everything import ColorAll as Color >>> Color ( 'purple' ) . convert ( 'hunter-lab' ) color(--hunter-lab 24.796 50.842 -35.444 / 1) from coloraide.everything import ColorAll as Color Color('purple').convert('hunter-lab') Edit Share Run Cancel","title":"Default Plugins"},{"location":"about/releases/1.0/#dynamic-propertiesfunctions-and-coordinate-access","text":"Prior to 1.0, ColorAide's Color object had color channel properties that would magically mutate based on what the current color space was that the object currently held. While cool, this added overhead to every class attribute access. In an effort to dramatically reduce unnecessary overhead, this feature had to be rethought. Additionally, \u2206E methods were also added dynamically. For instance, if we had the \u2206E 2000 distancing plugin registered, we'd have access to \u2206E via Color.delta_e_2000 or Color . delta_e ( color , method = '2000' ) . Again, the overhead to magically provide these properties the way we were posed the same problem as what was seen with dynamic color channel properties Additionally, the Color object used to have a coords() function to get all the non-alpha color channels. This function was not really problematic, but as we decided a solution for the dynamic properties, it became apparent that we would no longer need such a function. 1.0 removed the overhead of magic dynamic properties and functions. In particular, we decided to approach color channel access in a new and different way. Moving forward, the Color object is now iterable and indexable. Channels can be directly indexed via channel names or numerical indexes. You can even use slices: >>> color = Color ( 'orange' ) >>> color color(srgb 1 0.64706 0 / 1) >>> color [ 'blue' ] 0.0 >>> color [ 0 ] 1.0 >>> color [: - 1 ] [1.0, 0.6470588235294118, 0.0] color = Color('orange') color color['blue'] color[0] color[:-1] Edit Share Run Cancel Color objects are also iterable, so you can just loop them as well, or cast the object as a list. >>> for channel in Color ( 'orange' ): ... print ( channel ) ... 1.0 0.6470588235294118 0.0 1.0 >>> list ( Color ( 'green' )) [0.0, 0.5019607843137255, 0.0, 1.0] for channel in Color('orange'): print(channel) list(Color('green')) Edit Share Run Cancel Setting channels is just as easy and can be done by indexing channels with names, numerical indexes, or even slices. >>> color = Color ( 'transparent' ) >>> color [:] = [ 1 , 0 , 0 , 0.5 ] >>> color color(srgb 1 0 0 / 0.5) color = Color('transparent') color[:] = [1, 0, 0, 0.5] color Edit Share Run Cancel As far as \u2206E methods are concerned, we already had two different ways to approach this, so we simply removed the dynamic functions. To access any of the different \u2206E methods, simply call the generic delta_e function and provide the method . >>> Color ( 'red' ) . delta_e ( 'green' , method = '2000' ) 72.18053591241998 Color('red').delta_e('green', method='2000') Edit Share Run Cancel","title":"Dynamic Properties/Functions and Coordinate Access"},{"location":"about/releases/1.0/#gamut-mapping-and-clipping","text":"During our path to 1.0, we noticed that when performing gamut mapping and clipping, in most cases, we were performing them \"in place\" instead of the default which generated new Color instances. There are times when we occasionally wanted a new instance of the color when fitting a color to its gamut, but that turned out to not be the norm. Generating new instances obviously will create more overhead, and in some cases, such as color mixing, returning a new color opposed to mutating the existing one makes a lot more sense, but with gamut mapping and clipping, for efficiency, we were often forcing \"in place\" operations. 1.0 now does gamut mapping and clipping in place by default. With this change, the in_place parameter is not longer available for fit() and clip() . So, if migrating to 1.0, if you were calling fit() and clip() directly, a few changes will need to be made. If you'd like to do an in place gamut correction, simply call the function. If you'd like to generate a new instance, clone the color first. >>> color1 = Color ( 'display-p3' , [ 1 , 1 , 0 ]) >>> color1 . fit ( 'srgb' ) color(display-p3 0.99859 0.9923 0.32854 / 1) >>> color1 color(display-p3 0.99859 0.9923 0.32854 / 1) >>> color2 = Color ( 'display-p3' , [ 0 , 1 , 0 ]) >>> color3 = color2 . clone () . fit ( 'srgb' ) >>> color2 , color3 (color(display-p3 0 1 0 / 1), color(display-p3 0.45742 0.98328 0.29762 / 1)) color1 = Color('display-p3', [1, 1, 0]) color1.fit('srgb') color1 color2 = Color('display-p3', [0, 1, 0]) color3 = color2.clone().fit('srgb') color2, color3 Edit Share Run Cancel","title":"Gamut Mapping and Clipping"},{"location":"about/releases/1.0/#dictionary-output","text":"The dictionary format for input and output as been simplified for the 1.0 release. Prior to 1.0, the Color object used to export color dictionaries with the space name and each channel under an individually named key: { 'space' : 'srgb' , 'r' : 1 , 'g' : 0 , 'b' : 0 , 'alpha' : 1 } This required more overhead, particularly when parsing to handle channel alias and the like. For 1.0, we've streamlined the format to export the data with all color coordinates under coords and the alpha channel still under alpha . This makes streamlines the process of handling dictionaries as inputs and outputting them when requested, in turn, improving performance. >>> d = Color ( 'rebeccapurple' ) . to_dict () >>> d {'space': 'srgb', 'coords': [0.4, 0.2, 0.6], 'alpha': 1.0} >>> Color ( d ) color(srgb 0.4 0.2 0.6 / 1) d = Color('rebeccapurple').to_dict() d Color(d) Edit Share Run Cancel","title":"Dictionary Output"},{"location":"about/releases/1.0/#interpolation","text":"Interpolation was an area we were generally unhappy with, so it was majorly overhauled. Prior to 1.0, interpolation could be a bit awkward. Interpolation used to require the first color in the interpolation to be the calling object, and all the rest had to be fed in. Color ( 'red' ) . interpolate ([ 'blue' , 'green' , 'orange' ]) When performing a simple mix, this felt natural and made sense: Color ( 'red' ) . mix ( 'blue' , 0.25 ) But with long chains of colors, this just felt cumbersome. To remedy this, we changed the interpolate and steps methods to @classmethods . We left mix as is since with two colors it feels natural. So moving forward, interpolate and steps will execute interpolations from class methods. >>> Color . interpolate ([ 'red' , 'blue' , 'green' , 'orange' ]) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9db7f5510> >>> Color . steps ([ 'red' , 'blue' , 'green' , 'orange' ], steps = 10 ) [color(srgb 1 0 0 / 1), color(srgb 0.70118 0.31007 0.50198 / 1), color(srgb 0.39631 0.30469 0.76127 / 1), color(srgb 0 0 1 / 1), color(srgb -0.20255 0.35952 0.74044 / 1), color(srgb -0.19845 0.45628 0.46971 / 1), color(srgb 0 0.50196 0 / 1), color(srgb 0.46864 0.56246 0.00026 / 1), color(srgb 0.7411 0.61106 0.00031 / 1), color(srgb 1 0.64706 0 / 1)] Color.interpolate(['red', 'blue', 'green', 'orange']) Color.steps(['red', 'blue', 'green', 'orange'], steps=10) Edit Share Run Cancel This means that you do not have to call the function from an instantiated object, and if you do, the instantiated color that is making the call will not be included in the interpolation. Only the colors in the list are considered during the interpolation. >>> Color ( 'white' ) . interpolate ([ 'red' , 'blue' , 'green' , 'orange' ]) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9db7f7d90> Color('white').interpolate(['red', 'blue', 'green', 'orange']) Edit Share Run Cancel This will make even more sense as we highlight the other changes. Another problem we faced was the awkwardness of color stops and easing functions. Before we used to have a Piecewise object that you'd wrap a channel in to create color stops or inject easing functions and other various behaviors between colors, but it had to be applied on the second color in the chain, and this didn't quite work for the first color. If you wanted to add a stop to the first color, you then had to use a special stop parameter\u2026it was unintuitive. from coloraide import Piecewise Color ( 'red' ) . interpolate ([ 'blue' , Piecewise ( 'orange' , 0.75 , progress = lambda t : t * 3 ), 'purple' ], stop = 0.25 ) In 1.0, we simplified things greatly. Since interpolate and steps now require that all colors must be in the input list if they are to be considered for interpolation, we can process them all in a consistent and more intuitive manner. As before, steps and interpolate allow you to set function parameters to generally control the behavior for the entire interpolation across all colors. You can also still add easing functions via progress which will also affect the entire interpolation by default, but now you can inject easing functions directly between colors which will only be applied between those two colors. >>> Color . interpolate ([ 'red' , lambda t : t * 3 , 'orange' , 'purple' ]) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbf8c790> Color.interpolate(['red', lambda t: t * 3, 'orange', 'purple']) Edit Share Run Cancel You can also directly wrap any color in the list with stop to change the color stop position. Since the first color is now treated like all the other colors, there is no need for the stop function parameter either. >>> from coloraide import stop >>> Color . interpolate ([ stop ( 'red' , 0.25 ), stop ( 'orange' , 0.75 ), 'purple' ]) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbbd0760> from coloraide import stop Color.interpolate([stop('red', 0.25), stop('orange', 0.75), 'purple']) Edit Share Run Cancel And if you are familiar with CSS color hinting, which essentially alters the midpoint between two color stops, we've added a hint function which takes a new relative midpoint and returns a midpoint easing function which essentially acts the same as CSS interpolation hints. >>> from coloraide import hint >>> Color . interpolate ([ 'yellow' , 'pink' ]) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbba4be0> >>> Color . interpolate ([ 'yellow' , hint ( 0.25 ), 'pink' ]) <coloraide.interpolate.linear.InterpolatorLinear object at 0x7fe9dbba6800> from coloraide import hint Color.interpolate(['yellow', 'pink']) Color.interpolate(['yellow', hint(0.25), 'pink']) Edit Share Run Cancel All of this makes for a less confusing experience when using interpolation. Additionally, all of the changes simplified the logic allowing us to even add a new interpolation method! >>> Color . interpolate ([ 'red' , 'blue' , 'green' , 'orange' ], method = 'bspline' ) <coloraide.interpolate.bspline.InterpolatorBSpline object at 0x7fe9dbbd0490> Color.interpolate(['red', 'blue', 'green', 'orange'], method='bspline') Edit Share Run Cancel","title":"Interpolation"},{"location":"about/releases/1.0/#color-space-filters","text":"In the beginning, the Color space object was created with a naive filtering system. It added a little overhead, but the real issue was the fact that it only filtered inputs through new , match , and through normal instantiation. It did not filter through almost any other method that accepted inputs. It was decided to leave color filtering up to the user. >>> c = Color ( 'display-p3' , [ 1 , 1 , 0 ]) >>> try : ... if c . space () not in [ 'srgb' , 'hsl' , 'hwb' ]: ... raise ValueError ( 'Invalid Color Space' ) ... except ValueError as e : ... print ( e ) ... Invalid Color Space c = Color('display-p3', [1, 1, 0]) try: if c.space() not in ['srgb', 'hsl', 'hwb']: raise ValueError('Invalid Color Space') except ValueError as e: print(e) Edit Share Run Cancel .info-container {display: inline-block;}","title":"Color Space Filters"},{"location":"api/","text":"Color API coloraide.NaN Description NaN is a convenience constant for float('nan') . Import path NaN is imported from the coloraide library: from coloraide import NaN coloraide.stop class stop ( color , s ): Description stop objects are used in interpolate methods. They allow a user to control specify a color stop for a given color during the interpolation process. Import Path stop is imported from coloraide library: from coloraide import stop Parameters Parameters Defaults Description color A color string, a dictionary describing the color, or another Color class object. value A numerical value specifying the new color stop for the given color. coloraide.hint class hint ( mid , ): Description hint returns an easing function that adjust the midpoint between two color stops. Import Path hint is imported from coloraide library: from coloraide import hint Parameters Parameters Defaults Description mid A numerical value, relative to the two color stops it occurs between, that will be used as the new midpoint. coloraide.Color class Color : def __init__ ( self , color , data = None , alpha = util . DEF_ALPHA , * , filters = None , ** kwargs ): Description The Color class object is a wrapper around the internal color space objects. Color is the base Color object and only registers a select number of color spaces. It provides an API interface to allow users to specify and manipulate colors. Color objects can be iterated, which will return each color channel. They are also indexable by channel name or by channel index. Import path Color is imported from the coloraide library: from coloraide import Color Parameters Parameters Defaults Description color A color string, a dictionary describing the color, or another Color class object. If given data , a string must be used and should represent the color space to use. data None data accepts a list of numbers representing the coordinates of the color. If provided, color must be a string specifying the color space. alpha 1 alpha accepts a number specifying the alpha channel. Must be used in conjunction with data or it will be ignored. filters None filters accepts a list of color spaces to allow. When None is provided (the default) all supported color spaces are accepted. coloraide.everything.ColorAll class ColorAll ( Color ): def __init__ ( self , color , data = None , alpha = util . DEF_ALPHA , * , filters = None , ** kwargs ): Description The ColorAll class object is derived from Color and extends the registered color spaces to include all offered by ColorAide. Import path ColorAll is imported from the coloraide library: from coloraide.everything import ColorAll Parameters Parameters Defaults Description color A color string, a dictionary describing the color, or another ColorAll class object. If given data , a string must be used and should represent the color space to use. data None data accepts a list of numbers representing the coordinates of the color. If provided, color must be a string specifying the color space. alpha 1 alpha accepts a number specifying the alpha channel. Must be used in conjunction with data or it will be ignored. filters None filters accepts a list of color spaces to allow. When None is provided (the default) all supported color spaces are accepted. Color.register @classmethod def register ( cls , plugin , * , overwrite = False , silent = False ): Description Register a plugin(s). Parameters Parameters Defaults Description plugin A plugin object or list of plugin objects to register. overwrite False overwrite will avoid allow an already registered plugin to be overwritten if the plugin to register specifies a name that is already used for registration. silent False silent will avoid throwing an error if the name is already found in the specified category. Color.deregister @classmethod def deregister ( cls , plugin , * , silent = False ): Description Remove an already registered plugin(s). Parameters Parameters Defaults Description plugin A string or list of strings that describe the plugin to be removed. Strings should be in the format category:name where category is either space , delta-e , or fit and name is the name the plugin was registered under. * will remove all plugins and category:* will remove all within a specific category. silent False silent will avoid throwing an error if the name can not be found in the specified category. Color.match @classmethod def match ( cls , string , start = 0 , fullmatch = False , * , filters = None ): Description The match class method provides access to the color matching interface and allows a user to provide a color string and get back a ColorMatch object. ColorMatch objects contain three properties: class ColorMatch : def __init__ ( self , color , start , end ): color : the Color object. start : the starting point within the string buffer where the color was found. end : the ending point within the string buffer where the color was found. Match does not search the entire buffer, but simply matches at the location specified by start . Parameters Parameters Defaults Description string A string representing the color. start 0 Accepts an integer offset into the provided string buffer to start the match. fullmatch False A boolean which defines whether match must match to the end of the string buffer. filters None filters accepts a list of color spaces to allow. When None is provided (the default) all supported color spaces are accepted. Return Returns a ColorMatch object. Color.new def new ( self , color , data = None , alpha = util . DEF_ALPHA , * , filters = None , ** kwargs ): Description The new class method exposes the interface of creating new color objects. Using new is the same as using Color() . Parameters Parameters Defaults Description color A color string, or other Color class object. If given data , a string must be used and should represent the color space to use. data None data accepts a list of numbers representing the coordinates of the color. If provided, color must be a string specifying the color space. alpha 1 alpha accepts a number specifying the alpha channel. Must be used in conjunction with data or it will be ignored. filters None filters accepts a list of color spaces to allow. When None is provided (the default) all supported color spaces are accepted. Return Returns a Color object. Color.random @classmethod def random ( cls , space , * , limits = None ): Description Generate a random color in the provided space . The color space's channel range will be used as a limit for the channel. For color spaces with no clearly defined gamut, these values can be arbitrary. In such cases, it may be advisable to fit the returned color space to a displayable gamut. Parameters Parameters Defaults Description space The color space name in which to generate a random color in. limits None An optional list of constraints for various color channels. Each entry should either be a sequence contain a minimum and maximum value, or should be None . None values will be ignored and the color space's specified channel range will be used instead. Any missing entries will be treated as None . Return Returns a Color object. Color.clone def clone ( self ): Description The clone method provides a way to create a duplicate of the current Color instance. Return Returns a Color object. Color.update def update ( self , color , data = None , alpha = util . DEF_ALPHA , * , filters = None , ** kwargs ): Description The update method provides a way to update the underlying color spaces with coordinates from any color space. The methods signature looks just like new and accepts color strings, Color objects, or raw data points specified with a color space string and coordinates. The object itself will be updated and remain in its current color space. Parameters Parameters Defaults Description color A color string, or other Color class object. If given data , a string must be used and should represent the color space to use. data None data accepts a list of numbers representing the coordinates of the color. If provided, color must be a string specifying the color space. alpha 1 alpha accepts a number specifying the alpha channel. Must be used in conjunction with data or it will be ignored. filters None filters accepts a list of color spaces to allow. When None is provided (the default) all supported color spaces are accepted. Return Returns a reference to the current Color object. Color.mutate def mutate ( self , color , data = None , alpha = util . DEF_ALPHA , * , filters = None , ** kwargs ): Description The mutate method is just like update except that it will not only update the color space, but mutate it to the provided color space. Parameters Parameters Defaults Description color A color string, or other Color class object. If given data , a string must be used and should represent the color space to use. data None data accepts a list of numbers representing the coordinates of the color. If provided, color must be a string specifying the color space. alpha 1 alpha accepts a number specifying the alpha channel. Must be used in conjunction with data or it will be ignored. filters None filters accepts a list of color spaces to allow. When None is provided (the default) all supported color spaces are accepted. Return Returns a reference to the current Color object. Color.convert def convert ( self , space , * , fit = False , in_place = False ): Description Converts a Color object from one color space to another. If the current color space matches the specified color space, the object will be cloned. Parameters Parameters Defaults Description space A string representing the desired final color space. fit False Parameter specifying whether the current color should be gamut mapped into the final, desired color space. If set to True , the color will be gamut mapped using the default gamut mapping method. If set to a string, the string will be interpreted as the name of the gamut mapping method to be used. in_place False Boolean specifying whether the convert should alter the current Color object or return a new one. Return Returns a reference to the converted Color object. If in_place is True , the return will be a reference to the current Color object. Color.space def space ( self ): Description Retrieves the current color space of the color. Return Returns a string with the name of the current color space. Color.normalize def to_dict ( self ): Description Force normalization of a color's channels by cleaning up channels that shouldn't be undefined and setting any channels to undefined if they meet the specific color's criteria dictating such, e.g., hue is undefined in HSL when saturation is zero. Normalize modifies the current color in place. Return Returns a reference to the current Color object after normalizing the channels for undefined hues. Color.to_dict def to_dict ( self , ** kwargs ): Description Dump the color object to a simple dictionary. Return A dictionary containing the color space name, the channel name with their respective values. Color.to_string def to_string ( self , ** kwargs ): Description Method that converts the current color to an output format supported by the color space. While a number of the parameters are common, some may be specific to the color space. The usage guide covers color space specific options in more details. Parameters Common parameters: Parameters Defaults Description alpha None Boolean or None value which determines whether the output includes alpha . If None (the default) alpha will only be shown if less than 1. If True , alpha will always be shown. If False , alpha will be omitted. precision 5 Integer value that sets precision and scale. Precision and scale will match the value if greater than zero. If 0 , values will be rounded to the nearest integer. If -1 , number will be output at the highest precision. fit True A boolean that controls whether gamut mapping is performed on string creation. By default, colors will be fit to their own color space. This can be disabled by setting to False . color False A boolean that will determine if the color(space coord+ / alpha) format is used for string output. Has highest precedence. sRGB specific parameters: Parameters Defaults Description hex . False String output will be in #RRGGBBAA format. names False Boolean indicating a preference for CSS color names. When translating a color to it's closest hex form, if that hex value matches a CSS color name, that color name will be returned as the output. hex does not have to be True for this to apply. compress False If hex is True and compress is True , hex values will be compressed if possible: #RRGGBBAA \u2192 #RGBA . Space dependent parameters: Parameters Defaults Description comma False If supported by the color space and the current output format, commas will be used instead of space format: rgba(0, 0, 0, 1) \u2192 rgb(0 0 0 /1) . Return Returns a string representation of the current color. Color.luminance def luminance ( self ): Description Get the relative luminance. Relative luminance is obtained from the Y coordinate in the XYZ color space. XYZ, in this case, has a D65 white point. Return Returns an float indicating the relative luminance. Color.contrast def contrast ( self , color ): Description Get the contrast ratio based on the relative luminance between two colors. Parameters Parameters Defaults Description color A color string or Color object representing a color. Return Returns a float indicating the contrast ratio between two colors. Color.distance def distance ( self , color , * , space = util . DEF_DISTANCE_SPACE ): Description Performs a euclidean distance algorithm on two colors. Parameters Parameters Defaults Description color A color string or Color object representing a color. space \"lab\" Color space to perform distancing algorithm in. Return Returns a float indicating euclidean distance between the two colors. Color.delta_e def delta_e ( self , color , * , method = None , ** kwargs ): Description Performs a delta E distance algorithm on two colors. Default algorithm that is used is Delta E 1976 ( 76 ). Some methods have additional weighting that can be configured through method specific options which are represented by **kwargs . Available methods: Name Input Parameters \u2206E * ab (CIE76) 76 \u2206E * cmc (CMC l:c (1984)) cmc l=2, c=1 \u2206E * 94 (CIE94) 94 kl=1, k1=0.045, k2=0.015 \u2206E * 00 (CIEDE2000) 2000 kl=1, kc=1, kh=1 \u2206E itp (ICtCp) itp scalar=720 \u2206E z (Jzazbz) jz \u2206E 99o (DIN99o) 99o \u2206E HyAB (HyAB) hyab space=\"lab\" \u2206E ok ok scalar=1 Parameters Parameters Defaults Description color A color string or Color object representing a color. method None String that specifies the method to use. If None , the default will be used. **kwargs Any distancing specific parameters to pass to \u2206E method. Return Returns a float indicating the delta E distance between the two colors. color.closest def closest ( self , colors , * , method = None , ** kwargs ): Description Given a list of colors, calculates the closest color to the calling color object. Parameters Parameters Defaults Description colors A list of color strings, Color object, or dictionary representing a color. method None String that specifies the method of color distancing to use. **kwargs Any distancing specific parameters to pass to \u2206E method. Return The Color that is closest to the calling color object. In the off chance that an empty list is passed in None will be returned. color.mask def mask self , channels , invert = False , in_place = False ): Description The mask method will set any and all specified channels to NaN . If invert is set to True , mask will set any and all channels not specified to NaN . Parameters Parameters Defaults Description channel A string specifying a channel, or a list of strings specifying multiple channels. Specified channels will be masked (or the only channels not masked if invert is True ). invert False Use inverse masking logic and mask all channels that are not specified. in_place False Boolean used to determine if the current color should be modified \"in place\" or a new Color object should be returned. Return Returns a reference to the masked Color object. If in_place is True , the return will be a reference to the current Color object. Color.interpolate @classmethod def interpolate ( cls , colors , * , stop = 0 , space = \"lab\" , progress = None , out_space = None , hue = util . DEF_HUE_ADJ , premultiplied = True , extrapolate = False , method = 'linear' ): Description The interpolate method creates a function that takes a value between 0 - 1 and interpolates a new color based on the input value. If more than one color is provided, the returned function will span the interpolations between all the provided colors with the same range of 0 - 1. Interpolation can be customized by limiting the interpolation to specific color channels, providing custom interpolation functions, and even adjusting the hue logic used. stop objects can wrapped around colors to specify new color stops and easing functions can be placed between colors to alter the transition progress between the two colors. Hue Evaluation Description shorter Angles are adjusted so that \u03b8\u2082 - \u03b8\u2081 \u2208 [-180, 180]. longer Angles are adjusted so that \u03b8\u2082 - \u03b8\u2081 \u2208 {0, [180, 360)}. increasing Angles are adjusted so that \u03b8\u2082 - \u03b8\u2081 \u2208 [0, 360). decreasing Angles are adjusted so that \u03b8\u2082 - \u03b8\u2081 \u2208 (-360, 0] specified No fixup is performed. Angles are interpolated in the same way as every other component. The method of interpolation to can also be selected via the method parameter. Method Description linear An linear interpolation that employs piecewise logic to interpolate between two or more colors. bspline An interpolation method that employs cubic B-spline curves to calculate an interpolation path through multiple colors. natural A natural interpolation spline based on the cubic B-spline curve. monotone An interpolation method that utilizes a monotonic cubic spline based on the Hermite spline. catrom Interpolation based on the Catmull-Rom cubic spline. Parameters Parameters Defaults Description color A list of color strings, Color objects, dictionaries representing a color, stop objects, or easing functions. space \"lab\" Color space to interpolate in. progress None An optional function that that allows for custom logic to perform non-linear interpolation. out_space None Color space that the new color should be in. If None , the color will be in the same color space as the base color. hue \"shorter\" Define how color spaces which have hue angles are interpolated. Default evaluates between the shortest angle. premultiplied True Use premultiplied alpha when interpolating. extrapolate False Interpolations should extrapolate when values exceed the 0 - 1 range. method \"linear\" The interpolation method to use. Return Returns a function that takes a range from [0..1] . The function returns a reference to the interpolated Color object. Color.steps def steps ( self , color , * , steps = 2 , max_steps = 1000 , max_delta_e = 0 , delta_e = None , ** interpolate_args ): Description Creates an interpolate function and iterates through it with user defined step parameters to produce discrete color steps. Will attempt to provide the minimum number of steps without exceeding max_steps . If max_delta_e is provided, the distance between each stop will be cut in half until there are no colors with a distance greater than the specified max_delta_e . The default \u2206E method is used by default, but it can be changed with the delta_e parameter. If more than one color is provided, the steps will be returned from the interpolations between all the provided colors. Like interpolate , the default interpolation space is lab . Parameters Parameters Defaults Description color A list of color strings, Color objects, dictionaries representing a color, stop objects, or easing functions. steps 2 Minimum number of steps. max_steps 1000 Maximum number of steps. max_delta_e 0 Maximum delta E distance between the color stops. A value of 0 or less will be ignored. delta_e None A string indicating which \u2206E method to use. If nothing is supplied, the class object's current default \u2206E method will be used. ** interpolate_args See interpolate Keyword arguments defined in interpolate . Return List of Color objects. Color.mix def mix ( self , color , percent = util . DEF_MIX , * , in_place = False , ** interpolate_args ): Description Interpolates between two colors returning a color that represents the mixing of the base color and the provided color mixed at the provided percent , where percent applies to how much the provided color contributes to the the final result. Parameters Parameters Defaults Description color A color string or Color object representing a color. percent 0.5 A numerical value between 0 - 1 representing the percentage at which the parameter color will be mixed. in_place False Boolean used to determine if the the current color should be modified \"in place\" or a new Color object should be returned. ** interpolate_args See interpolate Keyword arguments defined in interpolate . Return Returns a reference to the new Color object or a reference to the current Color if in_place is True . Color.filter def filter ( self , name , amount = None , * , space = 'srgb-linear' , in_place = False , ** kwargs : Any ): Description Apply a color filter to alter a given color. Filters are based on the W3C Filter Effects and behave in the same manner. Colors are evaluated in the sRGB Linear color space unless otherwise specified via the space parameter. No other color space will be accepted except sRGB and sRGB Linear. An amount can be provided to adjust how much the color is filtered. Any clamping that occurs with the amount parameter, and related ways in which amount are applied, follow the W3C Filter Effects spec. Some filters, such as CVDs , may take additional arguments via kwargs . Filters Name Default Brightness brightness 1 Saturation saturate 1 Contrast contrast 1 Opacity opacity 1 Invert invert 1 Hue rotation hue-rotate 0 Sepia sepia 1 Grayscale grayscale 1 Protanopia CVD protan 1 Deuteranopia CVD deutan 1 Tritanopia CVD tritan 1 Parameters Parameters Defaults Description name The name of the filter that should be applied. amount See above A numerical value adjusting to what degree the filter is applied. Input range can vary depending on the filter being used. Default can also dependent on the filter being used. space None Controls the algorithm used for simulating the given CVD . in_place False Boolean used to determine if the the current color should be modified \"in place\" or a new Color object should be returned. **kwargs Additional filter specific parameters. CVDs also take an optional method parameter that allows for specifying the CVD algorithm to use. Simulation Approach Name Brettel 1997 brettel Vi\u00e9not, Brettel, and Mollon 1999 vienot Machado 2009 machado Return Returns a reference to the new Color object or a reference to the current Color if in_place is True . Color.harmony def harmony ( self , name , * , space ): Description The harmony method uses the current color and returns a set of harmonious colors (including the current color). The color harmonies are based on the classical color harmonies of color theory. By default, harmonious colors are performed under the perceptually uniform OkLCh color space, but other cylindrical color spaces can be used. Harmony Name Monochromatic mono Complementary complement Split Complement split Analogous analogous Triadic triad Tetradic Square square Tetradic Rectangle rectangle Parameters Parameters Defaults Description name Name of the color harmony to use. space 'oklch' Color space under which the harmonies will be calculated. Must be a cylindrical space unless using mono which can take non cylindrical spaces. Return Returns a list of Color objects. Color.compose def compose ( self , backdrop , * , blend = None , operator = None , space = None , out_space = None , in_place = False ): Description Apply compositing which consists of a blend mode and a Porter Duff operator for alpha compositing. The current color is treated as the source (top layer) and the provided color as the backdrop (bottom layer). Colors will be composited in the srgb color space unless otherwise specified. Colors should generally be RGB-ish colors (sRGB, Display P3, A98 RGB, etc.). Some non-RGB-ish colors may work okay, with the defaults, but many the algorithm is really designed for RGB-ish colors. Non-RGB-ish colors are likely to provide nonsense results. Supported blend modes are: Blend Modes normal multiply darken lighten burn dodge screen overlay hard-light exclusion difference soft-light hue saturation luminosity color color hue saturation luminosity Supported Port Duff operators are: Operators clear copy destination source-over destination-over source-in destination-in source-out destination-out source-atop destination-atop xor lighter Parameters Parameters Defaults Description backdrop A background color represented with either a string or Color object. blend None A blend mode to use to use when compositing. Values should be a string specifying the name of the blend mode to use. If None , normal will be used. If False , blending will be skipped. operator None A Porter Duff operator to use for alpha compositing. Values should be a string specifying the name of the operator to use. If None , source-over will be used. If False , alpha compositing will be skipped. space None A color space to perform the overlay in. If None , the base color's space will be used. out_space None A color space to output the resultant color to. in_place False Boolean used to determine if the the current color should be modified \"in place\" or a new Color object should be returned. Return Returns a reference to the new Color object or a reference to the current Color if in_place is True . Color.clip def clip ( self , space = None ) Description Performs simple clipping on color channels that are out of gamut. Parameters Parameters Defaults Description space None The color space that the color must be mapped to. If space is None , then the current color space will be used. Return Returns a reference to the current Color after fitting its coordinates to the specified gamut. Color.fit def fit ( self , space = None , * , method = None , ** kwargs ): Description Fits color to the current or specified color gamut. By default, oklch-chroma gamut mapping is used. This is essentially an approach that holds lightness and hue constant in the OkLCh color space while reducing chroma until the color is in gamut. Clipping is done at each step of the way and the color distance measured to see how close our color is to the intended color. The supported gamut mapping methods are: Name Input Clipping clip OkLCh Chroma oklch-chroma LCh Chroma lch-chroma Parameters Some methods could have additional parameters to configure the behavior, these would be done through **kwargs . None of built-in gamut mapping methods currently have additional parameters. Parameters Defaults Description space None The color space that the color must be mapped to. If space is None , then the current color space will be used. method None String that specifies which gamut mapping method to use. If None , oklch-chroma will be used. Return Returns a reference to the current Color after fitting its coordinates to the specified gamut. Color.in_gamut def in_gamut ( self , space = None , * , tolerance = util . DEF_FIT_TOLERANCE ): Description Checks if the current color is in the current or specified gamut. Parameters Parameters Defaults Description space None The color space that the color must be fit within. If space is None , then the current color space will be used. tolerance 0.000075 Tolerance allowed when checking bounds of color. Return Returns a boolean indicating whether the color is in the specified gamut. Color.get def get ( self , name ): Description Retrieves the coordinate value from the specified channel. Channel must be a channel name in the current color space or a channel name in the specified color space using the syntax: space.channel . Parameters Parameters Defaults Description name Channel name or color space and channel name to retrieve value from. Return Returns a numerical value that is stored internally for the specified channel, or a calculated value in the case that a channel in a different color space is requested. Color.set def set ( self , name , value ): Description Sets the given value to the specified channel. If the name is provided in the form space.channel , the value will be applied to the channel of the specified color space while keeping current color space the same. The value can be a numerical value, a CSS string compatible with the specified color space, or a function that accepts a numerical channel value and returns a numerical channel value. This function returns the current colors reference so that multiple sets can be chained together. Parameters Parameters Defaults Description name Channel name or color space and channel name to retrieve value from. value A numerical value, a string value accepted by the specified color space, or a function. Return Returns a reference to the current Color object. Color.is_nan def is_nan ( self , name ): Description Retrieves the coordinate value from the specified channel and checks whether the value is NaN . Channel must be a channel name in the current color space or a channel name in the specified color space using the syntax: space.channel . Parameters Parameters Defaults Description name A string indicating what channel property to check. Return Returns a boolean indicating whether the specified color space's channel is NaN . Color.white def white ( self ): Description Retrieves the white point for the current color's color space. Return Returns a set of XYZ coordinates that align with the white point for the given color space. Color.chromatic_adaptation @classmethod def chromatic_adaptation ( cls , w1 , w2 , xyz , * , method = None ): Description A class method that converts an XYZ set of coordinates between a two given white points. The first white point must match the white point of that the coordinates are currently using and the second white point must be the desired white point to use. method dictates the method of chromatic adaptation to use. Parameters Parameters Defaults Description w1 Current white point of the XYZ coordinates. w2 Desired white point of the XYZ coordinates. xyz The XYZ coordinates to adapt. method None The method of chromatic adaptation to use. If not specified, the current class's default method will be used. Return Returns a set of XYZ coordinates that have been chromatically adapted to the desired white point. Color.xy def xy ( self ): Description Retrieves the CIE 1931 (x, y) chromaticity coordinates for a given color. Return Returns a tuple of CIE 1931 (x, y) chromaticity points for the given color. Color.uv def uv ( self , mode = '1976' ): Description Retrieves the UCS 1960 (u, v) chromaticity coordinates for a given color or the CIE 1976 UCS (u', v') chromaticity coordinates, the latter being the default. Parameters Parameters Defaults Description mode '1976' A string indicating what mode to use. 1976 refers to the (u', v') points as described by CIE 1976 UCS and 1960 describes the (u, v) points as documented by CIE 1960 UCS . Return Returns a tuple of (u, v) \u2013 either 1976 (u', v') or 1960 (u, v) \u2013 chromaticity points for the given color. .info-container {display: inline-block;}","title":"Color API"},{"location":"api/#color-api","text":"","title":"Color API"},{"location":"api/#nan","text":"Description NaN is a convenience constant for float('nan') . Import path NaN is imported from the coloraide library: from coloraide import NaN","title":"coloraide.NaN"},{"location":"api/#stop","text":"class stop ( color , s ): Description stop objects are used in interpolate methods. They allow a user to control specify a color stop for a given color during the interpolation process. Import Path stop is imported from coloraide library: from coloraide import stop Parameters Parameters Defaults Description color A color string, a dictionary describing the color, or another Color class object. value A numerical value specifying the new color stop for the given color.","title":"coloraide.stop"},{"location":"api/#hint","text":"class hint ( mid , ): Description hint returns an easing function that adjust the midpoint between two color stops. Import Path hint is imported from coloraide library: from coloraide import hint Parameters Parameters Defaults Description mid A numerical value, relative to the two color stops it occurs between, that will be used as the new midpoint.","title":"coloraide.hint"},{"location":"api/#color","text":"class Color : def __init__ ( self , color , data = None , alpha = util . DEF_ALPHA , * , filters = None , ** kwargs ): Description The Color class object is a wrapper around the internal color space objects. Color is the base Color object and only registers a select number of color spaces. It provides an API interface to allow users to specify and manipulate colors. Color objects can be iterated, which will return each color channel. They are also indexable by channel name or by channel index. Import path Color is imported from the coloraide library: from coloraide import Color Parameters Parameters Defaults Description color A color string, a dictionary describing the color, or another Color class object. If given data , a string must be used and should represent the color space to use. data None data accepts a list of numbers representing the coordinates of the color. If provided, color must be a string specifying the color space. alpha 1 alpha accepts a number specifying the alpha channel. Must be used in conjunction with data or it will be ignored. filters None filters accepts a list of color spaces to allow. When None is provided (the default) all supported color spaces are accepted.","title":"coloraide.Color"},{"location":"api/#colorall","text":"class ColorAll ( Color ): def __init__ ( self , color , data = None , alpha = util . DEF_ALPHA , * , filters = None , ** kwargs ): Description The ColorAll class object is derived from Color and extends the registered color spaces to include all offered by ColorAide. Import path ColorAll is imported from the coloraide library: from coloraide.everything import ColorAll Parameters Parameters Defaults Description color A color string, a dictionary describing the color, or another ColorAll class object. If given data , a string must be used and should represent the color space to use. data None data accepts a list of numbers representing the coordinates of the color. If provided, color must be a string specifying the color space. alpha 1 alpha accepts a number specifying the alpha channel. Must be used in conjunction with data or it will be ignored. filters None filters accepts a list of color spaces to allow. When None is provided (the default) all supported color spaces are accepted.","title":"coloraide.everything.ColorAll"},{"location":"api/#register","text":"@classmethod def register ( cls , plugin , * , overwrite = False , silent = False ): Description Register a plugin(s). Parameters Parameters Defaults Description plugin A plugin object or list of plugin objects to register. overwrite False overwrite will avoid allow an already registered plugin to be overwritten if the plugin to register specifies a name that is already used for registration. silent False silent will avoid throwing an error if the name is already found in the specified category.","title":"Color.register"},{"location":"api/#deregister","text":"@classmethod def deregister ( cls , plugin , * , silent = False ): Description Remove an already registered plugin(s). Parameters Parameters Defaults Description plugin A string or list of strings that describe the plugin to be removed. Strings should be in the format category:name where category is either space , delta-e , or fit and name is the name the plugin was registered under. * will remove all plugins and category:* will remove all within a specific category. silent False silent will avoid throwing an error if the name can not be found in the specified category.","title":"Color.deregister"},{"location":"api/#match","text":"@classmethod def match ( cls , string , start = 0 , fullmatch = False , * , filters = None ): Description The match class method provides access to the color matching interface and allows a user to provide a color string and get back a ColorMatch object. ColorMatch objects contain three properties: class ColorMatch : def __init__ ( self , color , start , end ): color : the Color object. start : the starting point within the string buffer where the color was found. end : the ending point within the string buffer where the color was found. Match does not search the entire buffer, but simply matches at the location specified by start . Parameters Parameters Defaults Description string A string representing the color. start 0 Accepts an integer offset into the provided string buffer to start the match. fullmatch False A boolean which defines whether match must match to the end of the string buffer. filters None filters accepts a list of color spaces to allow. When None is provided (the default) all supported color spaces are accepted. Return Returns a ColorMatch object.","title":"Color.match"},{"location":"api/#new","text":"def new ( self , color , data = None , alpha = util . DEF_ALPHA , * , filters = None , ** kwargs ): Description The new class method exposes the interface of creating new color objects. Using new is the same as using Color() . Parameters Parameters Defaults Description color A color string, or other Color class object. If given data , a string must be used and should represent the color space to use. data None data accepts a list of numbers representing the coordinates of the color. If provided, color must be a string specifying the color space. alpha 1 alpha accepts a number specifying the alpha channel. Must be used in conjunction with data or it will be ignored. filters None filters accepts a list of color spaces to allow. When None is provided (the default) all supported color spaces are accepted. Return Returns a Color object.","title":"Color.new"},{"location":"api/#random","text":"@classmethod def random ( cls , space , * , limits = None ): Description Generate a random color in the provided space . The color space's channel range will be used as a limit for the channel. For color spaces with no clearly defined gamut, these values can be arbitrary. In such cases, it may be advisable to fit the returned color space to a displayable gamut. Parameters Parameters Defaults Description space The color space name in which to generate a random color in. limits None An optional list of constraints for various color channels. Each entry should either be a sequence contain a minimum and maximum value, or should be None . None values will be ignored and the color space's specified channel range will be used instead. Any missing entries will be treated as None . Return Returns a Color object.","title":"Color.random"},{"location":"api/#clone","text":"def clone ( self ): Description The clone method provides a way to create a duplicate of the current Color instance. Return Returns a Color object.","title":"Color.clone"},{"location":"api/#update","text":"def update ( self , color , data = None , alpha = util . DEF_ALPHA , * , filters = None , ** kwargs ): Description The update method provides a way to update the underlying color spaces with coordinates from any color space. The methods signature looks just like new and accepts color strings, Color objects, or raw data points specified with a color space string and coordinates. The object itself will be updated and remain in its current color space. Parameters Parameters Defaults Description color A color string, or other Color class object. If given data , a string must be used and should represent the color space to use. data None data accepts a list of numbers representing the coordinates of the color. If provided, color must be a string specifying the color space. alpha 1 alpha accepts a number specifying the alpha channel. Must be used in conjunction with data or it will be ignored. filters None filters accepts a list of color spaces to allow. When None is provided (the default) all supported color spaces are accepted. Return Returns a reference to the current Color object.","title":"Color.update"},{"location":"api/#mutate","text":"def mutate ( self , color , data = None , alpha = util . DEF_ALPHA , * , filters = None , ** kwargs ): Description The mutate method is just like update except that it will not only update the color space, but mutate it to the provided color space. Parameters Parameters Defaults Description color A color string, or other Color class object. If given data , a string must be used and should represent the color space to use. data None data accepts a list of numbers representing the coordinates of the color. If provided, color must be a string specifying the color space. alpha 1 alpha accepts a number specifying the alpha channel. Must be used in conjunction with data or it will be ignored. filters None filters accepts a list of color spaces to allow. When None is provided (the default) all supported color spaces are accepted. Return Returns a reference to the current Color object.","title":"Color.mutate"},{"location":"api/#convert","text":"def convert ( self , space , * , fit = False , in_place = False ): Description Converts a Color object from one color space to another. If the current color space matches the specified color space, the object will be cloned. Parameters Parameters Defaults Description space A string representing the desired final color space. fit False Parameter specifying whether the current color should be gamut mapped into the final, desired color space. If set to True , the color will be gamut mapped using the default gamut mapping method. If set to a string, the string will be interpreted as the name of the gamut mapping method to be used. in_place False Boolean specifying whether the convert should alter the current Color object or return a new one. Return Returns a reference to the converted Color object. If in_place is True , the return will be a reference to the current Color object.","title":"Color.convert"},{"location":"api/#space","text":"def space ( self ): Description Retrieves the current color space of the color. Return Returns a string with the name of the current color space.","title":"Color.space"},{"location":"api/#normalize","text":"def to_dict ( self ): Description Force normalization of a color's channels by cleaning up channels that shouldn't be undefined and setting any channels to undefined if they meet the specific color's criteria dictating such, e.g., hue is undefined in HSL when saturation is zero. Normalize modifies the current color in place. Return Returns a reference to the current Color object after normalizing the channels for undefined hues.","title":"Color.normalize"},{"location":"api/#to_dict","text":"def to_dict ( self , ** kwargs ): Description Dump the color object to a simple dictionary. Return A dictionary containing the color space name, the channel name with their respective values.","title":"Color.to_dict"},{"location":"api/#to_string","text":"def to_string ( self , ** kwargs ): Description Method that converts the current color to an output format supported by the color space. While a number of the parameters are common, some may be specific to the color space. The usage guide covers color space specific options in more details. Parameters Common parameters: Parameters Defaults Description alpha None Boolean or None value which determines whether the output includes alpha . If None (the default) alpha will only be shown if less than 1. If True , alpha will always be shown. If False , alpha will be omitted. precision 5 Integer value that sets precision and scale. Precision and scale will match the value if greater than zero. If 0 , values will be rounded to the nearest integer. If -1 , number will be output at the highest precision. fit True A boolean that controls whether gamut mapping is performed on string creation. By default, colors will be fit to their own color space. This can be disabled by setting to False . color False A boolean that will determine if the color(space coord+ / alpha) format is used for string output. Has highest precedence. sRGB specific parameters: Parameters Defaults Description hex . False String output will be in #RRGGBBAA format. names False Boolean indicating a preference for CSS color names. When translating a color to it's closest hex form, if that hex value matches a CSS color name, that color name will be returned as the output. hex does not have to be True for this to apply. compress False If hex is True and compress is True , hex values will be compressed if possible: #RRGGBBAA \u2192 #RGBA . Space dependent parameters: Parameters Defaults Description comma False If supported by the color space and the current output format, commas will be used instead of space format: rgba(0, 0, 0, 1) \u2192 rgb(0 0 0 /1) . Return Returns a string representation of the current color.","title":"Color.to_string"},{"location":"api/#luminance","text":"def luminance ( self ): Description Get the relative luminance. Relative luminance is obtained from the Y coordinate in the XYZ color space. XYZ, in this case, has a D65 white point. Return Returns an float indicating the relative luminance.","title":"Color.luminance"},{"location":"api/#colorcontrast","text":"def contrast ( self , color ): Description Get the contrast ratio based on the relative luminance between two colors. Parameters Parameters Defaults Description color A color string or Color object representing a color. Return Returns a float indicating the contrast ratio between two colors.","title":"Color.contrast"},{"location":"api/#distance","text":"def distance ( self , color , * , space = util . DEF_DISTANCE_SPACE ): Description Performs a euclidean distance algorithm on two colors. Parameters Parameters Defaults Description color A color string or Color object representing a color. space \"lab\" Color space to perform distancing algorithm in. Return Returns a float indicating euclidean distance between the two colors.","title":"Color.distance"},{"location":"api/#delta_e","text":"def delta_e ( self , color , * , method = None , ** kwargs ): Description Performs a delta E distance algorithm on two colors. Default algorithm that is used is Delta E 1976 ( 76 ). Some methods have additional weighting that can be configured through method specific options which are represented by **kwargs . Available methods: Name Input Parameters \u2206E * ab (CIE76) 76 \u2206E * cmc (CMC l:c (1984)) cmc l=2, c=1 \u2206E * 94 (CIE94) 94 kl=1, k1=0.045, k2=0.015 \u2206E * 00 (CIEDE2000) 2000 kl=1, kc=1, kh=1 \u2206E itp (ICtCp) itp scalar=720 \u2206E z (Jzazbz) jz \u2206E 99o (DIN99o) 99o \u2206E HyAB (HyAB) hyab space=\"lab\" \u2206E ok ok scalar=1 Parameters Parameters Defaults Description color A color string or Color object representing a color. method None String that specifies the method to use. If None , the default will be used. **kwargs Any distancing specific parameters to pass to \u2206E method. Return Returns a float indicating the delta E distance between the two colors.","title":"Color.delta_e"},{"location":"api/#closest","text":"def closest ( self , colors , * , method = None , ** kwargs ): Description Given a list of colors, calculates the closest color to the calling color object. Parameters Parameters Defaults Description colors A list of color strings, Color object, or dictionary representing a color. method None String that specifies the method of color distancing to use. **kwargs Any distancing specific parameters to pass to \u2206E method. Return The Color that is closest to the calling color object. In the off chance that an empty list is passed in None will be returned.","title":"color.closest"},{"location":"api/#mask","text":"def mask self , channels , invert = False , in_place = False ): Description The mask method will set any and all specified channels to NaN . If invert is set to True , mask will set any and all channels not specified to NaN . Parameters Parameters Defaults Description channel A string specifying a channel, or a list of strings specifying multiple channels. Specified channels will be masked (or the only channels not masked if invert is True ). invert False Use inverse masking logic and mask all channels that are not specified. in_place False Boolean used to determine if the current color should be modified \"in place\" or a new Color object should be returned. Return Returns a reference to the masked Color object. If in_place is True , the return will be a reference to the current Color object.","title":"color.mask"},{"location":"api/#interpolate","text":"@classmethod def interpolate ( cls , colors , * , stop = 0 , space = \"lab\" , progress = None , out_space = None , hue = util . DEF_HUE_ADJ , premultiplied = True , extrapolate = False , method = 'linear' ): Description The interpolate method creates a function that takes a value between 0 - 1 and interpolates a new color based on the input value. If more than one color is provided, the returned function will span the interpolations between all the provided colors with the same range of 0 - 1. Interpolation can be customized by limiting the interpolation to specific color channels, providing custom interpolation functions, and even adjusting the hue logic used. stop objects can wrapped around colors to specify new color stops and easing functions can be placed between colors to alter the transition progress between the two colors. Hue Evaluation Description shorter Angles are adjusted so that \u03b8\u2082 - \u03b8\u2081 \u2208 [-180, 180]. longer Angles are adjusted so that \u03b8\u2082 - \u03b8\u2081 \u2208 {0, [180, 360)}. increasing Angles are adjusted so that \u03b8\u2082 - \u03b8\u2081 \u2208 [0, 360). decreasing Angles are adjusted so that \u03b8\u2082 - \u03b8\u2081 \u2208 (-360, 0] specified No fixup is performed. Angles are interpolated in the same way as every other component. The method of interpolation to can also be selected via the method parameter. Method Description linear An linear interpolation that employs piecewise logic to interpolate between two or more colors. bspline An interpolation method that employs cubic B-spline curves to calculate an interpolation path through multiple colors. natural A natural interpolation spline based on the cubic B-spline curve. monotone An interpolation method that utilizes a monotonic cubic spline based on the Hermite spline. catrom Interpolation based on the Catmull-Rom cubic spline. Parameters Parameters Defaults Description color A list of color strings, Color objects, dictionaries representing a color, stop objects, or easing functions. space \"lab\" Color space to interpolate in. progress None An optional function that that allows for custom logic to perform non-linear interpolation. out_space None Color space that the new color should be in. If None , the color will be in the same color space as the base color. hue \"shorter\" Define how color spaces which have hue angles are interpolated. Default evaluates between the shortest angle. premultiplied True Use premultiplied alpha when interpolating. extrapolate False Interpolations should extrapolate when values exceed the 0 - 1 range. method \"linear\" The interpolation method to use. Return Returns a function that takes a range from [0..1] . The function returns a reference to the interpolated Color object.","title":"Color.interpolate"},{"location":"api/#steps","text":"def steps ( self , color , * , steps = 2 , max_steps = 1000 , max_delta_e = 0 , delta_e = None , ** interpolate_args ): Description Creates an interpolate function and iterates through it with user defined step parameters to produce discrete color steps. Will attempt to provide the minimum number of steps without exceeding max_steps . If max_delta_e is provided, the distance between each stop will be cut in half until there are no colors with a distance greater than the specified max_delta_e . The default \u2206E method is used by default, but it can be changed with the delta_e parameter. If more than one color is provided, the steps will be returned from the interpolations between all the provided colors. Like interpolate , the default interpolation space is lab . Parameters Parameters Defaults Description color A list of color strings, Color objects, dictionaries representing a color, stop objects, or easing functions. steps 2 Minimum number of steps. max_steps 1000 Maximum number of steps. max_delta_e 0 Maximum delta E distance between the color stops. A value of 0 or less will be ignored. delta_e None A string indicating which \u2206E method to use. If nothing is supplied, the class object's current default \u2206E method will be used. ** interpolate_args See interpolate Keyword arguments defined in interpolate . Return List of Color objects.","title":"Color.steps"},{"location":"api/#mix","text":"def mix ( self , color , percent = util . DEF_MIX , * , in_place = False , ** interpolate_args ): Description Interpolates between two colors returning a color that represents the mixing of the base color and the provided color mixed at the provided percent , where percent applies to how much the provided color contributes to the the final result. Parameters Parameters Defaults Description color A color string or Color object representing a color. percent 0.5 A numerical value between 0 - 1 representing the percentage at which the parameter color will be mixed. in_place False Boolean used to determine if the the current color should be modified \"in place\" or a new Color object should be returned. ** interpolate_args See interpolate Keyword arguments defined in interpolate . Return Returns a reference to the new Color object or a reference to the current Color if in_place is True .","title":"Color.mix"},{"location":"api/#cvd","text":"def filter ( self , name , amount = None , * , space = 'srgb-linear' , in_place = False , ** kwargs : Any ): Description Apply a color filter to alter a given color. Filters are based on the W3C Filter Effects and behave in the same manner. Colors are evaluated in the sRGB Linear color space unless otherwise specified via the space parameter. No other color space will be accepted except sRGB and sRGB Linear. An amount can be provided to adjust how much the color is filtered. Any clamping that occurs with the amount parameter, and related ways in which amount are applied, follow the W3C Filter Effects spec. Some filters, such as CVDs , may take additional arguments via kwargs . Filters Name Default Brightness brightness 1 Saturation saturate 1 Contrast contrast 1 Opacity opacity 1 Invert invert 1 Hue rotation hue-rotate 0 Sepia sepia 1 Grayscale grayscale 1 Protanopia CVD protan 1 Deuteranopia CVD deutan 1 Tritanopia CVD tritan 1 Parameters Parameters Defaults Description name The name of the filter that should be applied. amount See above A numerical value adjusting to what degree the filter is applied. Input range can vary depending on the filter being used. Default can also dependent on the filter being used. space None Controls the algorithm used for simulating the given CVD . in_place False Boolean used to determine if the the current color should be modified \"in place\" or a new Color object should be returned. **kwargs Additional filter specific parameters. CVDs also take an optional method parameter that allows for specifying the CVD algorithm to use. Simulation Approach Name Brettel 1997 brettel Vi\u00e9not, Brettel, and Mollon 1999 vienot Machado 2009 machado Return Returns a reference to the new Color object or a reference to the current Color if in_place is True .","title":"Color.filter"},{"location":"api/#harmony","text":"def harmony ( self , name , * , space ): Description The harmony method uses the current color and returns a set of harmonious colors (including the current color). The color harmonies are based on the classical color harmonies of color theory. By default, harmonious colors are performed under the perceptually uniform OkLCh color space, but other cylindrical color spaces can be used. Harmony Name Monochromatic mono Complementary complement Split Complement split Analogous analogous Triadic triad Tetradic Square square Tetradic Rectangle rectangle Parameters Parameters Defaults Description name Name of the color harmony to use. space 'oklch' Color space under which the harmonies will be calculated. Must be a cylindrical space unless using mono which can take non cylindrical spaces. Return Returns a list of Color objects.","title":"Color.harmony"},{"location":"api/#compose","text":"def compose ( self , backdrop , * , blend = None , operator = None , space = None , out_space = None , in_place = False ): Description Apply compositing which consists of a blend mode and a Porter Duff operator for alpha compositing. The current color is treated as the source (top layer) and the provided color as the backdrop (bottom layer). Colors will be composited in the srgb color space unless otherwise specified. Colors should generally be RGB-ish colors (sRGB, Display P3, A98 RGB, etc.). Some non-RGB-ish colors may work okay, with the defaults, but many the algorithm is really designed for RGB-ish colors. Non-RGB-ish colors are likely to provide nonsense results. Supported blend modes are: Blend Modes normal multiply darken lighten burn dodge screen overlay hard-light exclusion difference soft-light hue saturation luminosity color color hue saturation luminosity Supported Port Duff operators are: Operators clear copy destination source-over destination-over source-in destination-in source-out destination-out source-atop destination-atop xor lighter Parameters Parameters Defaults Description backdrop A background color represented with either a string or Color object. blend None A blend mode to use to use when compositing. Values should be a string specifying the name of the blend mode to use. If None , normal will be used. If False , blending will be skipped. operator None A Porter Duff operator to use for alpha compositing. Values should be a string specifying the name of the operator to use. If None , source-over will be used. If False , alpha compositing will be skipped. space None A color space to perform the overlay in. If None , the base color's space will be used. out_space None A color space to output the resultant color to. in_place False Boolean used to determine if the the current color should be modified \"in place\" or a new Color object should be returned. Return Returns a reference to the new Color object or a reference to the current Color if in_place is True .","title":"Color.compose"},{"location":"api/#clip","text":"def clip ( self , space = None ) Description Performs simple clipping on color channels that are out of gamut. Parameters Parameters Defaults Description space None The color space that the color must be mapped to. If space is None , then the current color space will be used. Return Returns a reference to the current Color after fitting its coordinates to the specified gamut.","title":"Color.clip"},{"location":"api/#fit","text":"def fit ( self , space = None , * , method = None , ** kwargs ): Description Fits color to the current or specified color gamut. By default, oklch-chroma gamut mapping is used. This is essentially an approach that holds lightness and hue constant in the OkLCh color space while reducing chroma until the color is in gamut. Clipping is done at each step of the way and the color distance measured to see how close our color is to the intended color. The supported gamut mapping methods are: Name Input Clipping clip OkLCh Chroma oklch-chroma LCh Chroma lch-chroma Parameters Some methods could have additional parameters to configure the behavior, these would be done through **kwargs . None of built-in gamut mapping methods currently have additional parameters. Parameters Defaults Description space None The color space that the color must be mapped to. If space is None , then the current color space will be used. method None String that specifies which gamut mapping method to use. If None , oklch-chroma will be used. Return Returns a reference to the current Color after fitting its coordinates to the specified gamut.","title":"Color.fit"},{"location":"api/#in_gamut","text":"def in_gamut ( self , space = None , * , tolerance = util . DEF_FIT_TOLERANCE ): Description Checks if the current color is in the current or specified gamut. Parameters Parameters Defaults Description space None The color space that the color must be fit within. If space is None , then the current color space will be used. tolerance 0.000075 Tolerance allowed when checking bounds of color. Return Returns a boolean indicating whether the color is in the specified gamut.","title":"Color.in_gamut"},{"location":"api/#get","text":"def get ( self , name ): Description Retrieves the coordinate value from the specified channel. Channel must be a channel name in the current color space or a channel name in the specified color space using the syntax: space.channel . Parameters Parameters Defaults Description name Channel name or color space and channel name to retrieve value from. Return Returns a numerical value that is stored internally for the specified channel, or a calculated value in the case that a channel in a different color space is requested.","title":"Color.get"},{"location":"api/#set","text":"def set ( self , name , value ): Description Sets the given value to the specified channel. If the name is provided in the form space.channel , the value will be applied to the channel of the specified color space while keeping current color space the same. The value can be a numerical value, a CSS string compatible with the specified color space, or a function that accepts a numerical channel value and returns a numerical channel value. This function returns the current colors reference so that multiple sets can be chained together. Parameters Parameters Defaults Description name Channel name or color space and channel name to retrieve value from. value A numerical value, a string value accepted by the specified color space, or a function. Return Returns a reference to the current Color object.","title":"Color.set"},{"location":"api/#is_nan","text":"def is_nan ( self , name ): Description Retrieves the coordinate value from the specified channel and checks whether the value is NaN . Channel must be a channel name in the current color space or a channel name in the specified color space using the syntax: space.channel . Parameters Parameters Defaults Description name A string indicating what channel property to check. Return Returns a boolean indicating whether the specified color space's channel is NaN .","title":"Color.is_nan"},{"location":"api/#white","text":"def white ( self ): Description Retrieves the white point for the current color's color space. Return Returns a set of XYZ coordinates that align with the white point for the given color space.","title":"Color.white"},{"location":"api/#colorchromatic_adaptation","text":"@classmethod def chromatic_adaptation ( cls , w1 , w2 , xyz , * , method = None ): Description A class method that converts an XYZ set of coordinates between a two given white points. The first white point must match the white point of that the coordinates are currently using and the second white point must be the desired white point to use. method dictates the method of chromatic adaptation to use. Parameters Parameters Defaults Description w1 Current white point of the XYZ coordinates. w2 Desired white point of the XYZ coordinates. xyz The XYZ coordinates to adapt. method None The method of chromatic adaptation to use. If not specified, the current class's default method will be used. Return Returns a set of XYZ coordinates that have been chromatically adapted to the desired white point.","title":"Color.chromatic_adaptation"},{"location":"api/#xy","text":"def xy ( self ): Description Retrieves the CIE 1931 (x, y) chromaticity coordinates for a given color. Return Returns a tuple of CIE 1931 (x, y) chromaticity points for the given color.","title":"Color.xy"},{"location":"api/#xy","text":"def uv ( self , mode = '1976' ): Description Retrieves the UCS 1960 (u, v) chromaticity coordinates for a given color or the CIE 1976 UCS (u', v') chromaticity coordinates, the latter being the default. Parameters Parameters Defaults Description mode '1976' A string indicating what mode to use. 1976 refers to the (u', v') points as described by CIE 1976 UCS and 1960 describes the (u, v) points as documented by CIE 1960 UCS . Return Returns a tuple of (u, v) \u2013 either 1976 (u', v') or 1960 (u, v) \u2013 chromaticity points for the given color. .info-container {display: inline-block;}","title":"Color.xy"},{"location":"colors/","text":"Color Spaces ColorAide aims to support all the color spaces and models currently offered in modern CSS, such as sRGB, Display P3, CIELab, Oklab, etc. We also include a number of color spaces that are not available in CSS. ColorAide registers a subset of the offered color spaces by default . But additional color spaces can be registered by subclassing the Color object and then registering any additional required plugins, such as color spaces. Everything but the Kitchen Sink It is not generally recommended to register all possible color spaces (and plugins in general). The suggested approach is to cherry pick additional color spaces as needed by simply subclassing Color and then registering the desired plugins, but if desired coloraide.everything.ColorAll already includes all plugins and can be imported to get access to every supported plugin. Default Color Spaces While ColorAide supports a lot of color spaces, it is rare that a user would ever need every color space implemented by ColorAide available at all times, so to keep the Color object lighter, and color matching logic quicker, the coloraide.Color object does not register all color spaces by default. Default Color Spaces XYZ D65 XYZ D50 Linear sRGB Linear Display P3 Linear A98 RGB Linear Rec. 2020 Linear ProPhoto RGB sRGB Display P3 A98 RGB Rec. 2020 ProPhoto RGB HSL HSV HWB Lab LCh Lab D65 LCh D65 Oklab OkLCh Color Space Map When registering a plugin, it is important that all required plugins in the conversion path are registered as well. Below we've provided a diagram of all available color spaces and how they translate to one another. Click any of the color spaces to jump to the related documentation. flowchart TB acescc --- acescg ---- xyz-d65 acescct --- acescg aces2065-1 --- xyz-d65 oklch --- oklab ----- xyz-d65 okhsl --- oklab okhsv --- oklab display-p3 --- display-p3-linear --- xyz-d65 a98-rgb --- a98-rgb-linear --- xyz-d65 hwb --- hsv --- hsl --- srgb --- srgb-linear ----- xyz-d65 orgb --- srgb prismatic --- srgb hsi --- srgb cmy --- srgb cmyk --- srgb rec2020 --- rec2020-linear --- xyz-d65 rec2100pq --- rec2020-linear prophoto-rgb --- prophoto-rgb-linear --- xyz-d50 ----- xyz-d65 lch --- lab --- xyz-d50 xyz-d65 --- lab-d65 --- lch-d65 xyz-d65 --- jzazbz --- jzczhz xyz-d65 --- ipt xyz-d65 --- ictcp xyz-d65 --- igpgtg xyz-d65 --- din99o --- lch99o xyz-d65 --- hunter-lab xyz-d65 --- rlab xyz-d65 --- luv --- lchuv luv --- hsluv luv --- hpluv xyz-d65 --- xyy xyz-d65(XYZ D65) xyz-d50(XYZ D50) rec2020(Rec. 2020) rec2020-linear(Linear Rec. 2020) rec2100pq(Rec. 2100 PQ) srgb-linear(Linear sRGB) srgb(sRGB) hsl(HSL) hsv(HSV) hwb(HWB) display-p3-linear(Linear Display P3) display-p3(Display P3) a98-rgb-linear(Linear A98 RGB) a98-rgb(A98 RGB) prophoto-rgb-linear(Linear ProPhoto RGB) prophoto-rgb(ProPhoto RGB) lab(Lab) lch(LCh) lab-d65(Lab D65) lch-d65(LCh D65) oklab(Oklab) oklch(OkLCh) okhsl(Okhsl) okhsv(Okhsv) luv(Luv) lchuv(LChuv) hsluv(HSLuv) hpluv(HPLuv) din99o(DIN99o) lch99o(DIN99o LCh) jzazbz(Jzazbz) jzczhz(JzCzhz) ictcp(ICtCp) orgb(oRGB) ipt(IPT) igpgtg(IgPgTg) hunter-lab(Hunter Lab) rlab(RLAB) hsi(HSI) cmy(CMY) cmyk(CMYK) xyy(xyY) prismatic(Prismatic) aces2065-1(ACES2065-1) acescg(ACEScg) acescc(ACEScc) acescct(ACEScct) click xyz-d65 \"./xyz_d65/\" _self click xyz-d50 \"./xyz_d50/\" _self click rec2020 \"./rec2020/\" _self click rec2020-linear \"./rec2020_linear/\" _self click rec2100pq \"./rec2100pq/\" _self click srgb-linear \"./srgb_linear/\" _self click srgb \"./srgb/\" _self click hsl \"./hsl/\" _self click hsv \"./hsv/\" _self click hwb \"./hwb/\" _self click display-p3-linear \"./display_p3_linear/\" _self click display-p3 \"./display_p3/\" _self click a98-rgb-linear \"./a98_rgb_linear/\" _self click a98-rgb \"./a98_rgb/\" _self click prophoto-rgb-linear \"./prophoto_rgb_linear/\" _self click prophoto-rgb \"./prophoto_rgb/\" _self click lab \"./lab/\" _self click lch \"./lch/\" _self click lab-d65 \"./lab_d65/\" _self click lch-d65 \"./lch_d65/\" _self click oklab \"./oklab/\" _self click oklch \"./oklch/\" _self click okhsl \"./okhsl/\" _self click okhsv \"./okhsv/\" _self click luv \"./luv/\" _self click lchuv \"./lchuv/\" _self click hsluv \"./hsluv/\" _self click hpluv \"./hpluv/\" _self click din99o \"./din99o/\" _self click lch99o \"./lch99o/\" _self click jzazbz \"./jzazbz/\" _self click jzczhz \"./jzczhz/\" _self click ictcp \"./ictcp/\" _self click orgb \"./orgb/\" _self click ipt \"./ipt/\" _self click igpgtg \"./igpgtg/\" _self click hunter-lab \"./hunter_lab/\" _self click rlab \"./rlab/\" _self click hsi \"./hsi/\" _self click cmy \"./cmy/\" _self click cmyk \"./cmyk/\" _self click xyy \"./xyy/\" _self click prismatic \"./prismatic/\" _self click aces2065-1 \"./aces2065_1/\" _self click acescg \"./acescg/\" _self click acescc \"./acescc/\" _self click acescct \"./acescct/\" _self .info-container {display: inline-block;}","title":"Color Spaces"},{"location":"colors/#color-spaces","text":"ColorAide aims to support all the color spaces and models currently offered in modern CSS, such as sRGB, Display P3, CIELab, Oklab, etc. We also include a number of color spaces that are not available in CSS. ColorAide registers a subset of the offered color spaces by default . But additional color spaces can be registered by subclassing the Color object and then registering any additional required plugins, such as color spaces. Everything but the Kitchen Sink It is not generally recommended to register all possible color spaces (and plugins in general). The suggested approach is to cherry pick additional color spaces as needed by simply subclassing Color and then registering the desired plugins, but if desired coloraide.everything.ColorAll already includes all plugins and can be imported to get access to every supported plugin.","title":"Color Spaces"},{"location":"colors/#default-color-spaces","text":"While ColorAide supports a lot of color spaces, it is rare that a user would ever need every color space implemented by ColorAide available at all times, so to keep the Color object lighter, and color matching logic quicker, the coloraide.Color object does not register all color spaces by default. Default Color Spaces XYZ D65 XYZ D50 Linear sRGB Linear Display P3 Linear A98 RGB Linear Rec. 2020 Linear ProPhoto RGB sRGB Display P3 A98 RGB Rec. 2020 ProPhoto RGB HSL HSV HWB Lab LCh Lab D65 LCh D65 Oklab OkLCh","title":"Default Color Spaces"},{"location":"colors/#color-space-map","text":"When registering a plugin, it is important that all required plugins in the conversion path are registered as well. Below we've provided a diagram of all available color spaces and how they translate to one another. Click any of the color spaces to jump to the related documentation. flowchart TB acescc --- acescg ---- xyz-d65 acescct --- acescg aces2065-1 --- xyz-d65 oklch --- oklab ----- xyz-d65 okhsl --- oklab okhsv --- oklab display-p3 --- display-p3-linear --- xyz-d65 a98-rgb --- a98-rgb-linear --- xyz-d65 hwb --- hsv --- hsl --- srgb --- srgb-linear ----- xyz-d65 orgb --- srgb prismatic --- srgb hsi --- srgb cmy --- srgb cmyk --- srgb rec2020 --- rec2020-linear --- xyz-d65 rec2100pq --- rec2020-linear prophoto-rgb --- prophoto-rgb-linear --- xyz-d50 ----- xyz-d65 lch --- lab --- xyz-d50 xyz-d65 --- lab-d65 --- lch-d65 xyz-d65 --- jzazbz --- jzczhz xyz-d65 --- ipt xyz-d65 --- ictcp xyz-d65 --- igpgtg xyz-d65 --- din99o --- lch99o xyz-d65 --- hunter-lab xyz-d65 --- rlab xyz-d65 --- luv --- lchuv luv --- hsluv luv --- hpluv xyz-d65 --- xyy xyz-d65(XYZ D65) xyz-d50(XYZ D50) rec2020(Rec. 2020) rec2020-linear(Linear Rec. 2020) rec2100pq(Rec. 2100 PQ) srgb-linear(Linear sRGB) srgb(sRGB) hsl(HSL) hsv(HSV) hwb(HWB) display-p3-linear(Linear Display P3) display-p3(Display P3) a98-rgb-linear(Linear A98 RGB) a98-rgb(A98 RGB) prophoto-rgb-linear(Linear ProPhoto RGB) prophoto-rgb(ProPhoto RGB) lab(Lab) lch(LCh) lab-d65(Lab D65) lch-d65(LCh D65) oklab(Oklab) oklch(OkLCh) okhsl(Okhsl) okhsv(Okhsv) luv(Luv) lchuv(LChuv) hsluv(HSLuv) hpluv(HPLuv) din99o(DIN99o) lch99o(DIN99o LCh) jzazbz(Jzazbz) jzczhz(JzCzhz) ictcp(ICtCp) orgb(oRGB) ipt(IPT) igpgtg(IgPgTg) hunter-lab(Hunter Lab) rlab(RLAB) hsi(HSI) cmy(CMY) cmyk(CMYK) xyy(xyY) prismatic(Prismatic) aces2065-1(ACES2065-1) acescg(ACEScg) acescc(ACEScc) acescct(ACEScct) click xyz-d65 \"./xyz_d65/\" _self click xyz-d50 \"./xyz_d50/\" _self click rec2020 \"./rec2020/\" _self click rec2020-linear \"./rec2020_linear/\" _self click rec2100pq \"./rec2100pq/\" _self click srgb-linear \"./srgb_linear/\" _self click srgb \"./srgb/\" _self click hsl \"./hsl/\" _self click hsv \"./hsv/\" _self click hwb \"./hwb/\" _self click display-p3-linear \"./display_p3_linear/\" _self click display-p3 \"./display_p3/\" _self click a98-rgb-linear \"./a98_rgb_linear/\" _self click a98-rgb \"./a98_rgb/\" _self click prophoto-rgb-linear \"./prophoto_rgb_linear/\" _self click prophoto-rgb \"./prophoto_rgb/\" _self click lab \"./lab/\" _self click lch \"./lch/\" _self click lab-d65 \"./lab_d65/\" _self click lch-d65 \"./lch_d65/\" _self click oklab \"./oklab/\" _self click oklch \"./oklch/\" _self click okhsl \"./okhsl/\" _self click okhsv \"./okhsv/\" _self click luv \"./luv/\" _self click lchuv \"./lchuv/\" _self click hsluv \"./hsluv/\" _self click hpluv \"./hpluv/\" _self click din99o \"./din99o/\" _self click lch99o \"./lch99o/\" _self click jzazbz \"./jzazbz/\" _self click jzczhz \"./jzczhz/\" _self click ictcp \"./ictcp/\" _self click orgb \"./orgb/\" _self click ipt \"./ipt/\" _self click igpgtg \"./igpgtg/\" _self click hunter-lab \"./hunter_lab/\" _self click rlab \"./rlab/\" _self click hsi \"./hsi/\" _self click cmy \"./cmy/\" _self click cmyk \"./cmyk/\" _self click xyy \"./xyy/\" _self click prismatic \"./prismatic/\" _self click aces2065-1 \"./aces2065_1/\" _self click acescg \"./acescg/\" _self click acescc \"./acescc/\" _self click acescct \"./acescct/\" _self .info-container {display: inline-block;}","title":"Color Space Map"},{"location":"colors/a98_rgb/","text":"A98 RGB The A98 RGB color space is registered in Color by default Properties Name: a98-rgb White Point: D65 Coordinates: Name Range * r [0, 1] g [0, 1] b [0, 1] * Range denotes in gamut colors, but the color space supports an extended range beyond the gamut. CIE 1931 xy Chromaticity \u2013 Adobe\u00ae RGB 1998 Chromaticities The Adobe\u00ae RGB (1998) color space or opRGB is a color space developed by Adobe Systems\u00ae, Inc. in 1998. It was designed to encompass most of the colors achievable on CMYK color printers, but by using RGB primary colors on a device such as a computer display. The Adobe\u00ae RGB (1998) color space encompasses roughly 50% of the visible colors specified by the CIELab color space - improving upon the gamut of the sRGB color space, primarily in cyan-green hues. A98 RGB is an Adobe\u00ae 98 Compatible color space. Learn about A98 RGB Channel Aliases Channels Aliases r red g green b blue Input/Output Parsed input and string output formats support all valid CSS forms: color ( a98-rgb r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"a98-rgb\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( a98-rgb r g b / a ) form. >>> Color ( 'a98-rgb' , [ 0.85859 , 0 , 0 ]) color(a98-rgb 0.85859 0 0 / 1) >>> Color ( 'a98-rgb' , [ 0.91489 , 0.64117 , 0.15031 ]) . to_string () color(a98-rgb 0.91489 0.64117 0.15031) Color('a98-rgb', [0.85859, 0, 0]) Color('a98-rgb', [0.91489, 0.64117, 0.15031]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.a98_rgb import A98RGB class Color ( Base ): ... Color . register ( A98RGB ()) .info-container {display: inline-block;}","title":"A98 RGB"},{"location":"colors/a98_rgb/#a98-rgb","text":"The A98 RGB color space is registered in Color by default Properties Name: a98-rgb White Point: D65 Coordinates: Name Range * r [0, 1] g [0, 1] b [0, 1] * Range denotes in gamut colors, but the color space supports an extended range beyond the gamut. CIE 1931 xy Chromaticity \u2013 Adobe\u00ae RGB 1998 Chromaticities The Adobe\u00ae RGB (1998) color space or opRGB is a color space developed by Adobe Systems\u00ae, Inc. in 1998. It was designed to encompass most of the colors achievable on CMYK color printers, but by using RGB primary colors on a device such as a computer display. The Adobe\u00ae RGB (1998) color space encompasses roughly 50% of the visible colors specified by the CIELab color space - improving upon the gamut of the sRGB color space, primarily in cyan-green hues. A98 RGB is an Adobe\u00ae 98 Compatible color space. Learn about A98 RGB","title":"A98 RGB"},{"location":"colors/a98_rgb/#channel-aliases","text":"Channels Aliases r red g green b blue","title":"Channel Aliases"},{"location":"colors/a98_rgb/#inputoutput","text":"Parsed input and string output formats support all valid CSS forms: color ( a98-rgb r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"a98-rgb\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( a98-rgb r g b / a ) form. >>> Color ( 'a98-rgb' , [ 0.85859 , 0 , 0 ]) color(a98-rgb 0.85859 0 0 / 1) >>> Color ( 'a98-rgb' , [ 0.91489 , 0.64117 , 0.15031 ]) . to_string () color(a98-rgb 0.91489 0.64117 0.15031) Color('a98-rgb', [0.85859, 0, 0]) Color('a98-rgb', [0.91489, 0.64117, 0.15031]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/a98_rgb/#registering","text":"from coloraide import Color as Base from coloraide.spaces.a98_rgb import A98RGB class Color ( Base ): ... Color . register ( A98RGB ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/a98_rgb_linear/","text":"Linear A98 RGB The Linear A98 RGB color space is registered in Color by default Properties Name: a98-rgb-linear White Point: D65 Coordinates: Name Range * r [0, 1] g [0, 1] b [0, 1] * Range denotes in gamut colors, but the color space supports an extended range beyond the gamut. CIE 1931 xy Chromaticity \u2013 Adobe\u00ae RGB 1998 Chromaticities The Linear A98 RGB space is the same as A98 RGB except that the transfer function is linear-light (there is no gamma-encoding). Learn about A98 RGB Channel Aliases Channels Aliases r red g green b blue Input/Output Linear A98 RGB is not supported via the CSS spec and the parser input and string output only supports the color () function format using the custom name --a98-rgb-linear : color ( --a98-rgb-linear r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"a98-rgb-linear\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( --a98-rgb-linear r g b / a ) form. >>> Color ( \"a98-rgb\" , [ 0.71513 , 0 , 0 ]) color(a98-rgb 0.71513 0 0 / 1) >>> Color ( \"a98-rgb-linear\" , [ 0.82231 , 0.37626 , 0.01549 ]) . to_string () color(--a98-rgb-linear 0.82231 0.37626 0.01549) Color(\"a98-rgb\", [0.71513, 0, 0]) Color(\"a98-rgb-linear\", [0.82231, 0.37626, 0.01549]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.a98_rgb_linear import A98RGBLinear class Color ( Base ): ... Color . register ( A98RGBLinear ()) .info-container {display: inline-block;}","title":"Linear A98 RGB"},{"location":"colors/a98_rgb_linear/#linear-a98-rgb","text":"The Linear A98 RGB color space is registered in Color by default Properties Name: a98-rgb-linear White Point: D65 Coordinates: Name Range * r [0, 1] g [0, 1] b [0, 1] * Range denotes in gamut colors, but the color space supports an extended range beyond the gamut. CIE 1931 xy Chromaticity \u2013 Adobe\u00ae RGB 1998 Chromaticities The Linear A98 RGB space is the same as A98 RGB except that the transfer function is linear-light (there is no gamma-encoding). Learn about A98 RGB","title":"Linear A98 RGB"},{"location":"colors/a98_rgb_linear/#channel-aliases","text":"Channels Aliases r red g green b blue","title":"Channel Aliases"},{"location":"colors/a98_rgb_linear/#inputoutput","text":"Linear A98 RGB is not supported via the CSS spec and the parser input and string output only supports the color () function format using the custom name --a98-rgb-linear : color ( --a98-rgb-linear r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"a98-rgb-linear\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( --a98-rgb-linear r g b / a ) form. >>> Color ( \"a98-rgb\" , [ 0.71513 , 0 , 0 ]) color(a98-rgb 0.71513 0 0 / 1) >>> Color ( \"a98-rgb-linear\" , [ 0.82231 , 0.37626 , 0.01549 ]) . to_string () color(--a98-rgb-linear 0.82231 0.37626 0.01549) Color(\"a98-rgb\", [0.71513, 0, 0]) Color(\"a98-rgb-linear\", [0.82231, 0.37626, 0.01549]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/a98_rgb_linear/#registering","text":"from coloraide import Color as Base from coloraide.spaces.a98_rgb_linear import A98RGBLinear class Color ( Base ): ... Color . register ( A98RGBLinear ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/aces2065_1/","text":"ACES 2065-1 The ACES 2065-1 color space is not registered in Color by default Properties Name: aces2065-1 White Point: D60 Coordinates: Name Range r [0, 65504] g [0, 65504] b [0, 65504] CIE 1931 xy Chromaticity \u2013 ACES AP0 Chromaticities ACES 2065-1 is a linear color space that uses a set of primaries known as AP0 and has the widest gamut of all the ACES color spaces and fully encompasses the entire visible spectrum. It is meant primarily as an archival format due to its ability to encapsulate all visible colors. Typically, this is the color space you would use to transfer images/animations between production studios. While it is considered an RGB color space, it also has enormous dynamic range with channels being able to well exceed the traditional range of 1. Learn about ACES 2065-1 Channel Aliases Channels Aliases r red g green b blue Input/Output ACES 2065-1 is not supported via the CSS spec and the parser input and string output only supports the color () function format using the custom name --aces2065-1 : color ( --aces2065-1 r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"aces2065-1\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( --aces2065-1 r g b / a ) form. >>> Color ( \"aces2065-1\" , [ 0.43963 , 0.08978 , 0.01754 ]) color(--aces2065-1 0.43963 0.08978 0.01754 / 1) >>> Color ( \"aces2065-1\" , [ 0.58374 , 0.39584 , 0.05951 ]) . to_string () color(--aces2065-1 0.58374 0.39584 0.05951) Color(\"aces2065-1\", [0.43963, 0.08978, 0.01754]) Color(\"aces2065-1\", [0.58374, 0.39584, 0.05951]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.aces2065_1 import ACES20651 class Color ( Base ): ... Color . register ( ACES20651 ()) .info-container {display: inline-block;}","title":"ACES 2065-1"},{"location":"colors/aces2065_1/#aces-2065-1","text":"The ACES 2065-1 color space is not registered in Color by default Properties Name: aces2065-1 White Point: D60 Coordinates: Name Range r [0, 65504] g [0, 65504] b [0, 65504] CIE 1931 xy Chromaticity \u2013 ACES AP0 Chromaticities ACES 2065-1 is a linear color space that uses a set of primaries known as AP0 and has the widest gamut of all the ACES color spaces and fully encompasses the entire visible spectrum. It is meant primarily as an archival format due to its ability to encapsulate all visible colors. Typically, this is the color space you would use to transfer images/animations between production studios. While it is considered an RGB color space, it also has enormous dynamic range with channels being able to well exceed the traditional range of 1. Learn about ACES 2065-1","title":"ACES 2065-1"},{"location":"colors/aces2065_1/#channel-aliases","text":"Channels Aliases r red g green b blue","title":"Channel Aliases"},{"location":"colors/aces2065_1/#inputoutput","text":"ACES 2065-1 is not supported via the CSS spec and the parser input and string output only supports the color () function format using the custom name --aces2065-1 : color ( --aces2065-1 r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"aces2065-1\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( --aces2065-1 r g b / a ) form. >>> Color ( \"aces2065-1\" , [ 0.43963 , 0.08978 , 0.01754 ]) color(--aces2065-1 0.43963 0.08978 0.01754 / 1) >>> Color ( \"aces2065-1\" , [ 0.58374 , 0.39584 , 0.05951 ]) . to_string () color(--aces2065-1 0.58374 0.39584 0.05951) Color(\"aces2065-1\", [0.43963, 0.08978, 0.01754]) Color(\"aces2065-1\", [0.58374, 0.39584, 0.05951]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/aces2065_1/#registering","text":"from coloraide import Color as Base from coloraide.spaces.aces2065_1 import ACES20651 class Color ( Base ): ... Color . register ( ACES20651 ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/acescc/","text":"ACEScc The ACEScc color space is not registered in Color by default Properties Name: acescc White Point: D60 Coordinates: Name Range * r [-0.0729, 1.468] g [-0.0729, 1.468] b [-0.0729, 1.468] * Ranges are approximate and have been rounded. ACEScc is a color space based on the API primaries and is primarily used for color grading. It is a logarithmic color space, unlike ACEScg, and maps black at 0 and white at 1. Learn about ACEScc Channel Aliases Channels Aliases r red g green b blue Input/Output ACEScc is not supported via the CSS spec and the parser input and string output only supports the color () function format using the custom name --acescc : color ( --acescc r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"acescc\" , [ 1 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( --acescc r g b / a ) form. >>> Color ( 'acescc' , [ 0.51451 , 0.33604 , 0.23515 ]) color(--acescc 0.51451 0.33604 0.23515 / 1) >>> Color ( 'acescc' , [ 0.53009 , 0.48237 , 0.32561 ]) . to_string () color(--acescc 0.53009 0.48237 0.32561) Color('acescc', [0.51451, 0.33604, 0.23515]) Color('acescc', [0.53009, 0.48237, 0.32561]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.acescc import ACEScc class Color ( Base ): ... Color . register ( ACEScc ()) .info-container {display: inline-block;}","title":"ACEScc"},{"location":"colors/acescc/#acescc","text":"The ACEScc color space is not registered in Color by default Properties Name: acescc White Point: D60 Coordinates: Name Range * r [-0.0729, 1.468] g [-0.0729, 1.468] b [-0.0729, 1.468] * Ranges are approximate and have been rounded. ACEScc is a color space based on the API primaries and is primarily used for color grading. It is a logarithmic color space, unlike ACEScg, and maps black at 0 and white at 1. Learn about ACEScc","title":"ACEScc"},{"location":"colors/acescc/#channel-aliases","text":"Channels Aliases r red g green b blue","title":"Channel Aliases"},{"location":"colors/acescc/#inputoutput","text":"ACEScc is not supported via the CSS spec and the parser input and string output only supports the color () function format using the custom name --acescc : color ( --acescc r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"acescc\" , [ 1 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( --acescc r g b / a ) form. >>> Color ( 'acescc' , [ 0.51451 , 0.33604 , 0.23515 ]) color(--acescc 0.51451 0.33604 0.23515 / 1) >>> Color ( 'acescc' , [ 0.53009 , 0.48237 , 0.32561 ]) . to_string () color(--acescc 0.53009 0.48237 0.32561) Color('acescc', [0.51451, 0.33604, 0.23515]) Color('acescc', [0.53009, 0.48237, 0.32561]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/acescc/#registering","text":"from coloraide import Color as Base from coloraide.spaces.acescc import ACEScc class Color ( Base ): ... Color . register ( ACEScc ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/acescct/","text":"ACEScct The ACEScc color space is not registered in Color by default Properties Name: acescct White Point: D60 Coordinates: Name Range * r [-0.3584, 1.468] g [-0.3584, 1.468] b [-0.3584, 1.468] * Ranges are approximate and rounded to 3 decimal places. ACEScct is very similar to ACEScc except that it adds a \"toe\" or a gamma curve in the dark region of the color space. This encoding is more appropriate for legacy color correction operators. Learn about ACEScct Channel Aliases Channels Aliases r red g green b blue Inputs/Output ACEScct is not supported via the CSS spec and the parser input and string output only supports the color () function format using the custom name --acescct : color ( --acescct r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"acescct\" , [ 1 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( --acescct r g b / a ) form. >>> Color ( \"acescct\" , [ 0.51451 , 0.33604 , 0.23515 ]) color(--acescct 0.51451 0.33604 0.23515 / 1) >>> Color ( \"acescct\" , [ 0.53009 , 0.48237 , 0.32561 ]) . to_string () color(--acescct 0.53009 0.48237 0.32561) Color(\"acescct\", [0.51451, 0.33604, 0.23515]) Color(\"acescct\", [0.53009, 0.48237, 0.32561]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.acescct import ACEScct class Color ( Base ): ... Color . register ( ACEScct ()) .info-container {display: inline-block;}","title":"ACEScct"},{"location":"colors/acescct/#acescct","text":"The ACEScc color space is not registered in Color by default Properties Name: acescct White Point: D60 Coordinates: Name Range * r [-0.3584, 1.468] g [-0.3584, 1.468] b [-0.3584, 1.468] * Ranges are approximate and rounded to 3 decimal places. ACEScct is very similar to ACEScc except that it adds a \"toe\" or a gamma curve in the dark region of the color space. This encoding is more appropriate for legacy color correction operators. Learn about ACEScct","title":"ACEScct"},{"location":"colors/acescct/#channel-aliases","text":"Channels Aliases r red g green b blue","title":"Channel Aliases"},{"location":"colors/acescct/#inputsoutput","text":"ACEScct is not supported via the CSS spec and the parser input and string output only supports the color () function format using the custom name --acescct : color ( --acescct r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"acescct\" , [ 1 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( --acescct r g b / a ) form. >>> Color ( \"acescct\" , [ 0.51451 , 0.33604 , 0.23515 ]) color(--acescct 0.51451 0.33604 0.23515 / 1) >>> Color ( \"acescct\" , [ 0.53009 , 0.48237 , 0.32561 ]) . to_string () color(--acescct 0.53009 0.48237 0.32561) Color(\"acescct\", [0.51451, 0.33604, 0.23515]) Color(\"acescct\", [0.53009, 0.48237, 0.32561]).to_string() Edit Share Run Cancel","title":"Inputs/Output"},{"location":"colors/acescct/#registering","text":"from coloraide import Color as Base from coloraide.spaces.acescct import ACEScct class Color ( Base ): ... Color . register ( ACEScct ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/acescg/","text":"ACEScg The ACEScg color space is not registered in Color by default Properties Name: acescg White Point: D60 Coordinates: Name Range r [0, 65504] g [0, 65504] b [0, 65504] CIE 1931 xy Chromaticity \u2013 ACES AP1 Chromaticities ACEScg is a color space often used by CG artists. It is \"scene-referred\" or linear. It doesn't have as wide a color gamut as ACES 2065-1 as it uses a different set of primaries called AP1, but it is far larger than most other color spaces one might use and has an enormous dynamic range. Learn about ACEScg Channel Aliases Channels Aliases r red g green b blue Input/Output ACEScg is not supported via the CSS spec and the parser input and string output only supports the color () function format using the custom name --acescg : color ( --acescg r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"acescg\" , [ 1 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( --acescg r g b / a ) form. >>> Color ( \"acescg\" , [ 0.6131 , 0.07019 , 0.02062 ]) color(--acescg 0.6131 0.07019 0.02062 / 1) >>> Color ( \"acescg\" , [ 0.74085 , 0.41498 , 0.06184 ]) . to_string () color(--acescg 0.74085 0.41498 0.06184) Color(\"acescg\", [0.6131, 0.07019, 0.02062]) Color(\"acescg\", [0.74085, 0.41498, 0.06184]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.acescg import ACEScg class Color ( Base ): ... Color . register ( ACEScg ()) .info-container {display: inline-block;}","title":"ACEScg"},{"location":"colors/acescg/#acescg","text":"The ACEScg color space is not registered in Color by default Properties Name: acescg White Point: D60 Coordinates: Name Range r [0, 65504] g [0, 65504] b [0, 65504] CIE 1931 xy Chromaticity \u2013 ACES AP1 Chromaticities ACEScg is a color space often used by CG artists. It is \"scene-referred\" or linear. It doesn't have as wide a color gamut as ACES 2065-1 as it uses a different set of primaries called AP1, but it is far larger than most other color spaces one might use and has an enormous dynamic range. Learn about ACEScg","title":"ACEScg"},{"location":"colors/acescg/#channel-aliases","text":"Channels Aliases r red g green b blue","title":"Channel Aliases"},{"location":"colors/acescg/#inputoutput","text":"ACEScg is not supported via the CSS spec and the parser input and string output only supports the color () function format using the custom name --acescg : color ( --acescg r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"acescg\" , [ 1 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( --acescg r g b / a ) form. >>> Color ( \"acescg\" , [ 0.6131 , 0.07019 , 0.02062 ]) color(--acescg 0.6131 0.07019 0.02062 / 1) >>> Color ( \"acescg\" , [ 0.74085 , 0.41498 , 0.06184 ]) . to_string () color(--acescg 0.74085 0.41498 0.06184) Color(\"acescg\", [0.6131, 0.07019, 0.02062]) Color(\"acescg\", [0.74085, 0.41498, 0.06184]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/acescg/#registering","text":"from coloraide import Color as Base from coloraide.spaces.acescg import ACEScg class Color ( Base ): ... Color . register ( ACEScg ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/cmy/","text":"CMY The CMY color space is not registered in Color by default Properties Name: cmy White Point: D65 Coordinates: Name Range * c [0, 1] m [0, 1] y [0, 1] * Range denotes in gamut colors, but the color space supports an extended range beyond the gamut. The sRGB gamut represented within the CMY color space. The CMY color model is a subtractive color model in which cyan, magenta and yellow pigments or dyes are added together in various ways to reproduce a broad array of colors. The name of the model comes from the initials of the three subtractive primary colors: cyan, magenta, and yellow. The CMY color space, as ColorAide Extras has chosen to implement it, is directly calculated from the sRGB color space, and as such, is based off the sRGB primaries. Learn more . Channel Aliases Channels Aliases c cyan m magenta y yellow Input/Output CMY is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --cmy : color ( --cmy c m y / a ) // Color function The string representation of the color object and the default string output use the color ( --cmy c m y / a ) form. >>> Color ( \"cmy\" , [ 0 , 1 , 1 ]) color(--cmy 0 1 1 / 1) >>> Color ( \"cmy\" , [ 0 , 0.35294 , 1 ]) . to_string () color(--cmy 0 0.35294 1) Color(\"cmy\", [0, 1, 1]) Color(\"cmy\", [0, 0.35294, 1]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.cmy import CMY class Color ( Base ): ... Color . register ( CMY ()) .info-container {display: inline-block;}","title":"CMY"},{"location":"colors/cmy/#cmy","text":"The CMY color space is not registered in Color by default Properties Name: cmy White Point: D65 Coordinates: Name Range * c [0, 1] m [0, 1] y [0, 1] * Range denotes in gamut colors, but the color space supports an extended range beyond the gamut. The sRGB gamut represented within the CMY color space. The CMY color model is a subtractive color model in which cyan, magenta and yellow pigments or dyes are added together in various ways to reproduce a broad array of colors. The name of the model comes from the initials of the three subtractive primary colors: cyan, magenta, and yellow. The CMY color space, as ColorAide Extras has chosen to implement it, is directly calculated from the sRGB color space, and as such, is based off the sRGB primaries. Learn more .","title":"CMY"},{"location":"colors/cmy/#channel-aliases","text":"Channels Aliases c cyan m magenta y yellow","title":"Channel Aliases"},{"location":"colors/cmy/#inputoutput","text":"CMY is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --cmy : color ( --cmy c m y / a ) // Color function The string representation of the color object and the default string output use the color ( --cmy c m y / a ) form. >>> Color ( \"cmy\" , [ 0 , 1 , 1 ]) color(--cmy 0 1 1 / 1) >>> Color ( \"cmy\" , [ 0 , 0.35294 , 1 ]) . to_string () color(--cmy 0 0.35294 1) Color(\"cmy\", [0, 1, 1]) Color(\"cmy\", [0, 0.35294, 1]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/cmy/#registering","text":"from coloraide import Color as Base from coloraide.spaces.cmy import CMY class Color ( Base ): ... Color . register ( CMY ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/cmyk/","text":"CMYK The CMYK color space is not registered in Color by default Properties Name: cmyk White Point: D65 Coordinates: Name Range * c [0, 1] m [0, 1] y [0, 1] k [0, 1] * Range denotes in gamut colors, but the color space supports an extended range beyond the gamut. The CMYK color model is a just like CMY except that it adds an additional channel k to control blackness. The CMYK color space, as ColorAide Extras has chosen to implement it, is directly calculated from the sRGB color space, and as such, is based off the sRGB primaries. Learn more . Channel Aliases Channels Aliases c cyan m magenta y yellow k black Input/Output CMY is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --cmyk : color ( --cmyk c m y k / a ) // Color function The string representation of the color object and the default string output use the color ( --cmyk c m y k / a ) form. >>> Color ( \"cmyk\" , [ 0 , 1 , 1 , 0 ]) color(--cmyk 0 1 1 0 / 1) >>> Color ( \"cmyk\" , [ 0 , 0.35294 , 1 , 0 ]) . to_string () color(--cmyk 0 0.35294 1 0) Color(\"cmyk\", [0, 1, 1, 0]) Color(\"cmyk\", [0, 0.35294, 1, 0]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.cmyk import CMYK class Color ( Base ): ... Color . register ( CMYK ()) .info-container {display: inline-block;}","title":"CMYK"},{"location":"colors/cmyk/#cmyk","text":"The CMYK color space is not registered in Color by default Properties Name: cmyk White Point: D65 Coordinates: Name Range * c [0, 1] m [0, 1] y [0, 1] k [0, 1] * Range denotes in gamut colors, but the color space supports an extended range beyond the gamut. The CMYK color model is a just like CMY except that it adds an additional channel k to control blackness. The CMYK color space, as ColorAide Extras has chosen to implement it, is directly calculated from the sRGB color space, and as such, is based off the sRGB primaries. Learn more .","title":"CMYK"},{"location":"colors/cmyk/#channel-aliases","text":"Channels Aliases c cyan m magenta y yellow k black","title":"Channel Aliases"},{"location":"colors/cmyk/#inputoutput","text":"CMY is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --cmyk : color ( --cmyk c m y k / a ) // Color function The string representation of the color object and the default string output use the color ( --cmyk c m y k / a ) form. >>> Color ( \"cmyk\" , [ 0 , 1 , 1 , 0 ]) color(--cmyk 0 1 1 0 / 1) >>> Color ( \"cmyk\" , [ 0 , 0.35294 , 1 , 0 ]) . to_string () color(--cmyk 0 0.35294 1 0) Color(\"cmyk\", [0, 1, 1, 0]) Color(\"cmyk\", [0, 0.35294, 1, 0]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/cmyk/#registering","text":"from coloraide import Color as Base from coloraide.spaces.cmyk import CMYK class Color ( Base ): ... Color . register ( CMYK ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/din99o/","text":"DIN99o The DIN99o color space is not registered in Color by default Properties Name: din99o White Point: D65 Coordinates: Name Range * l [0, 100] a [-55, 55] b [-55, 55] * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs in relation to the Display P3 color space. The sRGB gamut represented within the DIN99o color space. The DIN99 color space system is a further development of the CIELab color space system developed by the FNF / FNL 2 Colorimetry Working Committee. It takes the CIELab space (with a D65 illuminant) and compresses it such that the space yields better equidistant using Euclidean distance. The whole color space is essentially modified to better fit the color distancing algorithm opposed to CIELab which has adapted the color distancing algorithm to better fit the color space, the latest iteration being \u2206E * 00 . Learn about DIN99o Channel Aliases Channels Aliases l lightness a b Input/Output As DIN99o is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --din99o : color ( --din99o l u v / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"din99o\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output use the color ( --din99o l u v / a ) form. >>> Color ( \"din99o\" , [ 57.289 , 39.498 , 30.518 ]) color(--din99o 57.289 39.498 30.518 / 1) >>> Color ( \"din99o\" , [ 77.855 , 16.444 , 40.318 ]) . to_string () color(--din99o 77.855 16.444 40.318) Color(\"din99o\", [57.289, 39.498, 30.518]) Color(\"din99o\", [77.855, 16.444, 40.318]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.din99o import DIN99o class Color ( Base ): ... Color . register ( DIN99o ()) .info-container {display: inline-block;}","title":"DIN99o"},{"location":"colors/din99o/#din99o","text":"The DIN99o color space is not registered in Color by default Properties Name: din99o White Point: D65 Coordinates: Name Range * l [0, 100] a [-55, 55] b [-55, 55] * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs in relation to the Display P3 color space. The sRGB gamut represented within the DIN99o color space. The DIN99 color space system is a further development of the CIELab color space system developed by the FNF / FNL 2 Colorimetry Working Committee. It takes the CIELab space (with a D65 illuminant) and compresses it such that the space yields better equidistant using Euclidean distance. The whole color space is essentially modified to better fit the color distancing algorithm opposed to CIELab which has adapted the color distancing algorithm to better fit the color space, the latest iteration being \u2206E * 00 . Learn about DIN99o","title":"DIN99o"},{"location":"colors/din99o/#channel-aliases","text":"Channels Aliases l lightness a b","title":"Channel Aliases"},{"location":"colors/din99o/#inputoutput","text":"As DIN99o is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --din99o : color ( --din99o l u v / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"din99o\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output use the color ( --din99o l u v / a ) form. >>> Color ( \"din99o\" , [ 57.289 , 39.498 , 30.518 ]) color(--din99o 57.289 39.498 30.518 / 1) >>> Color ( \"din99o\" , [ 77.855 , 16.444 , 40.318 ]) . to_string () color(--din99o 77.855 16.444 40.318) Color(\"din99o\", [57.289, 39.498, 30.518]) Color(\"din99o\", [77.855, 16.444, 40.318]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/din99o/#registering","text":"from coloraide import Color as Base from coloraide.spaces.din99o import DIN99o class Color ( Base ): ... Color . register ( DIN99o ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/display_p3/","text":"Display P3 The Display P3 color space is registered in Color by default Properties Name: display-p3 White Point: D65 Coordinates: Name Range * r [0, 1] g [0, 1] b [0, 1] * Range denotes in gamut colors, but the color space supports an extended range beyond the gamut. CIE 1931 xy Chromaticity \u2013 Display P3 Chromaticities Display P3 is a combination of the DCI-P3 color gamut with the D65 white point together with the sRGB gamma curve. It originated from the DCI-P3 color gamut's implementation in digital cinema projectors, as this standard offers more vibrant greens and reds than the traditional sRGB color gamut. Learn about Display P3 Channel Aliases Channels Aliases r red g green b blue Input/Output Parsed input and string output formats support all valid CSS forms: color ( display-p3 r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"display-p3\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( display-p3 r g b / a ) form. >>> Color ( 'display-p3' , [ 0.91749 , 0.20029 , 0.13856 ]) color(display-p3 0.91749 0.20029 0.13856 / 1) >>> Color ( 'display-p3' , [ 0.94965 , 0.6629 , 0.23297 ]) . to_string () color(display-p3 0.94965 0.6629 0.23297) Color('display-p3', [0.91749, 0.20029, 0.13856]) Color('display-p3', [0.94965, 0.6629, 0.23297]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.display_p3 import DisplayP3 class Color ( Base ): ... Color . register ( DisplayP3 ()) .info-container {display: inline-block;}","title":"Display P3"},{"location":"colors/display_p3/#display-p3","text":"The Display P3 color space is registered in Color by default Properties Name: display-p3 White Point: D65 Coordinates: Name Range * r [0, 1] g [0, 1] b [0, 1] * Range denotes in gamut colors, but the color space supports an extended range beyond the gamut. CIE 1931 xy Chromaticity \u2013 Display P3 Chromaticities Display P3 is a combination of the DCI-P3 color gamut with the D65 white point together with the sRGB gamma curve. It originated from the DCI-P3 color gamut's implementation in digital cinema projectors, as this standard offers more vibrant greens and reds than the traditional sRGB color gamut. Learn about Display P3","title":"Display P3"},{"location":"colors/display_p3/#channel-aliases","text":"Channels Aliases r red g green b blue","title":"Channel Aliases"},{"location":"colors/display_p3/#inputoutput","text":"Parsed input and string output formats support all valid CSS forms: color ( display-p3 r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"display-p3\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( display-p3 r g b / a ) form. >>> Color ( 'display-p3' , [ 0.91749 , 0.20029 , 0.13856 ]) color(display-p3 0.91749 0.20029 0.13856 / 1) >>> Color ( 'display-p3' , [ 0.94965 , 0.6629 , 0.23297 ]) . to_string () color(display-p3 0.94965 0.6629 0.23297) Color('display-p3', [0.91749, 0.20029, 0.13856]) Color('display-p3', [0.94965, 0.6629, 0.23297]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/display_p3/#registering","text":"from coloraide import Color as Base from coloraide.spaces.display_p3 import DisplayP3 class Color ( Base ): ... Color . register ( DisplayP3 ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/display_p3_linear/","text":"Linear Display P3 The Linear Display P3 color space is registered in Color by default Properties Name: --display-p3-linear White Point: D65 Coordinates: Name Range * r [0, 1] g [0, 1] b [0, 1] * Range denotes in gamut colors, but the color space supports an extended range beyond the gamut. CIE 1931 xy Chromaticity \u2013 Display P3 Chromaticities The Linear Display P3 space is the same as Display P3 except that the transfer function is linear-light (there is no gamma-encoding). Learn about Display P3 Channel Aliases Channels Aliases r red g green b blue Input/Output Linear Display P3 is not supported via the CSS spec and the parser input and string output only supports the color () function format using the custom name --display-p3-linear : color ( --display-p3-linear r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"display-p3-linear\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( --display-p3-linear r g b / a ) form. >>> Color ( \"display-p3-linear\" , [ 0.82246 , 0.03319 , 0.01708 ]) color(--display-p3-linear 0.82246 0.03319 0.01708 / 1) >>> Color ( \"display-p3-linear\" , [ 0.88926 , 0.39697 , 0.04432 ]) . to_string () color(--display-p3-linear 0.88926 0.39697 0.04432) Color(\"display-p3-linear\", [0.82246, 0.03319, 0.01708]) Color(\"display-p3-linear\", [0.88926, 0.39697, 0.04432]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.display_p3_linear import DisplayP3 class Color ( Base ): ... Color . register ( DisplayP3Linear ()) .info-container {display: inline-block;}","title":"Linear Display P3"},{"location":"colors/display_p3_linear/#linear-display-p3","text":"The Linear Display P3 color space is registered in Color by default Properties Name: --display-p3-linear White Point: D65 Coordinates: Name Range * r [0, 1] g [0, 1] b [0, 1] * Range denotes in gamut colors, but the color space supports an extended range beyond the gamut. CIE 1931 xy Chromaticity \u2013 Display P3 Chromaticities The Linear Display P3 space is the same as Display P3 except that the transfer function is linear-light (there is no gamma-encoding). Learn about Display P3","title":"Linear Display P3"},{"location":"colors/display_p3_linear/#channel-aliases","text":"Channels Aliases r red g green b blue","title":"Channel Aliases"},{"location":"colors/display_p3_linear/#inputoutput","text":"Linear Display P3 is not supported via the CSS spec and the parser input and string output only supports the color () function format using the custom name --display-p3-linear : color ( --display-p3-linear r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"display-p3-linear\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( --display-p3-linear r g b / a ) form. >>> Color ( \"display-p3-linear\" , [ 0.82246 , 0.03319 , 0.01708 ]) color(--display-p3-linear 0.82246 0.03319 0.01708 / 1) >>> Color ( \"display-p3-linear\" , [ 0.88926 , 0.39697 , 0.04432 ]) . to_string () color(--display-p3-linear 0.88926 0.39697 0.04432) Color(\"display-p3-linear\", [0.82246, 0.03319, 0.01708]) Color(\"display-p3-linear\", [0.88926, 0.39697, 0.04432]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/display_p3_linear/#registering","text":"from coloraide import Color as Base from coloraide.spaces.display_p3_linear import DisplayP3 class Color ( Base ): ... Color . register ( DisplayP3Linear ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/hpluv/","text":"HPLuv The HPLuv color space is not registered in Color by default Properties Name: hpluv Color CSS ID: --hpluv White Point: D65 Coordinates: Name Range h [0, 360) p [0, 100] l [0, 100] HSLuv color space in 3D HPLuv is similar to HSLuv but takes as many colors as it can from CIELCh uv without distorting the chroma. This ends up reducing the gamut to a subset of the sRGB gamut. In the end, only more pastel colors remain. Learn about HSLuv Channel Aliases Channels Aliases h hue s perpendiculars l lightness Inputs/Output HPLuv is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --hpluv : color ( --hpluv h p l / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"hpluv\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output use the color ( --hpluv h p l / a ) form. >>> Color ( \"hpluv\" , [ 23.881 , 100 , 53.237 ]) color(--hpluv 23.881 100 53.237 / 1) >>> Color ( \"hpluv\" , [ 49.45 , 100 , 74.934 ]) . to_string () color(--hpluv 49.45 100 74.934) Color(\"hpluv\", [23.881, 100, 53.237]) Color(\"hpluv\", [49.45, 100, 74.934]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.hpluv import HSPLuv class Color ( Base ): ... Color . register ( HPLuv ()) .info-container {display: inline-block;}","title":"HPLuv"},{"location":"colors/hpluv/#hpluv","text":"The HPLuv color space is not registered in Color by default Properties Name: hpluv Color CSS ID: --hpluv White Point: D65 Coordinates: Name Range h [0, 360) p [0, 100] l [0, 100] HSLuv color space in 3D HPLuv is similar to HSLuv but takes as many colors as it can from CIELCh uv without distorting the chroma. This ends up reducing the gamut to a subset of the sRGB gamut. In the end, only more pastel colors remain. Learn about HSLuv","title":"HPLuv"},{"location":"colors/hpluv/#channel-aliases","text":"Channels Aliases h hue s perpendiculars l lightness","title":"Channel Aliases"},{"location":"colors/hpluv/#inputsoutput","text":"HPLuv is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --hpluv : color ( --hpluv h p l / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"hpluv\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output use the color ( --hpluv h p l / a ) form. >>> Color ( \"hpluv\" , [ 23.881 , 100 , 53.237 ]) color(--hpluv 23.881 100 53.237 / 1) >>> Color ( \"hpluv\" , [ 49.45 , 100 , 74.934 ]) . to_string () color(--hpluv 49.45 100 74.934) Color(\"hpluv\", [23.881, 100, 53.237]) Color(\"hpluv\", [49.45, 100, 74.934]).to_string() Edit Share Run Cancel","title":"Inputs/Output"},{"location":"colors/hpluv/#registering","text":"from coloraide import Color as Base from coloraide.spaces.hpluv import HSPLuv class Color ( Base ): ... Color . register ( HPLuv ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/hsi/","text":"HSI The HSI color space is not registered in Color by default Properties Name: hsi White Point: D65 Coordinates: Name Range h [0, 360) s [0, 1] i [0, 1] The sRGB gamut represented within the HSI color space. The HSI model is similar to models like HSL and HSV except that it uses I for intensity instead of Lightness or Value. It does not attempt to \"fill\" a cylinder by its definition of saturation leading to a very different look when we plot it. Learn more . Channel Aliases Channels Aliases h hue s saturation i intensity Input/Output The HSI space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --hsi : color ( --hsi h s i / a ) // Color function The string representation of the color object and the default string output use the color ( --hsi h s i / a ) form. >>> Color ( \"hsi\" , [ 0 , 1 , 0.33333 ]) color(--hsi 0 1 0.33333 / 1) >>> Color ( \"hsi\" , [ 38.824 , 1 , 0.54902 ]) . to_string () color(--hsi 38.824 1 0.54902) Color(\"hsi\", [0, 1, 0.33333]) Color(\"hsi\", [38.824, 1, 0.54902]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.hsi import HSI class Color ( Base ): ... Color . register ( HSI ()) .info-container {display: inline-block;}","title":"HSI"},{"location":"colors/hsi/#hsi","text":"The HSI color space is not registered in Color by default Properties Name: hsi White Point: D65 Coordinates: Name Range h [0, 360) s [0, 1] i [0, 1] The sRGB gamut represented within the HSI color space. The HSI model is similar to models like HSL and HSV except that it uses I for intensity instead of Lightness or Value. It does not attempt to \"fill\" a cylinder by its definition of saturation leading to a very different look when we plot it. Learn more .","title":"HSI"},{"location":"colors/hsi/#channel-aliases","text":"Channels Aliases h hue s saturation i intensity","title":"Channel Aliases"},{"location":"colors/hsi/#inputoutput","text":"The HSI space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --hsi : color ( --hsi h s i / a ) // Color function The string representation of the color object and the default string output use the color ( --hsi h s i / a ) form. >>> Color ( \"hsi\" , [ 0 , 1 , 0.33333 ]) color(--hsi 0 1 0.33333 / 1) >>> Color ( \"hsi\" , [ 38.824 , 1 , 0.54902 ]) . to_string () color(--hsi 38.824 1 0.54902) Color(\"hsi\", [0, 1, 0.33333]) Color(\"hsi\", [38.824, 1, 0.54902]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/hsi/#registering","text":"from coloraide import Color as Base from coloraide.spaces.hsi import HSI class Color ( Base ): ... Color . register ( HSI ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/hsl/","text":"HSL The HSL color space is registered in Color by default Properties Name: hsl White Point: D65 Coordinates: Name Range h [0, 360) s [0, 1] l [0, 1] HSL color space in 3D HSL is an alternative representations of the RGB color model, designed in the 1970s by computer graphics researchers to more closely align with the way human vision perceives color-making attributes. In these models, colors of each hue are arranged in a radial slice, around a central axis of neutral colors which ranges from black at the bottom to white at the top. HSL models the way different paints mix together to create color in the real world, with the lightness dimension resembling the varying amounts of black or white paint in the mixture. Learn about HSL Channel Aliases Channels Aliases h hue s saturation l lightness Input/Output Parsed input and string output formats support all valid CSS forms. In addition, we also allow the color () function format using the custom name --hsl : hsl ( h s l / a ) // HSL function hsl ( h , s , l ) // Legacy HSL function hsla ( h , s , l , a ) // Legacy HSLA function color ( --hsl h s l / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"hsl\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object will always default to the color ( --hsl h s l / a ) form, but the default string output will be the hsl ( h s l / a ) form. >>> Color ( \"hsl\" , [ 0 , 1 , 0.5 ]) color(--hsl 0 1 0.5 / 1) >>> Color ( \"hsl\" , [ 38.824 , 1 , 0.5 ], ) . to_string () hsl(38.824 100% 50%) >>> Color ( \"hsl\" , [ 60 , 1 , 0.5 ]) . to_string ( comma = True ) hsl(60, 100%, 50%) >>> Color ( \"hsl\" , [ 120 , 1 , 0.25098 ]) . to_string ( color = True ) color(--hsl 120 1 0.25098) Color(\"hsl\", [0, 1, 0.5]) Color(\"hsl\", [38.824, 1, 0.5], ).to_string() Color(\"hsl\", [60, 1, 0.5]).to_string(comma=True) Color(\"hsl\", [120, 1, 0.25098]).to_string(color=True) Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.hsl import HSL class Color ( Base ): ... Color . register ( HSL ()) .info-container {display: inline-block;}","title":"HSL"},{"location":"colors/hsl/#hsl","text":"The HSL color space is registered in Color by default Properties Name: hsl White Point: D65 Coordinates: Name Range h [0, 360) s [0, 1] l [0, 1] HSL color space in 3D HSL is an alternative representations of the RGB color model, designed in the 1970s by computer graphics researchers to more closely align with the way human vision perceives color-making attributes. In these models, colors of each hue are arranged in a radial slice, around a central axis of neutral colors which ranges from black at the bottom to white at the top. HSL models the way different paints mix together to create color in the real world, with the lightness dimension resembling the varying amounts of black or white paint in the mixture. Learn about HSL","title":"HSL"},{"location":"colors/hsl/#channel-aliases","text":"Channels Aliases h hue s saturation l lightness","title":"Channel Aliases"},{"location":"colors/hsl/#inputoutput","text":"Parsed input and string output formats support all valid CSS forms. In addition, we also allow the color () function format using the custom name --hsl : hsl ( h s l / a ) // HSL function hsl ( h , s , l ) // Legacy HSL function hsla ( h , s , l , a ) // Legacy HSLA function color ( --hsl h s l / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"hsl\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object will always default to the color ( --hsl h s l / a ) form, but the default string output will be the hsl ( h s l / a ) form. >>> Color ( \"hsl\" , [ 0 , 1 , 0.5 ]) color(--hsl 0 1 0.5 / 1) >>> Color ( \"hsl\" , [ 38.824 , 1 , 0.5 ], ) . to_string () hsl(38.824 100% 50%) >>> Color ( \"hsl\" , [ 60 , 1 , 0.5 ]) . to_string ( comma = True ) hsl(60, 100%, 50%) >>> Color ( \"hsl\" , [ 120 , 1 , 0.25098 ]) . to_string ( color = True ) color(--hsl 120 1 0.25098) Color(\"hsl\", [0, 1, 0.5]) Color(\"hsl\", [38.824, 1, 0.5], ).to_string() Color(\"hsl\", [60, 1, 0.5]).to_string(comma=True) Color(\"hsl\", [120, 1, 0.25098]).to_string(color=True) Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/hsl/#registering","text":"from coloraide import Color as Base from coloraide.spaces.hsl import HSL class Color ( Base ): ... Color . register ( HSL ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/hsluv/","text":"HSLuv The HSLuv color space is not registered in Color by default Properties Name: hsluv White Point: D65 Coordinates: Name Range h [0, 360) s [0, 100] l [0, 100] HSLuv color space in 3D HSLuv is a human-friendly alternative to HSL. It was formerly known as \"HUSL\" and is a variation of the CIELCh uv color space, where the chroma component is replaced by a saturation component which allows you to span all the available chroma as a percentage. HSLuv is constrained to the sRGB gamut. Learn about HSLuv Channel Aliases Channels Aliases h hue s saturation l lightness Input/Output HSLuv is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --hsluv : color ( --hsluv h s l / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"hsluv\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output use the color ( --hsluv h s l / a ) form. >>> Color ( \"hsluv\" , [ 12.177 , 100 , 53.237 ]) color(--hsluv 12.177 100 53.237 / 1) >>> Color ( \"hsluv\" , [ 44.683 , 100 , 74.934 ]) . to_string () color(--hsluv 44.683 100 74.934) Color(\"hsluv\", [12.177, 100, 53.237]) Color(\"hsluv\", [44.683, 100, 74.934]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.hsluv import HSLuv class Color ( Base ): ... Color . register ( HSLuv ()) .info-container {display: inline-block;}","title":"HSLuv"},{"location":"colors/hsluv/#hsluv","text":"The HSLuv color space is not registered in Color by default Properties Name: hsluv White Point: D65 Coordinates: Name Range h [0, 360) s [0, 100] l [0, 100] HSLuv color space in 3D HSLuv is a human-friendly alternative to HSL. It was formerly known as \"HUSL\" and is a variation of the CIELCh uv color space, where the chroma component is replaced by a saturation component which allows you to span all the available chroma as a percentage. HSLuv is constrained to the sRGB gamut. Learn about HSLuv","title":"HSLuv"},{"location":"colors/hsluv/#channel-aliases","text":"Channels Aliases h hue s saturation l lightness","title":"Channel Aliases"},{"location":"colors/hsluv/#inputoutput","text":"HSLuv is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --hsluv : color ( --hsluv h s l / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"hsluv\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output use the color ( --hsluv h s l / a ) form. >>> Color ( \"hsluv\" , [ 12.177 , 100 , 53.237 ]) color(--hsluv 12.177 100 53.237 / 1) >>> Color ( \"hsluv\" , [ 44.683 , 100 , 74.934 ]) . to_string () color(--hsluv 44.683 100 74.934) Color(\"hsluv\", [12.177, 100, 53.237]) Color(\"hsluv\", [44.683, 100, 74.934]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/hsluv/#registering","text":"from coloraide import Color as Base from coloraide.spaces.hsluv import HSLuv class Color ( Base ): ... Color . register ( HSLuv ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/hsv/","text":"HSV The HSV color space is registered in Color by default Properties Name: hsv White Point: D65 Coordinates: Name Range h [0, 360) s [0, 1] v [0, 1] HSV color space in 3D HSV is a color space similar to the modern RGB and CMYK models. The HSV color space has three components: hue, saturation and value. 'Value' is sometimes substituted with 'brightness' and then it is known as HSB. HSV models how colors appear under light. Learn about HSV Channel Aliases Channels Aliases h hue s saturation v value Input/Output HSV is not supported via the CSS spec and the parser input and string output only supports the color () function format using the custom name --hsv : color ( --hsv 0 0 % 0 % / 1 ) When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"hsv\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and default string output will always use the color ( hsv h s v / a ) form. >>> Color ( \"hsv\" , [ 0 , 1 , 1 ]) color(--hsv 0 1 1 / 1) >>> Color ( \"hsv\" , [ 38.824 , 1 , 1 ]) . to_string () color(--hsv 38.824 1 1) Color(\"hsv\", [0, 1, 1]) Color(\"hsv\", [38.824, 1, 1]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.hsv import HSV class Color ( Base ): ... Color . register ( HSV ()) .info-container {display: inline-block;}","title":"HSV"},{"location":"colors/hsv/#hsv","text":"The HSV color space is registered in Color by default Properties Name: hsv White Point: D65 Coordinates: Name Range h [0, 360) s [0, 1] v [0, 1] HSV color space in 3D HSV is a color space similar to the modern RGB and CMYK models. The HSV color space has three components: hue, saturation and value. 'Value' is sometimes substituted with 'brightness' and then it is known as HSB. HSV models how colors appear under light. Learn about HSV","title":"HSV"},{"location":"colors/hsv/#channel-aliases","text":"Channels Aliases h hue s saturation v value","title":"Channel Aliases"},{"location":"colors/hsv/#inputoutput","text":"HSV is not supported via the CSS spec and the parser input and string output only supports the color () function format using the custom name --hsv : color ( --hsv 0 0 % 0 % / 1 ) When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"hsv\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and default string output will always use the color ( hsv h s v / a ) form. >>> Color ( \"hsv\" , [ 0 , 1 , 1 ]) color(--hsv 0 1 1 / 1) >>> Color ( \"hsv\" , [ 38.824 , 1 , 1 ]) . to_string () color(--hsv 38.824 1 1) Color(\"hsv\", [0, 1, 1]) Color(\"hsv\", [38.824, 1, 1]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/hsv/#registering","text":"from coloraide import Color as Base from coloraide.spaces.hsv import HSV class Color ( Base ): ... Color . register ( HSV ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/hunter_lab/","text":"Hunter Lab The Hunter Lab color space is not registered in Color by default Properties Name: hunter-lab White Point: D65 Coordinates: Name Range l [0, 100] a [-210, 210] b [-210, 210] * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs in relation to the Display P3 color space. The sRGB gamut represented within the Hunter Lab color space. The Hunter Lab color space, defined in 1948 by Richard S. Hunter, is another color space referred to as \"Lab\". Like CIELab, it was also designed to be computed via simple formulas from the CIE XYZ space, but to be more perceptually uniform than CIE XYZ. Hunter named his coordinates L, a, and b. The CIE named the coordinates for CIELab as L , a , b* to distinguish them from Hunter's coordinates. Learn more . Channel Aliases Channels Aliases l lightness a b Input/Output The Hunter Lab space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --hunter-lab : color ( --hunter-lab l a b / a ) // Color function The string representation of the color object and the default string output use the color ( --hunter-lab l a b / a ) form. >>> Color ( \"hunter-lab\" , [ 46.113 , 82.672 , 28.408 ]) color(--hunter-lab 46.113 82.672 28.408 / 1) >>> Color ( \"hunter-lab\" , [ 69.407 , 23.266 , 40.946 ]) . to_string () color(--hunter-lab 69.407 23.266 40.946) Color(\"hunter-lab\", [46.113, 82.672, 28.408]) Color(\"hunter-lab\", [69.407, 23.266, 40.946]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.hunter_lab import HunterLab class Color ( Base ): ... Color . register ( HunterLab ()) .info-container {display: inline-block;}","title":"Hunter Lab"},{"location":"colors/hunter_lab/#hunter-lab","text":"The Hunter Lab color space is not registered in Color by default Properties Name: hunter-lab White Point: D65 Coordinates: Name Range l [0, 100] a [-210, 210] b [-210, 210] * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs in relation to the Display P3 color space. The sRGB gamut represented within the Hunter Lab color space. The Hunter Lab color space, defined in 1948 by Richard S. Hunter, is another color space referred to as \"Lab\". Like CIELab, it was also designed to be computed via simple formulas from the CIE XYZ space, but to be more perceptually uniform than CIE XYZ. Hunter named his coordinates L, a, and b. The CIE named the coordinates for CIELab as L , a , b* to distinguish them from Hunter's coordinates. Learn more .","title":"Hunter Lab"},{"location":"colors/hunter_lab/#channel-aliases","text":"Channels Aliases l lightness a b","title":"Channel Aliases"},{"location":"colors/hunter_lab/#inputoutput","text":"The Hunter Lab space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --hunter-lab : color ( --hunter-lab l a b / a ) // Color function The string representation of the color object and the default string output use the color ( --hunter-lab l a b / a ) form. >>> Color ( \"hunter-lab\" , [ 46.113 , 82.672 , 28.408 ]) color(--hunter-lab 46.113 82.672 28.408 / 1) >>> Color ( \"hunter-lab\" , [ 69.407 , 23.266 , 40.946 ]) . to_string () color(--hunter-lab 69.407 23.266 40.946) Color(\"hunter-lab\", [46.113, 82.672, 28.408]) Color(\"hunter-lab\", [69.407, 23.266, 40.946]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/hunter_lab/#registering","text":"from coloraide import Color as Base from coloraide.spaces.hunter_lab import HunterLab class Color ( Base ): ... Color . register ( HunterLab ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/hwb/","text":"HWB The HWB color space is registered in Color by default Properties Name: hwb White Point: D65 Coordinates: Name Range h [0, 360) w [0, 1] b [0, 1] HWB color space in 3D HWB is a cylindrical-coordinate representation of points in an RGB color model, similar to HSL and HSV. It was developed by HSV 's creator Alvy Ray Smith in 1996 to address some of the issues with HSV. HWB was designed to be more intuitive for humans to use and slightly faster to compute. The first coordinate, H (Hue), is the same as the Hue coordinate in HSL and HSV . W and B stand for Whiteness and Blackness respectively and range from 0-100% (or 0-1). The mental model is that the user can pick a main hue and then \"mix\" it with white and/or black to produce the desired color. Learn about HWB Channel Aliases Channels Aliases h hue w whiteness b blackness Input/Output Parsed input and string output formats support all valid CSS forms. In addition, we also allow the color () function format using the custom name --hwb : hwb ( h w b / a ) // HWB function color ( --hwb h w b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"hwb\" , [ 0 , 0 , 100 ], 1 ) The string representation of the color object will always default to the color ( --hwb h w b / a ) form, but the default string output will be the hwb ( h s l / a ) form. >>> Color ( \"hwb\" , [ 0 , 0 , 0 ]) color(--hwb 0 0 0 / 1) >>> Color ( \"hwb\" , [ 38.824 , 0 , 0 ]) . to_string () hwb(38.824 0% 0%) Color(\"hwb\", [0, 0, 0]) Color(\"hwb\", [38.824, 0, 0]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.hwb import HWB class Color ( Base ): ... Color . register ( HWB ()) .info-container {display: inline-block;}","title":"HWB"},{"location":"colors/hwb/#hwb","text":"The HWB color space is registered in Color by default Properties Name: hwb White Point: D65 Coordinates: Name Range h [0, 360) w [0, 1] b [0, 1] HWB color space in 3D HWB is a cylindrical-coordinate representation of points in an RGB color model, similar to HSL and HSV. It was developed by HSV 's creator Alvy Ray Smith in 1996 to address some of the issues with HSV. HWB was designed to be more intuitive for humans to use and slightly faster to compute. The first coordinate, H (Hue), is the same as the Hue coordinate in HSL and HSV . W and B stand for Whiteness and Blackness respectively and range from 0-100% (or 0-1). The mental model is that the user can pick a main hue and then \"mix\" it with white and/or black to produce the desired color. Learn about HWB","title":"HWB"},{"location":"colors/hwb/#channel-aliases","text":"Channels Aliases h hue w whiteness b blackness","title":"Channel Aliases"},{"location":"colors/hwb/#inputoutput","text":"Parsed input and string output formats support all valid CSS forms. In addition, we also allow the color () function format using the custom name --hwb : hwb ( h w b / a ) // HWB function color ( --hwb h w b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"hwb\" , [ 0 , 0 , 100 ], 1 ) The string representation of the color object will always default to the color ( --hwb h w b / a ) form, but the default string output will be the hwb ( h s l / a ) form. >>> Color ( \"hwb\" , [ 0 , 0 , 0 ]) color(--hwb 0 0 0 / 1) >>> Color ( \"hwb\" , [ 38.824 , 0 , 0 ]) . to_string () hwb(38.824 0% 0%) Color(\"hwb\", [0, 0, 0]) Color(\"hwb\", [38.824, 0, 0]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/hwb/#registering","text":"from coloraide import Color as Base from coloraide.spaces.hwb import HWB class Color ( Base ): ... Color . register ( HWB ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/ictcp/","text":"ICtCp The ICtCp color space is not registered in Color by default Properties Name: ictcp White Point: D65 Coordinates: Name Range * i [0, 1] ct [-0.5, 0.5] cp [-0.5, 0.5] * Space is not bound to the range but is specified to enclose the full range of an HDR BT.2020 gamut and is used to define percentage inputs/outputs. The sRGB gamut represented within the ICtCp color space. ICtCp is a color space format with better perceptual uniformity than CIELab and is used as a part of the color image pipeline in video and digital photography systems for high dynamic range ( HDR ) and wide color gamut (WCG) imagery. It was developed by Dolby Laboratories from the IPT color space by Ebner and Fairchild. It was designed with the intention to replace YCbCr. Learn about ICtCp Channel Aliases Channels Aliases i ct cp Input/Output As ICtCp is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --ictcp : color ( --ictcp i ct cp / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"ictcp\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output use the color ( --ictcp i ct cp / a ) form. >>> Color ( \"ictcp\" , [ 0.42785 , - 0.11574 , 0.2788 ]) color(--ictcp 0.42785 -0.11574 0.2788 / 1) >>> Color ( \"ictcp\" , [ 0.50497 , - 0.20797 , 0.11077 ]) . to_string () color(--ictcp 0.50497 -0.20797 0.11077) Color(\"ictcp\", [0.42785, -0.11574, 0.2788]) Color(\"ictcp\", [0.50497, -0.20797, 0.11077]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.ictcp import ICtCp class Color ( Base ): ... Color . register ( ICtCp ()) .info-container {display: inline-block;}","title":"ICtCp"},{"location":"colors/ictcp/#ictcp","text":"The ICtCp color space is not registered in Color by default Properties Name: ictcp White Point: D65 Coordinates: Name Range * i [0, 1] ct [-0.5, 0.5] cp [-0.5, 0.5] * Space is not bound to the range but is specified to enclose the full range of an HDR BT.2020 gamut and is used to define percentage inputs/outputs. The sRGB gamut represented within the ICtCp color space. ICtCp is a color space format with better perceptual uniformity than CIELab and is used as a part of the color image pipeline in video and digital photography systems for high dynamic range ( HDR ) and wide color gamut (WCG) imagery. It was developed by Dolby Laboratories from the IPT color space by Ebner and Fairchild. It was designed with the intention to replace YCbCr. Learn about ICtCp","title":"ICtCp"},{"location":"colors/ictcp/#channel-aliases","text":"Channels Aliases i ct cp","title":"Channel Aliases"},{"location":"colors/ictcp/#inputoutput","text":"As ICtCp is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --ictcp : color ( --ictcp i ct cp / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"ictcp\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output use the color ( --ictcp i ct cp / a ) form. >>> Color ( \"ictcp\" , [ 0.42785 , - 0.11574 , 0.2788 ]) color(--ictcp 0.42785 -0.11574 0.2788 / 1) >>> Color ( \"ictcp\" , [ 0.50497 , - 0.20797 , 0.11077 ]) . to_string () color(--ictcp 0.50497 -0.20797 0.11077) Color(\"ictcp\", [0.42785, -0.11574, 0.2788]) Color(\"ictcp\", [0.50497, -0.20797, 0.11077]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/ictcp/#registering","text":"from coloraide import Color as Base from coloraide.spaces.ictcp import ICtCp class Color ( Base ): ... Color . register ( ICtCp ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/igpgtg/","text":"IgPgTg The IgPgTg color space is not registered in Color by default Properties Name: ipt White Point: D65 Coordinates: Name Range ig [0, 1] pg [-1, 1] tg [-1, 1] * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs. The sRGB gamut represented within the IgPgTg color space. IgPgTg uses the same structure as IPT, an established hue-uniform color space utilized in gamut mapping applications. While IPT was fit to visual data on the perceived hue, IgPgTg was optimized based on evidence linking the peak wavelength of Gaussian-shaped light spectra to their perceived hues. Learn more . Channel Aliases Channels Aliases ig pg tg Input/Output The IgPgTg space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --igpgtg : color ( --igpgtg ig pg tg / a ) // Color function The string representation of the color object and the default string output use the color ( --igpgtg ig pg tg / a ) form. >>> Color ( \"igpgtg\" , [ 0.54834 , 0.15366 , 0.43674 ]) color(--igpgtg 0.54834 0.15366 0.43674 / 1) >>> Color ( \"igpgtg\" , [ 0.73238 , 0.0397 , 0.32108 ]) . to_string () color(--igpgtg 0.73238 0.0397 0.32108) Color(\"igpgtg\", [0.54834, 0.15366, 0.43674]) Color(\"igpgtg\", [0.73238, 0.0397, 0.32108]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.igpgtg import IgPgTg class Color ( Base ): ... Color . register ( IgPgTg ()) .info-container {display: inline-block;}","title":"IgPgTg"},{"location":"colors/igpgtg/#igpgtg","text":"The IgPgTg color space is not registered in Color by default Properties Name: ipt White Point: D65 Coordinates: Name Range ig [0, 1] pg [-1, 1] tg [-1, 1] * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs. The sRGB gamut represented within the IgPgTg color space. IgPgTg uses the same structure as IPT, an established hue-uniform color space utilized in gamut mapping applications. While IPT was fit to visual data on the perceived hue, IgPgTg was optimized based on evidence linking the peak wavelength of Gaussian-shaped light spectra to their perceived hues. Learn more .","title":"IgPgTg"},{"location":"colors/igpgtg/#channel-aliases","text":"Channels Aliases ig pg tg","title":"Channel Aliases"},{"location":"colors/igpgtg/#inputoutput","text":"The IgPgTg space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --igpgtg : color ( --igpgtg ig pg tg / a ) // Color function The string representation of the color object and the default string output use the color ( --igpgtg ig pg tg / a ) form. >>> Color ( \"igpgtg\" , [ 0.54834 , 0.15366 , 0.43674 ]) color(--igpgtg 0.54834 0.15366 0.43674 / 1) >>> Color ( \"igpgtg\" , [ 0.73238 , 0.0397 , 0.32108 ]) . to_string () color(--igpgtg 0.73238 0.0397 0.32108) Color(\"igpgtg\", [0.54834, 0.15366, 0.43674]) Color(\"igpgtg\", [0.73238, 0.0397, 0.32108]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/igpgtg/#registering","text":"from coloraide import Color as Base from coloraide.spaces.igpgtg import IgPgTg class Color ( Base ): ... Color . register ( IgPgTg ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/ipt/","text":"IPT The IPT color space is not registered in Color by default Properties Name: ipt White Point: D65 Coordinates: Name Range * i [0, 1] p [-1, 1] t [-1, 1] * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs. The sRGB gamut represented within the IPT color space. Ebner and Fairchild addressed the issue of non-constant lines of hue in their color space dubbed IPT. The IPT color space converts D65-adapted XYZ data (XD65, YD65, ZD65) to long-medium-short cone response data (LMS) using an adapted form of the Hunt-Pointer-Estevez matrix (M HPE (D65)). The IPT color appearance model excels at providing a formulation for hue where a constant hue value equals a constant perceived hue independent of the values of lightness and chroma (which is the general ideal for any color appearance model, but hard to achieve). It is therefore well-suited for gamut mapping implementations. Learn more . Channel Aliases Channels Aliases i p t Inputs The IPT space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --ipt : color ( --ipt i p t / a ) // Color function The string representation of the color object and the default string output use the color ( --ipt i p t / a ) form. >>> Color ( \"ipt\" , [ 0.45616 , 0.62086 , 0.44282 ]) color(--ipt 0.45616 0.62086 0.44282 / 1) >>> Color ( \"ipt\" , [ 0.64877 , 0.189 , 0.5303 ]) . to_string () color(--ipt 0.64877 0.189 0.5303) Color(\"ipt\", [0.45616, 0.62086, 0.44282]) Color(\"ipt\", [0.64877, 0.189, 0.5303]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.ipt import IPT class Color ( Base ): ... Color . register ( IPT ()) .info-container {display: inline-block;}","title":"IPT"},{"location":"colors/ipt/#ipt","text":"The IPT color space is not registered in Color by default Properties Name: ipt White Point: D65 Coordinates: Name Range * i [0, 1] p [-1, 1] t [-1, 1] * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs. The sRGB gamut represented within the IPT color space. Ebner and Fairchild addressed the issue of non-constant lines of hue in their color space dubbed IPT. The IPT color space converts D65-adapted XYZ data (XD65, YD65, ZD65) to long-medium-short cone response data (LMS) using an adapted form of the Hunt-Pointer-Estevez matrix (M HPE (D65)). The IPT color appearance model excels at providing a formulation for hue where a constant hue value equals a constant perceived hue independent of the values of lightness and chroma (which is the general ideal for any color appearance model, but hard to achieve). It is therefore well-suited for gamut mapping implementations. Learn more .","title":"IPT"},{"location":"colors/ipt/#channel-aliases","text":"Channels Aliases i p t Inputs The IPT space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --ipt : color ( --ipt i p t / a ) // Color function The string representation of the color object and the default string output use the color ( --ipt i p t / a ) form. >>> Color ( \"ipt\" , [ 0.45616 , 0.62086 , 0.44282 ]) color(--ipt 0.45616 0.62086 0.44282 / 1) >>> Color ( \"ipt\" , [ 0.64877 , 0.189 , 0.5303 ]) . to_string () color(--ipt 0.64877 0.189 0.5303) Color(\"ipt\", [0.45616, 0.62086, 0.44282]) Color(\"ipt\", [0.64877, 0.189, 0.5303]).to_string() Edit Share Run Cancel","title":"Channel Aliases"},{"location":"colors/ipt/#registering","text":"from coloraide import Color as Base from coloraide.spaces.ipt import IPT class Color ( Base ): ... Color . register ( IPT ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/jzazbz/","text":"Jzazbz The Jzazbz color space is not registered in Color by default Properties Name: jzazbz White Point: D65 Coordinates: Name Range * jz [0, 1] az [-0.5, 0.5] bz [-0.5, 0.5] * Space is not bound to the range but is specified to enclose the full range of an HDR BT.2020 gamut and is used to define percentage inputs/outputs. The sRGB gamut represented within the Jzazbz color space. Jzazbz is a a color space designed for perceptual uniformity in high dynamic range ( HDR ) and wide color gamut (WCG) applications. Conceptually it is similar to CIELab , but claims the following improvements: Perceptual color difference is predicted by Euclidean distance. Perceptually uniform: MacAdam ellipses of just-noticeable-difference ( JND ) are more circular, and closer to the same sizes. Hue linearity: changing saturation or lightness has less shift in hue. Learn about Jzazbz Channel Aliases Channels Aliases jz lightness az a bz b Input/Output As Jzazbz is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --jzazbz : color ( --jzazbz jz az bz / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"jzazbz\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output use the color ( --jzazbz jz az bz / a ) form. >>> Color ( \"jzazbz\" , [ 0.13438 , 0.11789 , 0.11188 ]) color(--jzazbz 0.13438 0.11789 0.11188 / 1) >>> Color ( \"jzazbz\" , [ 0.16937 , 0.0312 , 0.12308 ]) . to_string () color(--jzazbz 0.16937 0.0312 0.12308) Color(\"jzazbz\", [0.13438, 0.11789, 0.11188]) Color(\"jzazbz\", [0.16937, 0.0312, 0.12308]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.jzazbz import Jzazbz class Color ( Base ): ... Color . register ( Jzazbz ()) .info-container {display: inline-block;}","title":"Jzazbz"},{"location":"colors/jzazbz/#jzazbz","text":"The Jzazbz color space is not registered in Color by default Properties Name: jzazbz White Point: D65 Coordinates: Name Range * jz [0, 1] az [-0.5, 0.5] bz [-0.5, 0.5] * Space is not bound to the range but is specified to enclose the full range of an HDR BT.2020 gamut and is used to define percentage inputs/outputs. The sRGB gamut represented within the Jzazbz color space. Jzazbz is a a color space designed for perceptual uniformity in high dynamic range ( HDR ) and wide color gamut (WCG) applications. Conceptually it is similar to CIELab , but claims the following improvements: Perceptual color difference is predicted by Euclidean distance. Perceptually uniform: MacAdam ellipses of just-noticeable-difference ( JND ) are more circular, and closer to the same sizes. Hue linearity: changing saturation or lightness has less shift in hue. Learn about Jzazbz","title":"Jzazbz"},{"location":"colors/jzazbz/#channel-aliases","text":"Channels Aliases jz lightness az a bz b","title":"Channel Aliases"},{"location":"colors/jzazbz/#inputoutput","text":"As Jzazbz is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --jzazbz : color ( --jzazbz jz az bz / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"jzazbz\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output use the color ( --jzazbz jz az bz / a ) form. >>> Color ( \"jzazbz\" , [ 0.13438 , 0.11789 , 0.11188 ]) color(--jzazbz 0.13438 0.11789 0.11188 / 1) >>> Color ( \"jzazbz\" , [ 0.16937 , 0.0312 , 0.12308 ]) . to_string () color(--jzazbz 0.16937 0.0312 0.12308) Color(\"jzazbz\", [0.13438, 0.11789, 0.11188]) Color(\"jzazbz\", [0.16937, 0.0312, 0.12308]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/jzazbz/#registering","text":"from coloraide import Color as Base from coloraide.spaces.jzazbz import Jzazbz class Color ( Base ): ... Color . register ( Jzazbz ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/jzczhz/","text":"JzCzhz The JzCzhz color space is not registered in Color by default Properties Name: jzczhz White Point: D65 Coordinates: Name Range jz [0, 1] cz [0, 0.5] hz [0, 360) * Space is not bound to the range but is specified to enclose the full range of an HDR BT.2020 gamut and is used to define percentage inputs/outputs. The sRGB gamut represented within the JzCzhz color space. JzCzhz is the cylindrical form of Jzazbz . Learn about JzCzhz Channel Aliases Channels Aliases jz lightness cz chroma hz hue Input/Output As JzCzhz is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --jzczhz : color ( --jzczhz jz cz hz / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"jzczhz\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output use the color ( --jzczhz jz cz hz / a ) form. >>> Color ( \"jzczhz\" , [ 0.13438 , 0.16252 , 43.502 ]) color(--jzczhz 0.13438 0.16252 43.502 / 1) >>> Color ( \"jzczhz\" , [ 0.16937 , 0.12698 , 75.776 ]) . to_string () color(--jzczhz 0.16937 0.12698 75.776) Color(\"jzczhz\", [0.13438, 0.16252, 43.502]) Color(\"jzczhz\", [0.16937, 0.12698, 75.776]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.jzczhz import JzCzhz class Color ( Base ): ... Color . register ( JzCzhz ()) .info-container {display: inline-block;}","title":"JzCzhz"},{"location":"colors/jzczhz/#jzczhz","text":"The JzCzhz color space is not registered in Color by default Properties Name: jzczhz White Point: D65 Coordinates: Name Range jz [0, 1] cz [0, 0.5] hz [0, 360) * Space is not bound to the range but is specified to enclose the full range of an HDR BT.2020 gamut and is used to define percentage inputs/outputs. The sRGB gamut represented within the JzCzhz color space. JzCzhz is the cylindrical form of Jzazbz . Learn about JzCzhz","title":"JzCzhz"},{"location":"colors/jzczhz/#channel-aliases","text":"Channels Aliases jz lightness cz chroma hz hue","title":"Channel Aliases"},{"location":"colors/jzczhz/#inputoutput","text":"As JzCzhz is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --jzczhz : color ( --jzczhz jz cz hz / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"jzczhz\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output use the color ( --jzczhz jz cz hz / a ) form. >>> Color ( \"jzczhz\" , [ 0.13438 , 0.16252 , 43.502 ]) color(--jzczhz 0.13438 0.16252 43.502 / 1) >>> Color ( \"jzczhz\" , [ 0.16937 , 0.12698 , 75.776 ]) . to_string () color(--jzczhz 0.16937 0.12698 75.776) Color(\"jzczhz\", [0.13438, 0.16252, 43.502]) Color(\"jzczhz\", [0.16937, 0.12698, 75.776]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/jzczhz/#registering","text":"from coloraide import Color as Base from coloraide.spaces.jzczhz import JzCzhz class Color ( Base ): ... Color . register ( JzCzhz ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/lab/","text":"LAB D50 The Lab D50 color space is registered in Color by default Properties Name: lab White Point: D50 Coordinates: Name Range * l [0, 100] a [-125, 125] b [-125, 125] * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs in relation to the Display P3 color space. The sRGB gamut represented within the CIELab D50 color space. The CIELab color space also referred to as L*a*b* is a color space defined by the International Commission on Illumination (abbreviated CIE) in 1976. It expresses color as three values: L* for perceptual lightness, and a* and b* for the four unique colors of human vision: red, green, blue, and yellow. CIELab was intended as a perceptually uniform space, where a given numerical change corresponds to similar perceived change in color. While the CIELab space is not truly perceptually uniform, it nevertheless is useful in industry for detecting small differences in color. Learn about CIELab Channel Aliases Channels Aliases l lightness a b Input/Output Parsed input and string output formats support all valid CSS forms. In addition, we also allow the color () function format using the custom name --lab : lab ( l a b / a ) // Lab function color ( --lab l a b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"lab\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object will always default to the color ( --lab l a b / a ) form, but the default string output will be the lab ( l a b / a ) form. >>> Color ( \"lab\" , [ 54.291 , 80.805 , 69.891 ]) color(--lab 54.291 80.805 69.891 / 1) >>> Color ( \"lab\" , [ 75.59 , 27.516 , 79.121 ]) . to_string () lab(75.59 27.516 79.121) >>> Color ( \"lab\" , [ 97.607 , - 15.75 , 93.394 ]) . to_string ( percent = True ) lab(97.607% -12.6% 74.715%) >>> Color ( \"lab\" , [ 46.278 , - 47.552 , 48.586 ]) . to_string ( color = True ) color(--lab 46.278 -47.552 48.586) Color(\"lab\", [54.291, 80.805, 69.891]) Color(\"lab\", [75.59, 27.516, 79.121]).to_string() Color(\"lab\", [97.607, -15.75, 93.394]).to_string(percent=True) Color(\"lab\", [46.278, -47.552, 48.586]).to_string(color=True) Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.lab import Lab class Color ( Base ): ... Color . register ( Lab ()) .info-container {display: inline-block;}","title":"Lab D50"},{"location":"colors/lab/#lab-d50","text":"The Lab D50 color space is registered in Color by default Properties Name: lab White Point: D50 Coordinates: Name Range * l [0, 100] a [-125, 125] b [-125, 125] * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs in relation to the Display P3 color space. The sRGB gamut represented within the CIELab D50 color space. The CIELab color space also referred to as L*a*b* is a color space defined by the International Commission on Illumination (abbreviated CIE) in 1976. It expresses color as three values: L* for perceptual lightness, and a* and b* for the four unique colors of human vision: red, green, blue, and yellow. CIELab was intended as a perceptually uniform space, where a given numerical change corresponds to similar perceived change in color. While the CIELab space is not truly perceptually uniform, it nevertheless is useful in industry for detecting small differences in color. Learn about CIELab","title":"LAB D50"},{"location":"colors/lab/#channel-aliases","text":"Channels Aliases l lightness a b","title":"Channel Aliases"},{"location":"colors/lab/#inputoutput","text":"Parsed input and string output formats support all valid CSS forms. In addition, we also allow the color () function format using the custom name --lab : lab ( l a b / a ) // Lab function color ( --lab l a b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"lab\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object will always default to the color ( --lab l a b / a ) form, but the default string output will be the lab ( l a b / a ) form. >>> Color ( \"lab\" , [ 54.291 , 80.805 , 69.891 ]) color(--lab 54.291 80.805 69.891 / 1) >>> Color ( \"lab\" , [ 75.59 , 27.516 , 79.121 ]) . to_string () lab(75.59 27.516 79.121) >>> Color ( \"lab\" , [ 97.607 , - 15.75 , 93.394 ]) . to_string ( percent = True ) lab(97.607% -12.6% 74.715%) >>> Color ( \"lab\" , [ 46.278 , - 47.552 , 48.586 ]) . to_string ( color = True ) color(--lab 46.278 -47.552 48.586) Color(\"lab\", [54.291, 80.805, 69.891]) Color(\"lab\", [75.59, 27.516, 79.121]).to_string() Color(\"lab\", [97.607, -15.75, 93.394]).to_string(percent=True) Color(\"lab\", [46.278, -47.552, 48.586]).to_string(color=True) Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/lab/#registering","text":"from coloraide import Color as Base from coloraide.spaces.lab import Lab class Color ( Base ): ... Color . register ( Lab ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/lab_d65/","text":"Lab D65 The Lab D65 color space is registered in Color by default Properties Name: lab-d65 White Point: D65 Coordinates: Name Range * l [0, 100] a [-130, 130] b [-130, 130] * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs in relation to the Display P3 color space. The sRGB gamut represented within the CIELab D50 color space. CIELab D65 is the same as CIELab except it uses a D65 white point. Learn about CIELab Channel Aliases Channels Aliases l lightness a b Input/Output As a D65 variant of CIELab is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --lab-d65 : color ( --lab-d65 l a b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"lab-d65\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output use the color ( --lab-d65 l a b / a ) form. >>> Color ( \"lab-d65\" , [ 53.237 , 80.09 , 67.203 ]) color(--lab-d65 53.237 80.09 67.203 / 1) >>> Color ( \"lab-d65\" , [ 74.934 , 23.927 , 78.953 ]) . to_string () color(--lab-d65 74.934 23.927 78.953) Color(\"lab-d65\", [53.237, 80.09, 67.203]) Color(\"lab-d65\", [74.934, 23.927, 78.953]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.lab_d65 import LabD65 class Color ( Base ): ... Color . register ( LabD65 ()) .info-container {display: inline-block;}","title":"Lab D65"},{"location":"colors/lab_d65/#lab-d65","text":"The Lab D65 color space is registered in Color by default Properties Name: lab-d65 White Point: D65 Coordinates: Name Range * l [0, 100] a [-130, 130] b [-130, 130] * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs in relation to the Display P3 color space. The sRGB gamut represented within the CIELab D50 color space. CIELab D65 is the same as CIELab except it uses a D65 white point. Learn about CIELab","title":"Lab D65"},{"location":"colors/lab_d65/#channel-aliases","text":"Channels Aliases l lightness a b","title":"Channel Aliases"},{"location":"colors/lab_d65/#inputoutput","text":"As a D65 variant of CIELab is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --lab-d65 : color ( --lab-d65 l a b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"lab-d65\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output use the color ( --lab-d65 l a b / a ) form. >>> Color ( \"lab-d65\" , [ 53.237 , 80.09 , 67.203 ]) color(--lab-d65 53.237 80.09 67.203 / 1) >>> Color ( \"lab-d65\" , [ 74.934 , 23.927 , 78.953 ]) . to_string () color(--lab-d65 74.934 23.927 78.953) Color(\"lab-d65\", [53.237, 80.09, 67.203]) Color(\"lab-d65\", [74.934, 23.927, 78.953]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/lab_d65/#registering","text":"from coloraide import Color as Base from coloraide.spaces.lab_d65 import LabD65 class Color ( Base ): ... Color . register ( LabD65 ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/lch/","text":"LCh D50 The LCh D50 color space is registered in Color by default Properties Name: lch White Point: D50 Coordinates: Name Range * l [0, 100] c [0, 150] h [0, 360) * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs in relation to the Display P3 color space. The sRGB gamut represented within the CIELCh D50 color space. The \"CIELCh\" space is a color space based on CIELab , which uses the polar coordinates C* (chroma, relative saturation) and h\u00b0 (hue angle, angle of the hue in the CIELab color wheel) instead of the Cartesian coordinates a* and b*. The CIELab lightness L* remains unchanged. Learn about CIELCh Channel Aliases Channels Aliases l lightness c chroma h hue Input/Output Parsed input and string output formats support all valid CSS forms. In addition, we also allow the color () function format using the custom name --lch : lch ( l c h / a ) // LCh function color ( --lch l c h / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"lch\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object will always default to the color ( --lch l c h / a ) form, but the default string output will be the lch ( l c h / a ) form. >>> Color ( \"lch\" , [ 54.291 , 106.84 , 40.858 ]) color(--lch 54.291 106.84 40.858 / 1) >>> Color ( \"lch\" , [ 75.59 , 83.769 , 70.824 ]) . to_string () lch(75.59 83.769 70.824) >>> Color ( \"lch\" , [ 97.607 , 94.712 , 99.572 ]) . to_string ( percent = True ) lch(97.607% 63.141% 99.572) >>> Color ( \"lch\" , [ 46.278 , 67.984 , 134.38 ]) . to_string ( color = True ) color(--lch 46.278 67.984 134.38) Color(\"lch\", [54.291, 106.84, 40.858]) Color(\"lch\", [75.59, 83.769, 70.824]).to_string() Color(\"lch\", [97.607, 94.712, 99.572]).to_string(percent=True) Color(\"lch\", [46.278, 67.984, 134.38]).to_string(color=True) Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.lch import LCh class Color ( Base ): ... Color . register ( LCh ()) .info-container {display: inline-block;}","title":"LCh D50"},{"location":"colors/lch/#lch-d50","text":"The LCh D50 color space is registered in Color by default Properties Name: lch White Point: D50 Coordinates: Name Range * l [0, 100] c [0, 150] h [0, 360) * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs in relation to the Display P3 color space. The sRGB gamut represented within the CIELCh D50 color space. The \"CIELCh\" space is a color space based on CIELab , which uses the polar coordinates C* (chroma, relative saturation) and h\u00b0 (hue angle, angle of the hue in the CIELab color wheel) instead of the Cartesian coordinates a* and b*. The CIELab lightness L* remains unchanged. Learn about CIELCh","title":"LCh D50"},{"location":"colors/lch/#channel-aliases","text":"Channels Aliases l lightness c chroma h hue","title":"Channel Aliases"},{"location":"colors/lch/#inputoutput","text":"Parsed input and string output formats support all valid CSS forms. In addition, we also allow the color () function format using the custom name --lch : lch ( l c h / a ) // LCh function color ( --lch l c h / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"lch\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object will always default to the color ( --lch l c h / a ) form, but the default string output will be the lch ( l c h / a ) form. >>> Color ( \"lch\" , [ 54.291 , 106.84 , 40.858 ]) color(--lch 54.291 106.84 40.858 / 1) >>> Color ( \"lch\" , [ 75.59 , 83.769 , 70.824 ]) . to_string () lch(75.59 83.769 70.824) >>> Color ( \"lch\" , [ 97.607 , 94.712 , 99.572 ]) . to_string ( percent = True ) lch(97.607% 63.141% 99.572) >>> Color ( \"lch\" , [ 46.278 , 67.984 , 134.38 ]) . to_string ( color = True ) color(--lch 46.278 67.984 134.38) Color(\"lch\", [54.291, 106.84, 40.858]) Color(\"lch\", [75.59, 83.769, 70.824]).to_string() Color(\"lch\", [97.607, 94.712, 99.572]).to_string(percent=True) Color(\"lch\", [46.278, 67.984, 134.38]).to_string(color=True) Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/lch/#registering","text":"from coloraide import Color as Base from coloraide.spaces.lch import LCh class Color ( Base ): ... Color . register ( LCh ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/lch99o/","text":"DIN99o LCh The DIN99o LCh color space is not registered in Color by default Properties Name: lch99o White Point: D65 Coordinates: Name Range * l [0, 100] c [0, 60] h [0, 360) * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs in relation to the Display P3 color space. The sRGB gamut represented within the DIN99o LCh color space. DIN99o LCh is the cylindrical form of DIN99o . Learn about DIN99o LCh Channel Aliases Channels Aliases l lightness c chroma h hue Input/Output As DIN99o LCh is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --lch99o : color ( --lch99o jz cz hz / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"lch99o\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output use the color ( --lch99o jz cz hz / a ) form. >>> Color ( \"lch99o\" , [ 57.289 , 49.915 , 37.692 ]) color(--lch99o 57.289 49.915 37.692 / 1) >>> Color ( \"lch99o\" , [ 77.855 , 43.543 , 67.811 ]) . to_string () color(--lch99o 77.855 43.543 67.811) Color(\"lch99o\", [57.289, 49.915, 37.692]) Color(\"lch99o\", [77.855, 43.543, 67.811]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.lch99o import LCh99o class Color ( Base ): ... Color . register ( LCh99o ()) .info-container {display: inline-block;}","title":"DIN99 LCh"},{"location":"colors/lch99o/#din99o-lch","text":"The DIN99o LCh color space is not registered in Color by default Properties Name: lch99o White Point: D65 Coordinates: Name Range * l [0, 100] c [0, 60] h [0, 360) * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs in relation to the Display P3 color space. The sRGB gamut represented within the DIN99o LCh color space. DIN99o LCh is the cylindrical form of DIN99o . Learn about DIN99o LCh","title":"DIN99o LCh"},{"location":"colors/lch99o/#channel-aliases","text":"Channels Aliases l lightness c chroma h hue","title":"Channel Aliases"},{"location":"colors/lch99o/#inputoutput","text":"As DIN99o LCh is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --lch99o : color ( --lch99o jz cz hz / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"lch99o\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output use the color ( --lch99o jz cz hz / a ) form. >>> Color ( \"lch99o\" , [ 57.289 , 49.915 , 37.692 ]) color(--lch99o 57.289 49.915 37.692 / 1) >>> Color ( \"lch99o\" , [ 77.855 , 43.543 , 67.811 ]) . to_string () color(--lch99o 77.855 43.543 67.811) Color(\"lch99o\", [57.289, 49.915, 37.692]) Color(\"lch99o\", [77.855, 43.543, 67.811]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/lch99o/#registering","text":"from coloraide import Color as Base from coloraide.spaces.lch99o import LCh99o class Color ( Base ): ... Color . register ( LCh99o ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/lch_d65/","text":"LCh D65 The LCh D65 color space is registered in Color by default Properties Name: lch-d65 White Point: D65 Coordinates: Name Range * l [0, 100] c [0, 160] h [0, 360) * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs in relation to the Display P3 color space. The sRGB gamut represented within the CIELCh D65 color space. CIELCh D65 is the same as CIELCh except it uses a D65 white point. Learn about CIELCh Channel Aliases Channels Aliases l lightness c chroma h hue Input/Output As a D65 variant of CIELCh is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --lch-d65 : color ( --lch-d65 l c h / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"lch-d65\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output use the color ( --lch-d65 l c h / a ) form. >>> Color ( \"lch-d65\" , [ 53.237 , 104.55 , 40 ]) color(--lch-d65 53.237 104.55 40 / 1) >>> Color ( \"lch-d65\" , [ 74.934 , 82.499 , 73.14 ]) . to_string () color(--lch-d65 74.934 82.499 73.14) Color(\"lch-d65\", [53.237, 104.55, 40]) Color(\"lch-d65\", [74.934, 82.499, 73.14]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.lch_d65 import LChD65 class Color ( Base ): ... Color . register ( LChD65 ()) .info-container {display: inline-block;}","title":"LCh D65"},{"location":"colors/lch_d65/#lch-d65","text":"The LCh D65 color space is registered in Color by default Properties Name: lch-d65 White Point: D65 Coordinates: Name Range * l [0, 100] c [0, 160] h [0, 360) * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs in relation to the Display P3 color space. The sRGB gamut represented within the CIELCh D65 color space. CIELCh D65 is the same as CIELCh except it uses a D65 white point. Learn about CIELCh","title":"LCh D65"},{"location":"colors/lch_d65/#channel-aliases","text":"Channels Aliases l lightness c chroma h hue","title":"Channel Aliases"},{"location":"colors/lch_d65/#inputoutput","text":"As a D65 variant of CIELCh is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --lch-d65 : color ( --lch-d65 l c h / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"lch-d65\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output use the color ( --lch-d65 l c h / a ) form. >>> Color ( \"lch-d65\" , [ 53.237 , 104.55 , 40 ]) color(--lch-d65 53.237 104.55 40 / 1) >>> Color ( \"lch-d65\" , [ 74.934 , 82.499 , 73.14 ]) . to_string () color(--lch-d65 74.934 82.499 73.14) Color(\"lch-d65\", [53.237, 104.55, 40]) Color(\"lch-d65\", [74.934, 82.499, 73.14]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/lch_d65/#registering","text":"from coloraide import Color as Base from coloraide.spaces.lch_d65 import LChD65 class Color ( Base ): ... Color . register ( LChD65 ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/lchuv/","text":"LCh uv The LCH uv color space is not registered in Color by default Properties Name: lchuv White Point: D65 Coordinates: Name Range * l [0, 100] c [0, 220] h [0, 360) * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs in relation to the Display P3 color space. The sRGB gamut represented within the CIELCh uv color space. CIELuv is not an intuitive space to work with directly and instead is often converted to cylindrical coordinates with hues represented as degrees and a chroma and lightness channel. The shape of the color space doesn't really change, just how the colors are manipulated. Learn about CIELCh uv Channel Aliases Channels Aliases l lightness c chroma h hue Input/Output As CIELCh uv is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --lchuv : color ( --lchuv l c h / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"lchuv\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output use the color ( --lchuv l c h / a ) form. >>> Color ( \"lchuv\" , [ 53.237 , 179.04 , 12.177 ]) color(--lchuv 53.237 179.04 12.177 / 1) >>> Color ( \"lchuv\" , [ 74.934 , 105.26 , 44.683 ]) . to_string () color(--lchuv 74.934 105.26 44.683) Color(\"lchuv\", [53.237, 179.04, 12.177]) Color(\"lchuv\", [74.934, 105.26, 44.683]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.lchuv import LChuv class Color ( Base ): ... Color . register ( LChuv ()) .info-container {display: inline-block;}","title":"LCh(uv)"},{"location":"colors/lchuv/#lchuv","text":"The LCH uv color space is not registered in Color by default Properties Name: lchuv White Point: D65 Coordinates: Name Range * l [0, 100] c [0, 220] h [0, 360) * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs in relation to the Display P3 color space. The sRGB gamut represented within the CIELCh uv color space. CIELuv is not an intuitive space to work with directly and instead is often converted to cylindrical coordinates with hues represented as degrees and a chroma and lightness channel. The shape of the color space doesn't really change, just how the colors are manipulated. Learn about CIELCh uv","title":"LChuv"},{"location":"colors/lchuv/#channel-aliases","text":"Channels Aliases l lightness c chroma h hue","title":"Channel Aliases"},{"location":"colors/lchuv/#inputoutput","text":"As CIELCh uv is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --lchuv : color ( --lchuv l c h / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"lchuv\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output use the color ( --lchuv l c h / a ) form. >>> Color ( \"lchuv\" , [ 53.237 , 179.04 , 12.177 ]) color(--lchuv 53.237 179.04 12.177 / 1) >>> Color ( \"lchuv\" , [ 74.934 , 105.26 , 44.683 ]) . to_string () color(--lchuv 74.934 105.26 44.683) Color(\"lchuv\", [53.237, 179.04, 12.177]) Color(\"lchuv\", [74.934, 105.26, 44.683]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/lchuv/#registering","text":"from coloraide import Color as Base from coloraide.spaces.lchuv import LChuv class Color ( Base ): ... Color . register ( LChuv ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/luv/","text":"Luv The Luv color space is not registered in Color by default Properties Name: luv White Point: D65 Coordinates: Name Range * l [0, 100] u [-215, 215] v [-215, 215] * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs in relation to the Display P3 color space. The sRGB gamut represented within the CIELuv D65 color space. CIELuv is similar to CIELab as they were both developed in 1976 as perceptually uniform color spaces, both are derived from the color experiments in 1931 that brought us the XYZ color space, and neither are truly perceptually uniform. The difference between the two comes from their intent. CIELab attempted to create a space that aligned well with human vision. CIELuv, on the other hand, was designed to be an easier-to-compute transformation of the 1931 CIE XYZ color space. CIELab is more commonly used in subtractive color applications (printed pages, dyes, etc.), while CIELuv is better suited in additive color applications such as display colorimetry (monitors, TVs, etc.). Learn about CIELuv Channel Aliases Channels Aliases l lightness u v Input/Output As CIELuv D65 is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --luv : color ( --luv l u v / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"luv\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output use the color ( --luv l u v / a ) form. >>> Color ( \"luv\" , [ 53.237 , 175.01 , 37.765 ]) color(--luv 53.237 175.01 37.765 / 1) >>> Color ( \"luv\" , [ 74.934 , 74.839 , 74.014 ]) . to_string () color(--luv 74.934 74.839 74.014) Color(\"luv\", [53.237, 175.01, 37.765]) Color(\"luv\", [74.934, 74.839, 74.014]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.luv import Luv class Color ( Base ): ... Color . register ( Luv ()) .info-container {display: inline-block;}","title":"Luv"},{"location":"colors/luv/#luv","text":"The Luv color space is not registered in Color by default Properties Name: luv White Point: D65 Coordinates: Name Range * l [0, 100] u [-215, 215] v [-215, 215] * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs in relation to the Display P3 color space. The sRGB gamut represented within the CIELuv D65 color space. CIELuv is similar to CIELab as they were both developed in 1976 as perceptually uniform color spaces, both are derived from the color experiments in 1931 that brought us the XYZ color space, and neither are truly perceptually uniform. The difference between the two comes from their intent. CIELab attempted to create a space that aligned well with human vision. CIELuv, on the other hand, was designed to be an easier-to-compute transformation of the 1931 CIE XYZ color space. CIELab is more commonly used in subtractive color applications (printed pages, dyes, etc.), while CIELuv is better suited in additive color applications such as display colorimetry (monitors, TVs, etc.). Learn about CIELuv","title":"Luv"},{"location":"colors/luv/#channel-aliases","text":"Channels Aliases l lightness u v","title":"Channel Aliases"},{"location":"colors/luv/#inputoutput","text":"As CIELuv D65 is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --luv : color ( --luv l u v / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"luv\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output use the color ( --luv l u v / a ) form. >>> Color ( \"luv\" , [ 53.237 , 175.01 , 37.765 ]) color(--luv 53.237 175.01 37.765 / 1) >>> Color ( \"luv\" , [ 74.934 , 74.839 , 74.014 ]) . to_string () color(--luv 74.934 74.839 74.014) Color(\"luv\", [53.237, 175.01, 37.765]) Color(\"luv\", [74.934, 74.839, 74.014]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/luv/#registering","text":"from coloraide import Color as Base from coloraide.spaces.luv import Luv class Color ( Base ): ... Color . register ( Luv ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/okhsl/","text":"Okhsl The Okhsl color space is not registered in Color by default Properties Name: okhsl White Point: D65 Coordinates: Name Range h [0, 360) s [0, 1] l [0, 1] Okhsl color space in 3D Okhsl is a another color space created by Bj\u00f6rn Ottosson. It is based off his early work and leverages the Oklab color space. The aim was to create a color space that was better suited for being used in color pickers than the current HSL. Learn about Okhsv Channel Aliases Channels Aliases h hue s saturation l lightness Input/Output Okhsl is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --okhsl : color ( --okhsl h s l / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"okhsl\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output use the color ( --okhsl h s l / a ) form. >>> Color ( \"okhsl\" , [ 0 , 0 , 0 ], 1 ) color(--okhsl 0 0 0 / 1) >>> Color ( \"okhsl\" , [ 0 , 0 , 0 ], 1 ) . to_string () color(--okhsl 0 0 0) Color(\"okhsl\", [0, 0, 0], 1) Color(\"okhsl\", [0, 0, 0], 1).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.okhsl import Okhsl class Color ( Base ): ... Color . register ( Okhsl ()) .info-container {display: inline-block;}","title":"Okhsl"},{"location":"colors/okhsl/#okhsl","text":"The Okhsl color space is not registered in Color by default Properties Name: okhsl White Point: D65 Coordinates: Name Range h [0, 360) s [0, 1] l [0, 1] Okhsl color space in 3D Okhsl is a another color space created by Bj\u00f6rn Ottosson. It is based off his early work and leverages the Oklab color space. The aim was to create a color space that was better suited for being used in color pickers than the current HSL. Learn about Okhsv","title":"Okhsl"},{"location":"colors/okhsl/#channel-aliases","text":"Channels Aliases h hue s saturation l lightness","title":"Channel Aliases"},{"location":"colors/okhsl/#inputoutput","text":"Okhsl is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --okhsl : color ( --okhsl h s l / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"okhsl\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output use the color ( --okhsl h s l / a ) form. >>> Color ( \"okhsl\" , [ 0 , 0 , 0 ], 1 ) color(--okhsl 0 0 0 / 1) >>> Color ( \"okhsl\" , [ 0 , 0 , 0 ], 1 ) . to_string () color(--okhsl 0 0 0) Color(\"okhsl\", [0, 0, 0], 1) Color(\"okhsl\", [0, 0, 0], 1).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/okhsl/#registering","text":"from coloraide import Color as Base from coloraide.spaces.okhsl import Okhsl class Color ( Base ): ... Color . register ( Okhsl ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/okhsv/","text":"Okhsv The Okhsv color space is not registered in Color by default Properties Name: okhsv White Point: D65 Coordinates: Name Range h [0, 360) s [0, 1] v [0, 1] Okhsv color space in 3D Okhsv is a color space created by Bj\u00f6rn Ottosson. It is based off his early work and leverages the Oklab color space. The aim was to create a color space that was better suited for being used in color pickers than the current HSV. Learn about Okhsv ColorAide Details Channel Aliases Channels Aliases h hue s saturation v value Input/Output Okhsv is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --okhsv : color ( --okhsv h s l / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"okhsv\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output use the color ( --okhsv h s l / a ) form. >>> Color ( \"okhsv\" , [ 29.234 , 1 , 1 ]) color(--okhsv 29.234 1 1 / 1) >>> Color ( \"okhsv\" , [ 70.67 , 1 , 1 ]) . to_string () color(--okhsv 70.67 1 1) Color(\"okhsv\", [29.234, 1, 1]) Color(\"okhsv\", [70.67, 1, 1]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.okhsv import Okhsv class Color ( Base ): ... Color . register ( Okhsv ()) .info-container {display: inline-block;}","title":"Okhsv"},{"location":"colors/okhsv/#okhsv","text":"The Okhsv color space is not registered in Color by default Properties Name: okhsv White Point: D65 Coordinates: Name Range h [0, 360) s [0, 1] v [0, 1] Okhsv color space in 3D Okhsv is a color space created by Bj\u00f6rn Ottosson. It is based off his early work and leverages the Oklab color space. The aim was to create a color space that was better suited for being used in color pickers than the current HSV. Learn about Okhsv ColorAide Details","title":"Okhsv"},{"location":"colors/okhsv/#channel-aliases","text":"Channels Aliases h hue s saturation v value","title":"Channel Aliases"},{"location":"colors/okhsv/#inputoutput","text":"Okhsv is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --okhsv : color ( --okhsv h s l / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"okhsv\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output use the color ( --okhsv h s l / a ) form. >>> Color ( \"okhsv\" , [ 29.234 , 1 , 1 ]) color(--okhsv 29.234 1 1 / 1) >>> Color ( \"okhsv\" , [ 70.67 , 1 , 1 ]) . to_string () color(--okhsv 70.67 1 1) Color(\"okhsv\", [29.234, 1, 1]) Color(\"okhsv\", [70.67, 1, 1]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/okhsv/#registering","text":"from coloraide import Color as Base from coloraide.spaces.okhsv import Okhsv class Color ( Base ): ... Color . register ( Okhsv ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/oklab/","text":"Oklab The Oklab color space is registered in Color by default Properties Name: oklab White Point: D65 Coordinates: Name Range * l [0, 1] a [-0.4, 0.4] b [-0.4, 0.4] * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs in relation to the Display P3 color space. The sRGB gamut represented within the Oklab color space. A new perceptual color space that claims to be simple to use, while doing a good job at predicting perceived lightness, chroma and hue. It is called the Oklab color space, because it is an OK Lab color space. Learn about Oklab Channel Aliases Channels Aliases l lightness a b Input/Output Oklab is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --oklab : oklab ( l a b / a ) // Oklab function color ( --oklab l a b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"oklab\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object will always default to the color ( --oklab l a b / a ) form, but the default string output will be the oklab ( l a b / a ) form. >>> Color ( \"oklab\" , [ 0.62796 , 0.22486 , 0.12585 ]) color(--oklab 0.62796 0.22486 0.12585 / 1) >>> Color ( \"oklab\" , [ 0.79269 , 0.05661 , 0.16138 ]) . to_string () oklab(0.79269 0.05661 0.16138) >>> Color ( \"oklab\" , [ 0.96798 , - 0.07137 , 0.19857 ]) . to_string ( percent = True ) oklab(96.798% -17.842% 49.643%) >>> Color ( \"oklab\" , [ 0.51975 , - 0.1403 , 0.10768 ]) . to_string ( color = True ) color(--oklab 0.51975 -0.1403 0.10768) Color(\"oklab\", [0.62796, 0.22486, 0.12585]) Color(\"oklab\", [0.79269, 0.05661, 0.16138]).to_string() Color(\"oklab\", [0.96798, -0.07137, 0.19857]).to_string(percent=True) Color(\"oklab\", [0.51975, -0.1403, 0.10768]).to_string(color=True) Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.oklab import Oklab class Color ( Base ): ... Color . register ( Oklab ()) .info-container {display: inline-block;}","title":"Oklab"},{"location":"colors/oklab/#oklab","text":"The Oklab color space is registered in Color by default Properties Name: oklab White Point: D65 Coordinates: Name Range * l [0, 1] a [-0.4, 0.4] b [-0.4, 0.4] * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs in relation to the Display P3 color space. The sRGB gamut represented within the Oklab color space. A new perceptual color space that claims to be simple to use, while doing a good job at predicting perceived lightness, chroma and hue. It is called the Oklab color space, because it is an OK Lab color space. Learn about Oklab","title":"Oklab"},{"location":"colors/oklab/#channel-aliases","text":"Channels Aliases l lightness a b","title":"Channel Aliases"},{"location":"colors/oklab/#inputoutput","text":"Oklab is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --oklab : oklab ( l a b / a ) // Oklab function color ( --oklab l a b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"oklab\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object will always default to the color ( --oklab l a b / a ) form, but the default string output will be the oklab ( l a b / a ) form. >>> Color ( \"oklab\" , [ 0.62796 , 0.22486 , 0.12585 ]) color(--oklab 0.62796 0.22486 0.12585 / 1) >>> Color ( \"oklab\" , [ 0.79269 , 0.05661 , 0.16138 ]) . to_string () oklab(0.79269 0.05661 0.16138) >>> Color ( \"oklab\" , [ 0.96798 , - 0.07137 , 0.19857 ]) . to_string ( percent = True ) oklab(96.798% -17.842% 49.643%) >>> Color ( \"oklab\" , [ 0.51975 , - 0.1403 , 0.10768 ]) . to_string ( color = True ) color(--oklab 0.51975 -0.1403 0.10768) Color(\"oklab\", [0.62796, 0.22486, 0.12585]) Color(\"oklab\", [0.79269, 0.05661, 0.16138]).to_string() Color(\"oklab\", [0.96798, -0.07137, 0.19857]).to_string(percent=True) Color(\"oklab\", [0.51975, -0.1403, 0.10768]).to_string(color=True) Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/oklab/#registering","text":"from coloraide import Color as Base from coloraide.spaces.oklab import Oklab class Color ( Base ): ... Color . register ( Oklab ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/oklch/","text":"OkLCh The OkLCh color space is registered in Color by default Properties Name: oklch White Point: D65 Coordinates: Name Range * l [0, 1] c [0, 0.4] h [0, 360) * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs in relation to the Display P3 color space. The sRGB gamut represented within the OkLCh color space. OkLCh is the cylindrical form of Oklab . Learn about OkLCh Channel Aliases Channels Aliases l lightness c chroma h hue Input/Output Oklab is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --oklch : oklch ( l c h / a ) // OkLCh function color ( --oklch l c h / a ) // Color function The string representation of the color object will always default to the color ( --oklch l c h / a ) form, but the default string output will be the oklch ( l a b / a ) form. >>> Color ( \"oklch\" , [ 0.62796 , 0.25768 , 29.234 ]) color(--oklch 0.62796 0.25768 29.234 / 1) >>> Color ( \"oklch\" , [ 0.79269 , 0.17103 , 70.67 ]) . to_string () oklch(0.79269 0.17103 70.67) >>> Color ( \"oklch\" , [ 0.96798 , 0.21101 , 109.77 ]) . to_string ( percent = True ) oklch(96.798% 52.753% 109.77) >>> Color ( \"oklch\" , [ 0.51975 , 0.17686 , 142.5 ]) . to_string ( color = True ) color(--oklch 0.51975 0.17686 142.5) Color(\"oklch\", [0.62796, 0.25768, 29.234]) Color(\"oklch\", [0.79269, 0.17103, 70.67]).to_string() Color(\"oklch\", [0.96798, 0.21101, 109.77]).to_string(percent=True) Color(\"oklch\", [0.51975, 0.17686, 142.5]).to_string(color=True) Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.oklch import OkLCh class Color ( Base ): ... Color . register ( OkLCh ()) .info-container {display: inline-block;}","title":"OkLCh"},{"location":"colors/oklch/#oklch","text":"The OkLCh color space is registered in Color by default Properties Name: oklch White Point: D65 Coordinates: Name Range * l [0, 1] c [0, 0.4] h [0, 360) * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs in relation to the Display P3 color space. The sRGB gamut represented within the OkLCh color space. OkLCh is the cylindrical form of Oklab . Learn about OkLCh","title":"OkLCh"},{"location":"colors/oklch/#channel-aliases","text":"Channels Aliases l lightness c chroma h hue","title":"Channel Aliases"},{"location":"colors/oklch/#inputoutput","text":"Oklab is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --oklch : oklch ( l c h / a ) // OkLCh function color ( --oklch l c h / a ) // Color function The string representation of the color object will always default to the color ( --oklch l c h / a ) form, but the default string output will be the oklch ( l a b / a ) form. >>> Color ( \"oklch\" , [ 0.62796 , 0.25768 , 29.234 ]) color(--oklch 0.62796 0.25768 29.234 / 1) >>> Color ( \"oklch\" , [ 0.79269 , 0.17103 , 70.67 ]) . to_string () oklch(0.79269 0.17103 70.67) >>> Color ( \"oklch\" , [ 0.96798 , 0.21101 , 109.77 ]) . to_string ( percent = True ) oklch(96.798% 52.753% 109.77) >>> Color ( \"oklch\" , [ 0.51975 , 0.17686 , 142.5 ]) . to_string ( color = True ) color(--oklch 0.51975 0.17686 142.5) Color(\"oklch\", [0.62796, 0.25768, 29.234]) Color(\"oklch\", [0.79269, 0.17103, 70.67]).to_string() Color(\"oklch\", [0.96798, 0.21101, 109.77]).to_string(percent=True) Color(\"oklch\", [0.51975, 0.17686, 142.5]).to_string(color=True) Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/oklch/#registering","text":"from coloraide import Color as Base from coloraide.spaces.oklch import OkLCh class Color ( Base ): ... Color . register ( OkLCh ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/orgb/","text":"oRGB The oRGB color space is not registered in Color by default Properties Name: orgb White Point: D65 Coordinates: Name Range * l [0, 1] cyb [-1, 1] crg [-1, 1] * Range denotes in gamut colors, but the color space supports an extended range beyond the gamut. The sRGB gamut represented within the oRGB color space. A new color model that is based on opponent color theory. Like HSV, it is designed specifically for computer graphics. However, it is also designed to work well for computational applications such as color transfer, where HSV falters. Despite being geared towards computation, oRGB's natural axes facilitate HSV-style color selection and manipulation. oRGB also allows for new applications such as a quantitative cool-to-warm metric, intuitive color manipulations and variations, and simple gamut mapping. This new color model strikes a balance between simplicity and the computational qualities of color spaces such as CIELab. Learn more . Channel Aliases Channels Aliases l luma cyb crb Input/Output The oRGB space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --orgb : color ( --orgb l cyb crb / a ) // Color function The string representation of the color object and the default string output use the color ( --orgb l cyb crg / a ) form. >>> Color ( \"orgb\" , [ 0.299 , 0.00002 , 0.99998 ]) color(--orgb 0.299 0.00002 0.99998 / 1) >>> Color ( \"orgb\" , [ 0.67882 , 0.75654 , 0.4464 ]) . to_string () color(--orgb 0.67882 0.75654 0.4464) Color(\"orgb\", [0.299, 0.00002, 0.99998]) Color(\"orgb\", [0.67882, 0.75654, 0.4464]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.orgb import oRGB class Color ( Base ): ... Color . register ( oRGB ()) .info-container {display: inline-block;}","title":"oRGB"},{"location":"colors/orgb/#orgb","text":"The oRGB color space is not registered in Color by default Properties Name: orgb White Point: D65 Coordinates: Name Range * l [0, 1] cyb [-1, 1] crg [-1, 1] * Range denotes in gamut colors, but the color space supports an extended range beyond the gamut. The sRGB gamut represented within the oRGB color space. A new color model that is based on opponent color theory. Like HSV, it is designed specifically for computer graphics. However, it is also designed to work well for computational applications such as color transfer, where HSV falters. Despite being geared towards computation, oRGB's natural axes facilitate HSV-style color selection and manipulation. oRGB also allows for new applications such as a quantitative cool-to-warm metric, intuitive color manipulations and variations, and simple gamut mapping. This new color model strikes a balance between simplicity and the computational qualities of color spaces such as CIELab. Learn more .","title":"oRGB"},{"location":"colors/orgb/#channel-aliases","text":"Channels Aliases l luma cyb crb","title":"Channel Aliases"},{"location":"colors/orgb/#inputoutput","text":"The oRGB space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --orgb : color ( --orgb l cyb crb / a ) // Color function The string representation of the color object and the default string output use the color ( --orgb l cyb crg / a ) form. >>> Color ( \"orgb\" , [ 0.299 , 0.00002 , 0.99998 ]) color(--orgb 0.299 0.00002 0.99998 / 1) >>> Color ( \"orgb\" , [ 0.67882 , 0.75654 , 0.4464 ]) . to_string () color(--orgb 0.67882 0.75654 0.4464) Color(\"orgb\", [0.299, 0.00002, 0.99998]) Color(\"orgb\", [0.67882, 0.75654, 0.4464]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/orgb/#registering","text":"from coloraide import Color as Base from coloraide.spaces.orgb import oRGB class Color ( Base ): ... Color . register ( oRGB ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/prismatic/","text":"Prismatic The oRGB color space is not registered in Color by default Properties Name: prismatic White Point: D65 Coordinates: Name Range l [0, 1] r [0, 1] g [0, 1] b [0, 1] Prismatic Illustrations The Prismatic model introduces a simple transform of the RGB color cube into a light/dark dimension and a 2D hue. The hue is a normalized (barycentric)triangle with pure red, green, and blue at the vertices, often called the Maxwell Color Triangle. Each cross section of the space is the same barycentric triangle, and the light/dark dimension runs zero to one for each hue so the whole color volume takes the form of a prism. Learn more . Channel Aliases Channels Aliases l lightness r red g green b blue Input/Output The Prismatic space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --prismatic : color ( --prismatic l r g b / a ) // Color function The string representation of the color object and the default string output use the color ( --prismatic l r g b / a ) form. >>> Color ( \"prismatic\" , [ 1 , 1 , 0 , 0 ]) color(--prismatic 1 1 0 0 / 1) >>> Color ( \"prismatic\" , [ 1 , 0.60714 , 0.39286 , 0 ], 1 ) . to_string () color(--prismatic 1 0.60714 0.39286 0) Color(\"prismatic\", [1, 1, 0, 0]) Color(\"prismatic\", [1, 0.60714, 0.39286, 0], 1).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.prismatic import Prismatic class Color ( Base ): ... Color . register ( Prismatic ()) .info-container {display: inline-block;}","title":"Prismatic"},{"location":"colors/prismatic/#prismatic","text":"The oRGB color space is not registered in Color by default Properties Name: prismatic White Point: D65 Coordinates: Name Range l [0, 1] r [0, 1] g [0, 1] b [0, 1] Prismatic Illustrations The Prismatic model introduces a simple transform of the RGB color cube into a light/dark dimension and a 2D hue. The hue is a normalized (barycentric)triangle with pure red, green, and blue at the vertices, often called the Maxwell Color Triangle. Each cross section of the space is the same barycentric triangle, and the light/dark dimension runs zero to one for each hue so the whole color volume takes the form of a prism. Learn more .","title":"Prismatic"},{"location":"colors/prismatic/#channel-aliases","text":"Channels Aliases l lightness r red g green b blue","title":"Channel Aliases"},{"location":"colors/prismatic/#inputoutput","text":"The Prismatic space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --prismatic : color ( --prismatic l r g b / a ) // Color function The string representation of the color object and the default string output use the color ( --prismatic l r g b / a ) form. >>> Color ( \"prismatic\" , [ 1 , 1 , 0 , 0 ]) color(--prismatic 1 1 0 0 / 1) >>> Color ( \"prismatic\" , [ 1 , 0.60714 , 0.39286 , 0 ], 1 ) . to_string () color(--prismatic 1 0.60714 0.39286 0) Color(\"prismatic\", [1, 1, 0, 0]) Color(\"prismatic\", [1, 0.60714, 0.39286, 0], 1).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/prismatic/#registering","text":"from coloraide import Color as Base from coloraide.spaces.prismatic import Prismatic class Color ( Base ): ... Color . register ( Prismatic ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/prophoto_rgb/","text":"ProPhoto The ProPhoto color space is registered in Color by default Properties Name: prophoto-rgb White Point: D50 Coordinates: Name Range * r [0, 1] g [0, 1] b [0, 1] * Range denotes in gamut colors, but the color space supports an extended range beyond the gamut. CIE 1931 xy Chromaticity \u2013 ProPhoto RGB Chromaticities The ProPhoto RGB color space, also known as ROMM RGB (Reference Output Medium Metric), is an output referred RGB color space developed by Kodak. It offers an especially large gamut designed for use with photographic output in mind. The ProPhoto RGB color space encompasses over 90% of possible surface colors in the CIE L*a*b* color space, and 100% of likely occurring real-world surface colors documented by Pointer in 1980. Learn about ProPhoto Channel Aliases Channels Aliases r red g green b blue Input/Output Parsed input and string output formats support all valid CSS forms: color ( prophoto-rgb r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"prophoto-rgb\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( prophoto-rgb r g b / a ) form. >>> Color ( \"prophoto-rgb\" , [ 0.78951 , 0.62329 , 0.21172 ], 1 ) color(prophoto-rgb 0.78951 0.62329 0.21172 / 1) >>> Color ( \"prophoto-rgb\" , [ 0.70225 , 0.27572 , 0.10355 ]) . to_string () color(prophoto-rgb 0.70225 0.27572 0.10355) Color(\"prophoto-rgb\", [0.78951, 0.62329, 0.21172], 1) Color(\"prophoto-rgb\", [0.70225, 0.27572, 0.10355]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.prophoto_rgb import ProPhotoRGB class Color ( Base ): ... Color . register ( ProPhotoRGB ()) .info-container {display: inline-block;}","title":"ProPhoto RGB"},{"location":"colors/prophoto_rgb/#prophoto","text":"The ProPhoto color space is registered in Color by default Properties Name: prophoto-rgb White Point: D50 Coordinates: Name Range * r [0, 1] g [0, 1] b [0, 1] * Range denotes in gamut colors, but the color space supports an extended range beyond the gamut. CIE 1931 xy Chromaticity \u2013 ProPhoto RGB Chromaticities The ProPhoto RGB color space, also known as ROMM RGB (Reference Output Medium Metric), is an output referred RGB color space developed by Kodak. It offers an especially large gamut designed for use with photographic output in mind. The ProPhoto RGB color space encompasses over 90% of possible surface colors in the CIE L*a*b* color space, and 100% of likely occurring real-world surface colors documented by Pointer in 1980. Learn about ProPhoto","title":"ProPhoto"},{"location":"colors/prophoto_rgb/#channel-aliases","text":"Channels Aliases r red g green b blue","title":"Channel Aliases"},{"location":"colors/prophoto_rgb/#inputoutput","text":"Parsed input and string output formats support all valid CSS forms: color ( prophoto-rgb r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"prophoto-rgb\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( prophoto-rgb r g b / a ) form. >>> Color ( \"prophoto-rgb\" , [ 0.78951 , 0.62329 , 0.21172 ], 1 ) color(prophoto-rgb 0.78951 0.62329 0.21172 / 1) >>> Color ( \"prophoto-rgb\" , [ 0.70225 , 0.27572 , 0.10355 ]) . to_string () color(prophoto-rgb 0.70225 0.27572 0.10355) Color(\"prophoto-rgb\", [0.78951, 0.62329, 0.21172], 1) Color(\"prophoto-rgb\", [0.70225, 0.27572, 0.10355]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/prophoto_rgb/#registering","text":"from coloraide import Color as Base from coloraide.spaces.prophoto_rgb import ProPhotoRGB class Color ( Base ): ... Color . register ( ProPhotoRGB ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/prophoto_rgb_linear/","text":"Linear ProPhoto The Linear ProPhoto color space is registered in Color by default Properties Name: prophoto-rgb-linear White Point: D50 Coordinates: Name Range * r [0, 1] g [0, 1] b [0, 1] * Range denotes in gamut colors, but the color space supports an extended range beyond the gamut. CIE 1931 xy Chromaticity \u2013 ProPhoto RGB Chromaticities The Linear ProPhoto space is the same as ProPhoto except that the transfer function is linear-light (there is no gamma-encoding). Learn about ProPhoto Channel Aliases Channels Aliases r red g green b blue Input/Output Linear ProPhoto is not supported via the CSS spec and the parser input and string output only supports the color () function format using the custom name --prophoto-rgb-linear : color ( --prophoto-rgb-linear r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"prophoto-rgb-linear\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( --prophoto-rgb-linear r g b / a ) form. >>> Color ( \"prophoto-rgb-linear\" , [ 0.52928 , 0.09837 , 0.01688 ]) color(--prophoto-rgb-linear 0.52928 0.09837 0.01688 / 1) >>> Color ( \"prophoto-rgb-linear\" , [ 0.6535 , 0.42702 , 0.06115 ]) . to_string () color(--prophoto-rgb-linear 0.6535 0.42702 0.06115) Color(\"prophoto-rgb-linear\", [0.52928, 0.09837, 0.01688]) Color(\"prophoto-rgb-linear\", [0.6535, 0.42702, 0.06115]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.prophoto_rgb_linear import ProPhotoRGBLinear class Color ( Base ): ... Color . register ( ProPhotoRGBLinear ()) .info-container {display: inline-block;}","title":"Linear ProPhoto RGB"},{"location":"colors/prophoto_rgb_linear/#linear-prophoto","text":"The Linear ProPhoto color space is registered in Color by default Properties Name: prophoto-rgb-linear White Point: D50 Coordinates: Name Range * r [0, 1] g [0, 1] b [0, 1] * Range denotes in gamut colors, but the color space supports an extended range beyond the gamut. CIE 1931 xy Chromaticity \u2013 ProPhoto RGB Chromaticities The Linear ProPhoto space is the same as ProPhoto except that the transfer function is linear-light (there is no gamma-encoding). Learn about ProPhoto","title":"Linear ProPhoto"},{"location":"colors/prophoto_rgb_linear/#channel-aliases","text":"Channels Aliases r red g green b blue","title":"Channel Aliases"},{"location":"colors/prophoto_rgb_linear/#inputoutput","text":"Linear ProPhoto is not supported via the CSS spec and the parser input and string output only supports the color () function format using the custom name --prophoto-rgb-linear : color ( --prophoto-rgb-linear r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"prophoto-rgb-linear\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( --prophoto-rgb-linear r g b / a ) form. >>> Color ( \"prophoto-rgb-linear\" , [ 0.52928 , 0.09837 , 0.01688 ]) color(--prophoto-rgb-linear 0.52928 0.09837 0.01688 / 1) >>> Color ( \"prophoto-rgb-linear\" , [ 0.6535 , 0.42702 , 0.06115 ]) . to_string () color(--prophoto-rgb-linear 0.6535 0.42702 0.06115) Color(\"prophoto-rgb-linear\", [0.52928, 0.09837, 0.01688]) Color(\"prophoto-rgb-linear\", [0.6535, 0.42702, 0.06115]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/prophoto_rgb_linear/#registering","text":"from coloraide import Color as Base from coloraide.spaces.prophoto_rgb_linear import ProPhotoRGBLinear class Color ( Base ): ... Color . register ( ProPhotoRGBLinear ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/rec2020/","text":"REC. 2020 The Rec. 2020 color space is registered in Color by default Properties Name: rec2020 White Point: D65 Coordinates: Name Range * r [0, 1] g [0, 1] b [0, 1] * Range denotes in gamut colors, but the color space supports an extended range beyond the gamut. CIE 1931 xy Chromaticity \u2013 Rec. 2020 Chromaticities ITU-R Recommendation BT.2020, more commonly known by the abbreviations Rec. 2020 or BT.2020, defines various aspects of ultra-high-definition television (UHDTV) with standard dynamic range ( SDR ) and wide color gamut (WCG), including picture resolutions, frame rates with progressive scan, bit depths, color primaries, RGB and luma-chroma color representations, chroma subsamplings, and an opto-electronic transfer function. The color is used in 4k and 8k UHDTV. Learn about REC.2020 Channel Aliases Channels Aliases r red g green b blue Input/Output Parsed input and string output formats support all valid CSS forms: color ( rec2020 r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"rec2020\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( rec2020 r g b / a ) form. >>> Color ( \"rec2020\" , [ 0.79198 , 0.23098 , 0.07376 ]) color(rec2020 0.79198 0.23098 0.07376 / 1) >>> Color ( \"rec2020\" , [ 0.86727 , 0.64078 , 0.18496 ]) . to_string () color(rec2020 0.86727 0.64078 0.18496) Color(\"rec2020\", [0.79198, 0.23098, 0.07376]) Color(\"rec2020\", [0.86727, 0.64078, 0.18496]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.rec2020 import Rec2020 class Color ( Base ): ... Color . register ( Rec2020 ()) .info-container {display: inline-block;}","title":"Rec. 2020"},{"location":"colors/rec2020/#rec-2020","text":"The Rec. 2020 color space is registered in Color by default Properties Name: rec2020 White Point: D65 Coordinates: Name Range * r [0, 1] g [0, 1] b [0, 1] * Range denotes in gamut colors, but the color space supports an extended range beyond the gamut. CIE 1931 xy Chromaticity \u2013 Rec. 2020 Chromaticities ITU-R Recommendation BT.2020, more commonly known by the abbreviations Rec. 2020 or BT.2020, defines various aspects of ultra-high-definition television (UHDTV) with standard dynamic range ( SDR ) and wide color gamut (WCG), including picture resolutions, frame rates with progressive scan, bit depths, color primaries, RGB and luma-chroma color representations, chroma subsamplings, and an opto-electronic transfer function. The color is used in 4k and 8k UHDTV. Learn about REC.2020","title":"REC. 2020"},{"location":"colors/rec2020/#channel-aliases","text":"Channels Aliases r red g green b blue","title":"Channel Aliases"},{"location":"colors/rec2020/#inputoutput","text":"Parsed input and string output formats support all valid CSS forms: color ( rec2020 r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"rec2020\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( rec2020 r g b / a ) form. >>> Color ( \"rec2020\" , [ 0.79198 , 0.23098 , 0.07376 ]) color(rec2020 0.79198 0.23098 0.07376 / 1) >>> Color ( \"rec2020\" , [ 0.86727 , 0.64078 , 0.18496 ]) . to_string () color(rec2020 0.86727 0.64078 0.18496) Color(\"rec2020\", [0.79198, 0.23098, 0.07376]) Color(\"rec2020\", [0.86727, 0.64078, 0.18496]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/rec2020/#registering","text":"from coloraide import Color as Base from coloraide.spaces.rec2020 import Rec2020 class Color ( Base ): ... Color . register ( Rec2020 ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/rec2020_linear/","text":"Linear REC. 2020 The Linear Rec. 2020 color space is registered in Color by default Properties Name: rec2020-linear White Point: D65 Coordinates: Name Range * r [0, 1] g [0, 1] b [0, 1] * Range denotes in gamut colors, but the color space supports an extended range beyond the gamut. CIE 1931 xy Chromaticity \u2013 Rec. 2020 Chromaticities The Linear Rec. 2020 space is the same as Rec. 2020 except that the transfer function is linear-light (there is no gamma-encoding). Learn about REC.2020 Channel Aliases:** Channels Aliases r red g green b blue Input/Output Linear Rec. 2020 is not supported via the CSS spec and the parser input and string output only supports the color () function format using the custom name --rec2020-linear : color ( --rec2020-linear r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"rec2020-linear\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( --rec2020-linear r g b / a ) form. >>> Color ( \"rec2020-linear\" , [ 0.79198 , 0.23098 , 0.07376 ]) color(--rec2020-linear 0.79198 0.23098 0.07376 / 1) >>> Color ( \"rec2020-linear\" , [ 0.86727 , 0.64078 , 0.18496 ]) . to_string () color(--rec2020-linear 0.86727 0.64078 0.18496) Color(\"rec2020-linear\", [0.79198, 0.23098, 0.07376]) Color(\"rec2020-linear\", [0.86727, 0.64078, 0.18496]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.rec2020_linear import Rec2020Linear class Color ( Base ): ... Color . register ( Rec2020Linear ()) .info-container {display: inline-block;}","title":"Linear Rec. 2020"},{"location":"colors/rec2020_linear/#linear-rec-2020","text":"The Linear Rec. 2020 color space is registered in Color by default Properties Name: rec2020-linear White Point: D65 Coordinates: Name Range * r [0, 1] g [0, 1] b [0, 1] * Range denotes in gamut colors, but the color space supports an extended range beyond the gamut. CIE 1931 xy Chromaticity \u2013 Rec. 2020 Chromaticities The Linear Rec. 2020 space is the same as Rec. 2020 except that the transfer function is linear-light (there is no gamma-encoding). Learn about REC.2020","title":"Linear REC. 2020"},{"location":"colors/rec2020_linear/#channel-aliases","text":"Channels Aliases r red g green b blue","title":"Channel Aliases:**"},{"location":"colors/rec2020_linear/#inputoutput","text":"Linear Rec. 2020 is not supported via the CSS spec and the parser input and string output only supports the color () function format using the custom name --rec2020-linear : color ( --rec2020-linear r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"rec2020-linear\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( --rec2020-linear r g b / a ) form. >>> Color ( \"rec2020-linear\" , [ 0.79198 , 0.23098 , 0.07376 ]) color(--rec2020-linear 0.79198 0.23098 0.07376 / 1) >>> Color ( \"rec2020-linear\" , [ 0.86727 , 0.64078 , 0.18496 ]) . to_string () color(--rec2020-linear 0.86727 0.64078 0.18496) Color(\"rec2020-linear\", [0.79198, 0.23098, 0.07376]) Color(\"rec2020-linear\", [0.86727, 0.64078, 0.18496]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/rec2020_linear/#registering","text":"from coloraide import Color as Base from coloraide.spaces.rec2020_linear import Rec2020Linear class Color ( Base ): ... Color . register ( Rec2020Linear ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/rec2100pq/","text":"REC. 2100 PQ The Rec. 2100 PQ is not registered in Color by default Properties Name: rec2100pq White Point: D65 Coordinates: Name Range r [0, 1] g [0, 1] b [0, 1] CIE 1931 xy Chromaticity \u2013 Rec. 2100 Chromaticities (Same as Rec. 2020) BT.2100, more commonly known by the abbreviations Rec. 2100 or BT.2100, introduced high-dynamic-range television ( HDR -TV) by recommending the use of the perceptual quantizer (PQ) or hybrid log\u2013gamma (HLG) transfer functions instead of the traditional \"gamma\" previously used for SDR -TV. Rec. 2100 PQ specifically uses the perceptual quantizer. The actual gamut of Rec. 2100 uses the same wide color gamut of Rec. 2020, but the color space itself supports an HDR range. Learn about REC.2020 Channel Aliases Channels Aliases r red g green b blue Input/Output Rec. 2100 PQ is not supported via the CSS spec and the parser input and string output only supports the color () function format using the custom name --rec2100pq : color ( --rec2100pq r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"rec2100pq\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( --rec2100pq r g b / a ) form. >>> Color ( \"rec2100pq\" , [ 0.53255 , 0.32702 , 0.22007 ], 1 ) color(--rec2100pq 0.53255 0.32702 0.22007 / 1) >>> Color ( \"rec2100pq\" , [ 0.55101 , 0.49099 , 0.30009 ], 1 ) . to_string () color(--rec2100pq 0.55101 0.49099 0.30009) Color(\"rec2100pq\", [0.53255, 0.32702, 0.22007], 1) Color(\"rec2100pq\", [0.55101, 0.49099, 0.30009], 1).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.rec2100pq import Rec2100PQ class Color ( Base ): ... Color . register ( Rec2100PQ ()) .info-container {display: inline-block;}","title":"Rec. 2100 PQ"},{"location":"colors/rec2100pq/#rec-2100-pq","text":"The Rec. 2100 PQ is not registered in Color by default Properties Name: rec2100pq White Point: D65 Coordinates: Name Range r [0, 1] g [0, 1] b [0, 1] CIE 1931 xy Chromaticity \u2013 Rec. 2100 Chromaticities (Same as Rec. 2020) BT.2100, more commonly known by the abbreviations Rec. 2100 or BT.2100, introduced high-dynamic-range television ( HDR -TV) by recommending the use of the perceptual quantizer (PQ) or hybrid log\u2013gamma (HLG) transfer functions instead of the traditional \"gamma\" previously used for SDR -TV. Rec. 2100 PQ specifically uses the perceptual quantizer. The actual gamut of Rec. 2100 uses the same wide color gamut of Rec. 2020, but the color space itself supports an HDR range. Learn about REC.2020","title":"REC. 2100 PQ"},{"location":"colors/rec2100pq/#channel-aliases","text":"Channels Aliases r red g green b blue","title":"Channel Aliases"},{"location":"colors/rec2100pq/#inputoutput","text":"Rec. 2100 PQ is not supported via the CSS spec and the parser input and string output only supports the color () function format using the custom name --rec2100pq : color ( --rec2100pq r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"rec2100pq\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( --rec2100pq r g b / a ) form. >>> Color ( \"rec2100pq\" , [ 0.53255 , 0.32702 , 0.22007 ], 1 ) color(--rec2100pq 0.53255 0.32702 0.22007 / 1) >>> Color ( \"rec2100pq\" , [ 0.55101 , 0.49099 , 0.30009 ], 1 ) . to_string () color(--rec2100pq 0.55101 0.49099 0.30009) Color(\"rec2100pq\", [0.53255, 0.32702, 0.22007], 1) Color(\"rec2100pq\", [0.55101, 0.49099, 0.30009], 1).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/rec2100pq/#registering","text":"from coloraide import Color as Base from coloraide.spaces.rec2100pq import Rec2100PQ class Color ( Base ): ... Color . register ( Rec2100PQ ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/rlab/","text":"RLAB The RLAB color space is not registered in Color by default Properties Name: rlab White Point: D65 Coordinates: Name Range l [0, 100] a [-125, 125] b [-125, 125] * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs in relation to the Display P3 color space. The sRGB gamut represented within the RLAB color space. The RLAB color-appearance space was developed by Fairchild and Berns for cross-media color reproduction applications in which images are reproduced with differing white points, luminance levels, and/or surrounds. Learn more . Channel Aliases Channels Aliases l lightness a b Input/Output The RLAB space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --rlab : color ( --rlab l a b / a ) // Color function The string representation of the color object and the default string output use the color ( --rlab l a b / a ) form. >>> Color ( \"rlab\" , [ 51.012 , 79.742 , 57.26 ]) color(--rlab 51.012 79.742 57.26 / 1) >>> Color ( \"rlab\" , [ 72.793 , 25.151 , 74.11 ]) . to_string () color(--rlab 72.793 25.151 74.11) Color(\"rlab\", [51.012, 79.742, 57.26]) Color(\"rlab\", [72.793, 25.151, 74.11]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.rlab import RLAB class Color ( Base ): ... Color . register ( RLAB ()) .info-container {display: inline-block;}","title":"RLAB"},{"location":"colors/rlab/#rlab","text":"The RLAB color space is not registered in Color by default Properties Name: rlab White Point: D65 Coordinates: Name Range l [0, 100] a [-125, 125] b [-125, 125] * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs in relation to the Display P3 color space. The sRGB gamut represented within the RLAB color space. The RLAB color-appearance space was developed by Fairchild and Berns for cross-media color reproduction applications in which images are reproduced with differing white points, luminance levels, and/or surrounds. Learn more .","title":"RLAB"},{"location":"colors/rlab/#channel-aliases","text":"Channels Aliases l lightness a b","title":"Channel Aliases"},{"location":"colors/rlab/#inputoutput","text":"The RLAB space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --rlab : color ( --rlab l a b / a ) // Color function The string representation of the color object and the default string output use the color ( --rlab l a b / a ) form. >>> Color ( \"rlab\" , [ 51.012 , 79.742 , 57.26 ]) color(--rlab 51.012 79.742 57.26 / 1) >>> Color ( \"rlab\" , [ 72.793 , 25.151 , 74.11 ]) . to_string () color(--rlab 72.793 25.151 74.11) Color(\"rlab\", [51.012, 79.742, 57.26]) Color(\"rlab\", [72.793, 25.151, 74.11]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/rlab/#registering","text":"from coloraide import Color as Base from coloraide.spaces.rlab import RLAB class Color ( Base ): ... Color . register ( RLAB ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/srgb/","text":"sRGB The sRGB color space is registered in Color by default Properties Name: srgb White Point: D65 Coordinates: Name Range * r [0, 1] g [0, 1] b [0, 1] * Range denotes in gamut colors, but the color space supports an extended range beyond the gamut. CIE 1931 xy Chromaticity \u2013 sRGB Chromaticities The sRGB space is a standard RGB (red, green, blue) color space that HP and Microsoft created cooperatively in 1996 to use on monitors, printers, and the Web. sRGB stands for \"Standard RGB\". It is the most widely used color space and is supported by most operating systems, software programs, monitors, and printers. Learn about sRGB Channel Aliases Channels Aliases r red g green b blue Input/Output Parsed input and string output formats support all valid CSS forms: black // Color name # RRGGBBAA // Hex rgb ( r g b / a ) // RGB function rgb ( r , g , b ) // Legacy RGB Function rgba ( r , g , b , a ) // Legacy RGBA function color ( srgb r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"srgb\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object will always default to the color ( srgb r g b / a ) form, but the default string output will be the rgb ( r g b / a ) form. >>> Color ( 'red' ) . to_string () rgb(255 0 0) >>> Color ( 'orange' ) . to_string ( comma = True ) rgb(255, 165, 0) >>> Color ( 'yellow' ) . to_string ( percent = True ) rgb(100% 100% 0%) >>> Color ( 'green' ) . to_string ( names = True ) green >>> Color ( 'blue' ) . to_string ( hex = True ) #0000ff >>> Color ( 'indigo' ) . to_string ( color = True ) color(srgb 0.29412 0 0.5098) Color('red').to_string() Color('orange').to_string(comma=True) Color('yellow').to_string(percent=True) Color('green').to_string(names=True) Color('blue').to_string(hex=True) Color('indigo').to_string(color=True) Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.srgb.css import sRGB class Color ( Base ): ... Color . register ( sRGB ()) .info-container {display: inline-block;}","title":"sRGB"},{"location":"colors/srgb/#srgb","text":"The sRGB color space is registered in Color by default Properties Name: srgb White Point: D65 Coordinates: Name Range * r [0, 1] g [0, 1] b [0, 1] * Range denotes in gamut colors, but the color space supports an extended range beyond the gamut. CIE 1931 xy Chromaticity \u2013 sRGB Chromaticities The sRGB space is a standard RGB (red, green, blue) color space that HP and Microsoft created cooperatively in 1996 to use on monitors, printers, and the Web. sRGB stands for \"Standard RGB\". It is the most widely used color space and is supported by most operating systems, software programs, monitors, and printers. Learn about sRGB","title":"sRGB"},{"location":"colors/srgb/#channel-aliases","text":"Channels Aliases r red g green b blue","title":"Channel Aliases"},{"location":"colors/srgb/#inputoutput","text":"Parsed input and string output formats support all valid CSS forms: black // Color name # RRGGBBAA // Hex rgb ( r g b / a ) // RGB function rgb ( r , g , b ) // Legacy RGB Function rgba ( r , g , b , a ) // Legacy RGBA function color ( srgb r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"srgb\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object will always default to the color ( srgb r g b / a ) form, but the default string output will be the rgb ( r g b / a ) form. >>> Color ( 'red' ) . to_string () rgb(255 0 0) >>> Color ( 'orange' ) . to_string ( comma = True ) rgb(255, 165, 0) >>> Color ( 'yellow' ) . to_string ( percent = True ) rgb(100% 100% 0%) >>> Color ( 'green' ) . to_string ( names = True ) green >>> Color ( 'blue' ) . to_string ( hex = True ) #0000ff >>> Color ( 'indigo' ) . to_string ( color = True ) color(srgb 0.29412 0 0.5098) Color('red').to_string() Color('orange').to_string(comma=True) Color('yellow').to_string(percent=True) Color('green').to_string(names=True) Color('blue').to_string(hex=True) Color('indigo').to_string(color=True) Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/srgb/#registering","text":"from coloraide import Color as Base from coloraide.spaces.srgb.css import sRGB class Color ( Base ): ... Color . register ( sRGB ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/srgb_linear/","text":"Linear sRGB The Linear sRGB color space is registered in Color by default Properties Name: srgb-linear White Point: D65 Coordinates: Name Range * r [0, 1] g [0, 1] b [0, 1] * Range denotes in gamut colors, but the color space supports an extended range beyond the gamut. CIE 1931 xy Chromaticity \u2013 sRGB Chromaticities The sRGB Linear space is the same as sRGB except that the transfer function is linear-light (there is no gamma-encoding). Learn about sRGB Channel Aliases Channels Aliases r red g green b blue Inputs/Output Parsed input and string output formats support all valid CSS forms: color ( srgb-linear r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"srgb-linear\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( srgb-linear r g b / a ) form. >>> Color ( \"srgb\" , [ 1 , 0 , 0 ]) color(srgb 1 0 0 / 1) >>> Color ( \"srgb\" , [ 1 , 0.37626 , 0 ]) . to_string () rgb(255 95.946 0) Color(\"srgb\", [1, 0, 0]) Color(\"srgb\", [1, 0.37626, 0]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.srgb_linear import sRGBLinear class Color ( Base ): ... Color . register ( sRGB ()) .info-container {display: inline-block;}","title":"Linear sRGB"},{"location":"colors/srgb_linear/#linear-srgb","text":"The Linear sRGB color space is registered in Color by default Properties Name: srgb-linear White Point: D65 Coordinates: Name Range * r [0, 1] g [0, 1] b [0, 1] * Range denotes in gamut colors, but the color space supports an extended range beyond the gamut. CIE 1931 xy Chromaticity \u2013 sRGB Chromaticities The sRGB Linear space is the same as sRGB except that the transfer function is linear-light (there is no gamma-encoding). Learn about sRGB","title":"Linear sRGB"},{"location":"colors/srgb_linear/#channel-aliases","text":"Channels Aliases r red g green b blue","title":"Channel Aliases"},{"location":"colors/srgb_linear/#inputsoutput","text":"Parsed input and string output formats support all valid CSS forms: color ( srgb-linear r g b / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"srgb-linear\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( srgb-linear r g b / a ) form. >>> Color ( \"srgb\" , [ 1 , 0 , 0 ]) color(srgb 1 0 0 / 1) >>> Color ( \"srgb\" , [ 1 , 0.37626 , 0 ]) . to_string () rgb(255 95.946 0) Color(\"srgb\", [1, 0, 0]) Color(\"srgb\", [1, 0.37626, 0]).to_string() Edit Share Run Cancel","title":"Inputs/Output"},{"location":"colors/srgb_linear/#registering","text":"from coloraide import Color as Base from coloraide.spaces.srgb_linear import sRGBLinear class Color ( Base ): ... Color . register ( sRGB ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/xyy/","text":"xyY The xyY color space is not registered in Color by default Properties Name: xyy White Point: D65 Coordinates: Name Range * x [0, 1] y [0, 1] Y [0, 1] * Space is not bound to the range and is used to define percentage inputs/outputs. The sRGB gamut represented within the xyY color space. A derivative of the CIE 1931 XYZ space, the CIE xyY color space, is often used as a way to graphically present the chromaticity of colors. Learn more . Channel Aliases Channels Aliases x y Y Input/Output The xyY space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --xyy : color ( --xyy x y Y / a ) // Color function The string representation of the color object and the default string output use the color ( --xyy x y Y / a ) form. >>> Color ( \"xyy\" , [ 0.64 , 0.33 , 0.21264 ]) color(--xyy 0.64 0.33 0.21264 / 1) >>> Color ( \"xyy\" , [ 0.50047 , 0.4408 , 0.48173 ]) . to_string () color(--xyy 0.50047 0.4408 0.48173) Color(\"xyy\", [0.64, 0.33, 0.21264]) Color(\"xyy\", [0.50047, 0.4408, 0.48173]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.xyy import xyY class Color ( Base ): ... Color . register ( xyY ()) .info-container {display: inline-block;}","title":"xyY"},{"location":"colors/xyy/#xyy","text":"The xyY color space is not registered in Color by default Properties Name: xyy White Point: D65 Coordinates: Name Range * x [0, 1] y [0, 1] Y [0, 1] * Space is not bound to the range and is used to define percentage inputs/outputs. The sRGB gamut represented within the xyY color space. A derivative of the CIE 1931 XYZ space, the CIE xyY color space, is often used as a way to graphically present the chromaticity of colors. Learn more .","title":"xyY"},{"location":"colors/xyy/#channel-aliases","text":"Channels Aliases x y Y","title":"Channel Aliases"},{"location":"colors/xyy/#inputoutput","text":"The xyY space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --xyy : color ( --xyy x y Y / a ) // Color function The string representation of the color object and the default string output use the color ( --xyy x y Y / a ) form. >>> Color ( \"xyy\" , [ 0.64 , 0.33 , 0.21264 ]) color(--xyy 0.64 0.33 0.21264 / 1) >>> Color ( \"xyy\" , [ 0.50047 , 0.4408 , 0.48173 ]) . to_string () color(--xyy 0.50047 0.4408 0.48173) Color(\"xyy\", [0.64, 0.33, 0.21264]) Color(\"xyy\", [0.50047, 0.4408, 0.48173]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/xyy/#registering","text":"from coloraide import Color as Base from coloraide.spaces.xyy import xyY class Color ( Base ): ... Color . register ( xyY ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/xyz_d50/","text":"XYZ D50 The XYZ D50 color space is registered in Color by default Properties Name: xyz-d50 White Point: D50 Coordinates: Name Range * x [0, 1] y [0, 1] z [0, 1] * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs. The sRGB gamut represented within the XYZ D50 color space. XYZ D50 is the same as XYZ D65 except it uses a D50 white point. Learn about XYZ Channel Aliases Channels Aliases x y z Input/Output Parsed input and string output formats support all valid CSS forms: color ( xyz-d50 x y z / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"xyz-d50\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( xyz x y z / a ) form. >>> Color ( \"xyz-d50\" , [ 0.43607 , 0.22249 , 0.01392 ]) color(xyz-d50 0.43607 0.22249 0.01392 / 1) >>> Color ( \"xyz-d50\" , [ 0.58098 , 0.49223 , 0.05045 ]) . to_string () color(xyz-d50 0.58098 0.49223 0.05045) Color(\"xyz-d50\", [0.43607, 0.22249, 0.01392]) Color(\"xyz-d50\", [0.58098, 0.49223, 0.05045]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.xyz_d50 import XYZD50 class Color ( Base ): ... Color . register ( XYZD50 ()) .info-container {display: inline-block;}","title":"XYZ D50"},{"location":"colors/xyz_d50/#xyz-d50","text":"The XYZ D50 color space is registered in Color by default Properties Name: xyz-d50 White Point: D50 Coordinates: Name Range * x [0, 1] y [0, 1] z [0, 1] * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs. The sRGB gamut represented within the XYZ D50 color space. XYZ D50 is the same as XYZ D65 except it uses a D50 white point. Learn about XYZ","title":"XYZ D50"},{"location":"colors/xyz_d50/#channel-aliases","text":"Channels Aliases x y z","title":"Channel Aliases"},{"location":"colors/xyz_d50/#inputoutput","text":"Parsed input and string output formats support all valid CSS forms: color ( xyz-d50 x y z / a ) // Color function When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"xyz-d50\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( xyz x y z / a ) form. >>> Color ( \"xyz-d50\" , [ 0.43607 , 0.22249 , 0.01392 ]) color(xyz-d50 0.43607 0.22249 0.01392 / 1) >>> Color ( \"xyz-d50\" , [ 0.58098 , 0.49223 , 0.05045 ]) . to_string () color(xyz-d50 0.58098 0.49223 0.05045) Color(\"xyz-d50\", [0.43607, 0.22249, 0.01392]) Color(\"xyz-d50\", [0.58098, 0.49223, 0.05045]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/xyz_d50/#registering","text":"from coloraide import Color as Base from coloraide.spaces.xyz_d50 import XYZD50 class Color ( Base ): ... Color . register ( XYZD50 ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"colors/xyz_d65/","text":"XYZ D65 The XYZ D65 color space is registered in Color by default Properties Name: xyz-d65 White Point: D65 Coordinates: Name Range * x [0, 1] y [0, 1] z [0, 1] * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs. The sRGB gamut represented within the XYZ D65 color space. The CIE 1931 RGB color space and CIE 1931 XYZ color space were created by the International Commission on Illumination (CIE) in 1931. They resulted from a series of experiments done in the late 1920s by William David Wright using ten observers and John Guild using seven observers. The experimental results were combined into the specification of the CIE RGB color space, from which the CIE XYZ color space was derived. The CIE 1931 color spaces are the first defined quantitative links between distributions of wavelengths in the electromagnetic visible spectrum, and physiologically perceived colors in human color vision. Learn about XYZ Channel Aliases Channels Aliases x y z Input/Output Parsed input and string output formats use the color () format with either xyz-d65 or xyz as the identifier with the latter being an alias of the former. color ( xyz x y z / a ) // Color function color ( xyz-d65 x y z / a ) // Color function alternate name When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"xyz-d65\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( xyz-d65 x y z / a ) form. >>> Color ( \"xyz-d65\" , [ 0.41239 , 0.21264 , 0.01933 ]) color(xyz-d65 0.41239 0.21264 0.01933 / 1) >>> Color ( \"xyz-d65\" , [ 0.54694 , 0.48173 , 0.06418 ]) . to_string () color(xyz-d65 0.54694 0.48173 0.06418) Color(\"xyz-d65\", [0.41239, 0.21264, 0.01933]) Color(\"xyz-d65\", [0.54694, 0.48173, 0.06418]).to_string() Edit Share Run Cancel Registering from coloraide import Color as Base from coloraide.spaces.xyz_d65 import XYZD65 class Color ( Base ): ... Color . register ( XYZD65 ()) .info-container {display: inline-block;}","title":"XYZ D65"},{"location":"colors/xyz_d65/#xyz-d65","text":"The XYZ D65 color space is registered in Color by default Properties Name: xyz-d65 White Point: D65 Coordinates: Name Range * x [0, 1] y [0, 1] z [0, 1] * Space is not bound to the range and is only used as a reference to define percentage inputs/outputs. The sRGB gamut represented within the XYZ D65 color space. The CIE 1931 RGB color space and CIE 1931 XYZ color space were created by the International Commission on Illumination (CIE) in 1931. They resulted from a series of experiments done in the late 1920s by William David Wright using ten observers and John Guild using seven observers. The experimental results were combined into the specification of the CIE RGB color space, from which the CIE XYZ color space was derived. The CIE 1931 color spaces are the first defined quantitative links between distributions of wavelengths in the electromagnetic visible spectrum, and physiologically perceived colors in human color vision. Learn about XYZ","title":"XYZ D65"},{"location":"colors/xyz_d65/#channel-aliases","text":"Channels Aliases x y z","title":"Channel Aliases"},{"location":"colors/xyz_d65/#inputoutput","text":"Parsed input and string output formats use the color () format with either xyz-d65 or xyz as the identifier with the latter being an alias of the former. color ( xyz x y z / a ) // Color function color ( xyz-d65 x y z / a ) // Color function alternate name When manually creating a color via raw data or specifying a color space as a parameter in a function, the color space name is always used: Color ( \"xyz-d65\" , [ 0 , 0 , 0 ], 1 ) The string representation of the color object and the default string output will be in the color ( xyz-d65 x y z / a ) form. >>> Color ( \"xyz-d65\" , [ 0.41239 , 0.21264 , 0.01933 ]) color(xyz-d65 0.41239 0.21264 0.01933 / 1) >>> Color ( \"xyz-d65\" , [ 0.54694 , 0.48173 , 0.06418 ]) . to_string () color(xyz-d65 0.54694 0.48173 0.06418) Color(\"xyz-d65\", [0.41239, 0.21264, 0.01933]) Color(\"xyz-d65\", [0.54694, 0.48173, 0.06418]).to_string() Edit Share Run Cancel","title":"Input/Output"},{"location":"colors/xyz_d65/#registering","text":"from coloraide import Color as Base from coloraide.spaces.xyz_d65 import XYZD65 class Color ( Base ): ... Color . register ( XYZD65 ()) .info-container {display: inline-block;}","title":"Registering"},{"location":"plugins/","text":"ColorAide Plugins ColorAide implements extendable portions of the Color object as plugins. This makes adding things such as new \u2206E methods or even new color spaces quite easy. Currently, ColorAide implements the following areas as plugins: \u2206E methods Fit/Gamut mapping Chromatic adaptation Filters Contrast Color spaces Interpolation While these documents will touch on each plugin, looking at the source code will provide a better view on how plugins are actually used as all functionality for all of these categories are implemented as plugins in ColorAide. .info-container {display: inline-block;}","title":"ColorAide Plugins"},{"location":"plugins/#coloraide-plugins","text":"ColorAide implements extendable portions of the Color object as plugins. This makes adding things such as new \u2206E methods or even new color spaces quite easy. Currently, ColorAide implements the following areas as plugins: \u2206E methods Fit/Gamut mapping Chromatic adaptation Filters Contrast Color spaces Interpolation While these documents will touch on each plugin, looking at the source code will provide a better view on how plugins are actually used as all functionality for all of these categories are implemented as plugins in ColorAide. .info-container {display: inline-block;}","title":"ColorAide Plugins"},{"location":"plugins/cat/","text":"Chromatic Adaptation Description CAT plugins chromatically adapt a given XYZ coordinate from its current reference white point to a new desired white point. This is useful during conversion when one color space is converted to another color space that uses a difference reference white. Plugin Class Plugins are are created by subclassing coloraide . cat . CAT . class CAT ( Plugin , metaclass = ABCMeta ): \"\"\"Chromatic adaptation.\"\"\" NAME = \"\" @abstractmethod def adapt ( self , w1 : Tuple [ float , float ], w2 : Tuple [ float , float ], xyz : VectorLike ) -> Vector : \"\"\"Adapt a given XYZ color using the provided white points.\"\"\" Once registered, the plugin can then be used via chromatic_adaptation by passing its NAME via the the method along two white points (as XYZ values): w1 as the current white point and w2 as the target white point. It should be noted that chromatic_adaptation is not usually directly used by the user, so a more likely approach is to override the DELTA_E parameter of a subclassed Color object to specify the plugin as the default for chromatic adaptation. Von Kries CAT Currently, ColorAide only ships with Von Kries based adaptation methods. If it is desired to create a Von Kries based plugin, it is recommended to subclass the VonKries class which is based on CAT . When subclassing a VonKries based CAT , the NAME and a MATRIX must be provided. The general calculations related to the source and target white point, will automatically be calculated and an appropriate matrix and inverted matrix will be returned to perform the adaptation without any additional logic. class Bradford ( VonKries ): \"\"\" Bradford CAT. http://brucelindbloom.com/Eqn_ChromAdapt.html https://hrcak.srce.hr/file/95370 \"\"\" NAME = \"bradford\" MATRIX = [ [ 0.8951000 , 0.2664000 , - 0.1614000 ], [ - 0.7502000 , 1.7135000 , 0.0367000 ], [ 0.0389000 , - 0.0685000 , 1.0296000 ] ] .info-container {display: inline-block;}","title":"Chromatic Adaptation"},{"location":"plugins/cat/#chromatic-adaptation","text":"","title":"Chromatic Adaptation"},{"location":"plugins/cat/#description","text":"CAT plugins chromatically adapt a given XYZ coordinate from its current reference white point to a new desired white point. This is useful during conversion when one color space is converted to another color space that uses a difference reference white.","title":"Description"},{"location":"plugins/cat/#plugin-class","text":"Plugins are are created by subclassing coloraide . cat . CAT . class CAT ( Plugin , metaclass = ABCMeta ): \"\"\"Chromatic adaptation.\"\"\" NAME = \"\" @abstractmethod def adapt ( self , w1 : Tuple [ float , float ], w2 : Tuple [ float , float ], xyz : VectorLike ) -> Vector : \"\"\"Adapt a given XYZ color using the provided white points.\"\"\" Once registered, the plugin can then be used via chromatic_adaptation by passing its NAME via the the method along two white points (as XYZ values): w1 as the current white point and w2 as the target white point. It should be noted that chromatic_adaptation is not usually directly used by the user, so a more likely approach is to override the DELTA_E parameter of a subclassed Color object to specify the plugin as the default for chromatic adaptation.","title":"Plugin Class"},{"location":"plugins/cat/#von-kries-cat","text":"Currently, ColorAide only ships with Von Kries based adaptation methods. If it is desired to create a Von Kries based plugin, it is recommended to subclass the VonKries class which is based on CAT . When subclassing a VonKries based CAT , the NAME and a MATRIX must be provided. The general calculations related to the source and target white point, will automatically be calculated and an appropriate matrix and inverted matrix will be returned to perform the adaptation without any additional logic. class Bradford ( VonKries ): \"\"\" Bradford CAT. http://brucelindbloom.com/Eqn_ChromAdapt.html https://hrcak.srce.hr/file/95370 \"\"\" NAME = \"bradford\" MATRIX = [ [ 0.8951000 , 0.2664000 , - 0.1614000 ], [ - 0.7502000 , 1.7135000 , 0.0367000 ], [ 0.0389000 , - 0.0685000 , 1.0296000 ] ] .info-container {display: inline-block;}","title":"Von Kries CAT"},{"location":"plugins/contrast/","text":"Contrast Description Contrast returns a numerical value that is meant to determine how much visual contrast exists between two colors. While the current default is agnostic to ordering of the colors, some algorithms can be sensitive to order. Plugin Class class ColorContrast ( Plugin , metaclass = ABCMeta ): \"\"\"Color contrast plugin class.\"\"\" NAME = '' @abstractmethod def contrast ( self , color1 : 'Color' , color2 : 'Color' , ** kwargs : Any ) -> float : \"\"\"Get the contrast of the two provided colors.\"\"\" Once registered, the plugin can then be used via contrast by passing its NAME via the method parameter along with a secondary color ( color2 ) representing the background color. The calling color ( color1 ) will be considered the text color. Any additional key word arguments can be specified to override default behavior. The \"contrast\" will be returned as a float. color1 . contrast ( color2 , method = NAME , ** kwargs ) If you'd like the user to be able to set specific defaults, you can define an __init__ method and manage defaults accordingly. Defaults can be passed in when instantiating a new plugin. Color . register ( Plugin ( ** kwargs )) .info-container {display: inline-block;}","title":"Contrast"},{"location":"plugins/contrast/#contrast","text":"","title":"Contrast"},{"location":"plugins/contrast/#description","text":"Contrast returns a numerical value that is meant to determine how much visual contrast exists between two colors. While the current default is agnostic to ordering of the colors, some algorithms can be sensitive to order.","title":"Description"},{"location":"plugins/contrast/#plugin-class","text":"class ColorContrast ( Plugin , metaclass = ABCMeta ): \"\"\"Color contrast plugin class.\"\"\" NAME = '' @abstractmethod def contrast ( self , color1 : 'Color' , color2 : 'Color' , ** kwargs : Any ) -> float : \"\"\"Get the contrast of the two provided colors.\"\"\" Once registered, the plugin can then be used via contrast by passing its NAME via the method parameter along with a secondary color ( color2 ) representing the background color. The calling color ( color1 ) will be considered the text color. Any additional key word arguments can be specified to override default behavior. The \"contrast\" will be returned as a float. color1 . contrast ( color2 , method = NAME , ** kwargs ) If you'd like the user to be able to set specific defaults, you can define an __init__ method and manage defaults accordingly. Defaults can be passed in when instantiating a new plugin. Color . register ( Plugin ( ** kwargs )) .info-container {display: inline-block;}","title":"Plugin Class"},{"location":"plugins/delta_e/","text":"Delta E Description \u2206E plugins allow for getting color differences with different methods. ColorAide provides a number of methods by default which are documented under Color Distance and Delta E . All of the default \u2206E methods are provided as plugins, and users can create their own as well. Plugin Class \u2206E plugins are subclassed from coloraide . distance . DeltaE . class DeltaE ( Plugin , metaclass = ABCMeta ): \"\"\"Delta E plugin class.\"\"\" NAME = '' @abstractmethod def distance ( self , color : 'Color' , sample : 'Color' , ** kwargs : Any ) -> float : \"\"\"Get distance between color and sample.\"\"\" Once registered, the plugin can then be used via delta_e by passing its NAME via the method parameter along with any additional key word arguments to override default behavior. The return will be a float indicating the distance. color . delta_e ( sample , method = NAME , ** kwargs ) If you'd like the user to be able to set specific defaults, you can define an __init__ method and manage defaults accordingly. Defaults can be passed in when instantiating a new plugin. Color . register ( Plugin ( ** kwargs )) .info-container {display: inline-block;}","title":"Delta E"},{"location":"plugins/delta_e/#delta-e","text":"","title":"Delta E"},{"location":"plugins/delta_e/#description","text":"\u2206E plugins allow for getting color differences with different methods. ColorAide provides a number of methods by default which are documented under Color Distance and Delta E . All of the default \u2206E methods are provided as plugins, and users can create their own as well.","title":"Description"},{"location":"plugins/delta_e/#plugin-class","text":"\u2206E plugins are subclassed from coloraide . distance . DeltaE . class DeltaE ( Plugin , metaclass = ABCMeta ): \"\"\"Delta E plugin class.\"\"\" NAME = '' @abstractmethod def distance ( self , color : 'Color' , sample : 'Color' , ** kwargs : Any ) -> float : \"\"\"Get distance between color and sample.\"\"\" Once registered, the plugin can then be used via delta_e by passing its NAME via the method parameter along with any additional key word arguments to override default behavior. The return will be a float indicating the distance. color . delta_e ( sample , method = NAME , ** kwargs ) If you'd like the user to be able to set specific defaults, you can define an __init__ method and manage defaults accordingly. Defaults can be passed in when instantiating a new plugin. Color . register ( Plugin ( ** kwargs )) .info-container {display: inline-block;}","title":"Plugin Class"},{"location":"plugins/filter/","text":"Filters Description Filter plugins allow you to apply a filter to a given color, altering its appearance. Plugin Class class Filter ( Plugin , metaclass = ABCMeta ): \"\"\"Filter plugin.\"\"\" NAME = \"\" DEFAULT_SPACE = 'srgb-linear' ALLOWED_SPACES = ( 'srgb-linear' , 'srgb' ) @abstractmethod def filter ( self , color : 'Color' , amount : Optional [ float ], ** kwargs : Any ) -> None : \"\"\"Filter the given color.\"\"\" Once registered, the plugin can then be used via filter by passing its NAME via the method parameter along with the amount specifying to what magnitude the filter is applied. Any additional key word arguments also be specified to allow for overriding default behaviors. The current color will then be altered by the filter. DEFAULT_SPACE describes the default color space under which the filter is applied, while ALLOWED_SPACES defines optional, allowed spaces that can be specified. Color space conversion is handled before passing the color to the plugin. color . filter ( NAME , amount , ** kwargs ) If you'd like the user to be able to set specific defaults, you can define an __init__ method and manage defaults accordingly. Defaults can be passed in when instantiating a new plugin. Color . register ( Plugin ( ** kwargs )) .info-container {display: inline-block;}","title":"Filters"},{"location":"plugins/filter/#filters","text":"","title":"Filters"},{"location":"plugins/filter/#description","text":"Filter plugins allow you to apply a filter to a given color, altering its appearance.","title":"Description"},{"location":"plugins/filter/#plugin-class","text":"class Filter ( Plugin , metaclass = ABCMeta ): \"\"\"Filter plugin.\"\"\" NAME = \"\" DEFAULT_SPACE = 'srgb-linear' ALLOWED_SPACES = ( 'srgb-linear' , 'srgb' ) @abstractmethod def filter ( self , color : 'Color' , amount : Optional [ float ], ** kwargs : Any ) -> None : \"\"\"Filter the given color.\"\"\" Once registered, the plugin can then be used via filter by passing its NAME via the method parameter along with the amount specifying to what magnitude the filter is applied. Any additional key word arguments also be specified to allow for overriding default behaviors. The current color will then be altered by the filter. DEFAULT_SPACE describes the default color space under which the filter is applied, while ALLOWED_SPACES defines optional, allowed spaces that can be specified. Color space conversion is handled before passing the color to the plugin. color . filter ( NAME , amount , ** kwargs ) If you'd like the user to be able to set specific defaults, you can define an __init__ method and manage defaults accordingly. Defaults can be passed in when instantiating a new plugin. Color . register ( Plugin ( ** kwargs )) .info-container {display: inline-block;}","title":"Plugin Class"},{"location":"plugins/fit/","text":"Fit/Gamut Mapping Description Fit plugins (or gamut mapping plugins) allow for mapping an out of gamut color to be within the current color space's gamut. All default gamut mapping methods provided by ColorAide are provided via plugins. Plugin Class Plugins are are created by subclassing coloraide . gamut . Fit . class Fit ( Plugin , metaclass = ABCMeta ): \"\"\"Fit plugin class.\"\"\" \"\"\"Fit plugin class.\"\"\" NAME = '' @abstractmethod def fit ( self , color : 'Color' , ** kwargs ) -> None : \"\"\"Get coordinates of the new gamut mapped color.\"\"\" Once registered, the plugin can then be used via fit (and in some places like convert ) by passing its NAME via the method parameter along with any additional key word arguments to override default behavior. The current color will be gamut mapped accordingly. color . fit ( method = NAME , ** kwargs ) If you'd like the user to be able to set specific defaults, you can define an __init__ method and manage defaults accordingly. Defaults can be passed in when instantiating a new plugin. Color . register ( Plugin ( ** kwargs )) Reserved Name clip is a special, reserved name and the associated plugin cannot be overridden. Another clip plugin can be written, but it cannot override the original. .info-container {display: inline-block;}","title":"Fit/Gamut Mapping"},{"location":"plugins/fit/#fitgamut-mapping","text":"","title":"Fit/Gamut Mapping"},{"location":"plugins/fit/#description","text":"Fit plugins (or gamut mapping plugins) allow for mapping an out of gamut color to be within the current color space's gamut. All default gamut mapping methods provided by ColorAide are provided via plugins.","title":"Description"},{"location":"plugins/fit/#plugin-class","text":"Plugins are are created by subclassing coloraide . gamut . Fit . class Fit ( Plugin , metaclass = ABCMeta ): \"\"\"Fit plugin class.\"\"\" \"\"\"Fit plugin class.\"\"\" NAME = '' @abstractmethod def fit ( self , color : 'Color' , ** kwargs ) -> None : \"\"\"Get coordinates of the new gamut mapped color.\"\"\" Once registered, the plugin can then be used via fit (and in some places like convert ) by passing its NAME via the method parameter along with any additional key word arguments to override default behavior. The current color will be gamut mapped accordingly. color . fit ( method = NAME , ** kwargs ) If you'd like the user to be able to set specific defaults, you can define an __init__ method and manage defaults accordingly. Defaults can be passed in when instantiating a new plugin. Color . register ( Plugin ( ** kwargs )) Reserved Name clip is a special, reserved name and the associated plugin cannot be overridden. Another clip plugin can be written, but it cannot override the original. .info-container {display: inline-block;}","title":"Plugin Class"},{"location":"plugins/interpolate/","text":"Interpolation Description Interpolation plugins allow for interpolation between one or more colors. All interpolation in ColorAide is provided via plugins. Plugin Class Plugins are are created by subclassing coloraide . interpolate . Interpolate . class Interpolate ( Plugin , metaclass = ABCMeta ): \"\"\"Interpolation plugin.\"\"\" NAME = \"\" @abstractmethod def interpolator ( self , coordinates : List [ Vector ], channel_names : Sequence [ str ], create : Type [ 'Color' ], easings : List [ Optional [ Callable [ ... , float ]]], stops : Dict [ int , float ], space : str , out_space : str , progress : Optional [ Union [ Mapping [ str , Callable [ ... , float ]], Callable [ ... , float ]]], premultiplied : bool , extrapolate : bool = False , ** kwargs : Any ) -> Interpolator : \"\"\"Get the interpolator object.\"\"\" Once registered, the plugin can then be used via interpolate , steps , or mix by passing its NAME via the method parameter along with any additional key word arguments to override default behavior. An Interpolator object will be returned which allows for interpolating between the given list of colors . color . interpolate ( colors , method = NAME ) In general, the Interpolate plugin is mainly a wrapper to ensure the interpolation setup uses an appropriate Interpolator object which does the actual work. An interpolation plugin should derive their Interpolator class from coloraide.interpolate.Interpolator . While we won't show all the methods of the class, we will show the one function that must be defined. class Interpolator ( metaclass = ABCMeta ): \"\"\"Interpolator.\"\"\" def setup ( self ) --> None : \"\"\"Setup.\"\"\" @abstractmethod def interpolate ( self , point : float , index : int , ) -> Vector : \"\"\"Interpolate.\"\"\" Interpolator.interpolate expects an index (1 - n) indicating which pair of color stops a given point refers to. It is possible that point could exceed the normal range, in which case index will still refer to to either the minimum or maximum color stop pair, whichever the point exceeds. point is usually a value between 0 - 1, where 0 would be the color stop to the left, and 1 would be the color stop to the right. If point exceeds the range of 0 and 1, it can be assumed that the request is on the far left or far right of all color stops, and could be beyond the absolute range of the entire color interpolation chain. By default, extrapolation is disabled between all colors in an interpolation chain, and any point that exceeds the range of 0 - 1, after easing functions are applied, will be clamped. If extrapolate is set to $!py True , the points will not be clamped between any colors, in which case, it is an easing functions responsibility to ensure a value between 0 or 1 if extreme values are not desired. Additionally, an optional Interpolator.setup method is provided to allow for any additional setup required. Premultiplication is usually done in setup ahead of time. Resolution of undefined values can be recalculated here as well as it is usually needed so that premultiplication can be done on coordinates that contain undefined values. With that said, such calculations can also be deferred and handled on the fly if desired. Check out the source code to see some example plugins. .info-container {display: inline-block;}","title":"Interpolation"},{"location":"plugins/interpolate/#interpolation","text":"","title":"Interpolation"},{"location":"plugins/interpolate/#description","text":"Interpolation plugins allow for interpolation between one or more colors. All interpolation in ColorAide is provided via plugins.","title":"Description"},{"location":"plugins/interpolate/#plugin-class","text":"Plugins are are created by subclassing coloraide . interpolate . Interpolate . class Interpolate ( Plugin , metaclass = ABCMeta ): \"\"\"Interpolation plugin.\"\"\" NAME = \"\" @abstractmethod def interpolator ( self , coordinates : List [ Vector ], channel_names : Sequence [ str ], create : Type [ 'Color' ], easings : List [ Optional [ Callable [ ... , float ]]], stops : Dict [ int , float ], space : str , out_space : str , progress : Optional [ Union [ Mapping [ str , Callable [ ... , float ]], Callable [ ... , float ]]], premultiplied : bool , extrapolate : bool = False , ** kwargs : Any ) -> Interpolator : \"\"\"Get the interpolator object.\"\"\" Once registered, the plugin can then be used via interpolate , steps , or mix by passing its NAME via the method parameter along with any additional key word arguments to override default behavior. An Interpolator object will be returned which allows for interpolating between the given list of colors . color . interpolate ( colors , method = NAME ) In general, the Interpolate plugin is mainly a wrapper to ensure the interpolation setup uses an appropriate Interpolator object which does the actual work. An interpolation plugin should derive their Interpolator class from coloraide.interpolate.Interpolator . While we won't show all the methods of the class, we will show the one function that must be defined. class Interpolator ( metaclass = ABCMeta ): \"\"\"Interpolator.\"\"\" def setup ( self ) --> None : \"\"\"Setup.\"\"\" @abstractmethod def interpolate ( self , point : float , index : int , ) -> Vector : \"\"\"Interpolate.\"\"\" Interpolator.interpolate expects an index (1 - n) indicating which pair of color stops a given point refers to. It is possible that point could exceed the normal range, in which case index will still refer to to either the minimum or maximum color stop pair, whichever the point exceeds. point is usually a value between 0 - 1, where 0 would be the color stop to the left, and 1 would be the color stop to the right. If point exceeds the range of 0 and 1, it can be assumed that the request is on the far left or far right of all color stops, and could be beyond the absolute range of the entire color interpolation chain. By default, extrapolation is disabled between all colors in an interpolation chain, and any point that exceeds the range of 0 - 1, after easing functions are applied, will be clamped. If extrapolate is set to $!py True , the points will not be clamped between any colors, in which case, it is an easing functions responsibility to ensure a value between 0 or 1 if extreme values are not desired. Additionally, an optional Interpolator.setup method is provided to allow for any additional setup required. Premultiplication is usually done in setup ahead of time. Resolution of undefined values can be recalculated here as well as it is usually needed so that premultiplication can be done on coordinates that contain undefined values. With that said, such calculations can also be deferred and handled on the fly if desired. Check out the source code to see some example plugins. .info-container {display: inline-block;}","title":"Plugin Class"},{"location":"plugins/space/","text":"Color Space Description All color spaces supported by ColorAide are specified via color space plugins. These Space objects specify color channel properties, gamut bounds, input matching/parsing logic, string output logic, conversion to and from a specified base color, etc. Color space plugins are a little more complex compared to Delta E , Fit , and other plugins. Plugin Class In general, a color space plugin is created by subclassing from coloraide . spaces . Space . When defining a color space, there are a couple things that must be defined. Using XYZ as an example, we will go over them. from coloraide import cat from coloraide.channels import Channel class XYZD65 ( Space ): \"\"\"XYZ D65 class.\"\"\" # A base color though which a color is converted through. # XYZ is our absolute base, so it doesn't have a real base, # but something like HSL might have a base color of `srgb`. BASE = \"xyz-d65\" # The name of the color space. NAME = \"xyz-d65\" # One or more accepted identifiers that are allowed for the `color(space ...)` format. # For this this specific color space, both `color(xyz x y z / a)` and `color(xyz-d65 x y z / a)` are accepted. # As `xyz` is listed first, `xyz` is the default used when printing in this format. SERIALIZE = ( \"xyz-d65\" , \"xyz\" ) # Specify channel attributes, bounds, etc. of the non-alpha color channels. # Each channel is defined via a `Channel` object # #``` #class Channel(str): # \"\"\"Channel.\"\"\" # # def __new__( # cls, # name: str, # low: float, # high: float, # bound: bool = False, # flags: int = 0, # limit: Tuple[Optional[float], Optional[float]] = (None, None) # ) -> 'Channel': #``` # # - `name`: The name of the channel. # - `low`: Lower limit of the channel, for unbound channels, the value will be arbitrary. # - `high`: Upper limit of the channel, for unbound channels, the value will be arbitrary. # - `bound`: Whether the channel enforces the gamut range. # - `limit`: Optional upper and lower limit. Used to define a hard limit for the channel that is clamped # when the channel is set. This differs from gamut boundaries which can be exceeded until gamut # mapping occurs. For instance, `chroma` often enforces no values below zero as these values # do not naturally occur, not even with normal out of gamut colors. So, we could clamp the lower # bound: `(0, None)`. # - `flags`: Flags used to provide additional context for the channel. # # The following flags are supported: # - FLG_ANGLE: denotes that channel is a angle or degree value. # - FLG_PERCENT: denotes the value is considered a percent input. This is usually used in named CSS functions # like `hsl()` which require string inputs for saturation and lightness to always be in a # percentage format. The CSS `color()` function ignores this flags as no channels are always # required to be percentages. Percentage range will be determined by `high` and `low`. # - FLG_OPT_PERCENT: denotes the value can optionally be considered as a percent. # This is also only used for CSS string input and output. CSS `oklab`, `lab()`, `oklch`, # `lch()`, and `srgb()` allow for channels to be provided as percentages or normal # numbers in certain cases. This tells the parser and serializer which channels allow this. # Percentage range will be determined by `high` and `low`. # - FLG_MIRROR_PERCENT: The channel, when importing or exporting to a percent should mirror the percentage # for negative values. This is used mainly in Lab and Lab like spaces which have `a` # `b` channels that allow for both negative and positive values. If set, `high` and `low` # should fulfill `abs(low) == high`. CHANNELS = ( Channel ( \"x\" , 0.0 , 1.0 ), Channel ( \"y\" , 0.0 , 1.0 ), Channel ( \"z\" , 0.0 , 1.0 ) ) # A dictionary containing a mapping of aliases to `name` attribute of `CHANNELS` found above. CHANNEL_ALIASES = {} # If you'd like this color space to parse as and export a `color(space ...)` format. # If set to `False` the space will not recognize the color format as an input. # This only affects input matching. To override output of the color format, you will also # need to override the `to_string` method. COLOR_FORMAT = True # Specify the white point that the color space uses # White point should be a `tuple` containing the x and y chromaticity points. # Some basic ones are provided in the `cat` module for both 2 degree and 10 degree observer. WHITE = cat . WHITES [ '2deg' ][ 'D65' ] # If `GAMUT_CHECK` is set to a color space name, the provided color space will be used to verify the an \"in gamut\" # check in addition to the current color space's channel ranges. This is often used with color spaces such as: # HSL, HSV, and HWB where `GAMUT_CHECK` will be set to `srgb`. # # Gamut checking: # The specified color space will be checked first followed by the original. Assuming the parent color space fits, # the original should fit as well, but there are some cases when a parent color space that is slightly out of # gamut, when evaluated with a threshold, may appear to be in gamut enough, but when checking the original color # space, the values can be greatly out of specification (looking at you HSL). GAMUT_CHECK = None # When set to `True`, this denotes that the color space has the ability to represent out of gamut in colors in an # extended range. When interpolation is done, if colors are interpolated in a smaller gamut than the colors being # interpolated, and that color is \"bound\" to a gamut, the colors will usually be gamut mapped, but if the # interpolation space happens to support extended ranges, then the colors will not be gamut mapped even if their # gamut is larger than the target interpolation space. EXTENDED_RANGE = False ############################ # To and from conversion functions that transform the color to and from the `BASE` color. ############################ def to_base ( self , coords : Vector ) -> Vector : \"\"\" To XYZ (no change). Any needed chromatic adaptation is handled in the parent Color object. \"\"\" return coords def from_base ( self , coords : Vector ) -> Vector : \"\"\" From XYZ (no change). Any needed chromatic adaptation is handled in the parent Color object. \"\"\" return coords Once registered, colors can be created using the NAME via normal instantiation methods or conversions: Color ( NAME , [ ... ]) Color ( red ) . convert ( NAME ) By default, assuming COLOR_FORMAT is True , color strings will be parsed in the following format, where SERIALIZE is one one of the IDs specified via the SERIALIZE plugin property. Color ( 'color(SERIALIZE ...)' ) Plugin Defaults It is important to note that color space plugins are often not isolated. They are convert to from some BASE color and may be a BASE color for some other color space. Essentially, color spaces are chained together via the BASE property to ensure proper conversion to and from the color space. Because of this, it is not advisable to have any configurable defaults that would fundamentally change how the color coordinates are calculated, as such a change could affect not only the targeted color space, but other color spaces up and down the color conversion change. If configuration of a color space's fundamental calculations of coordinates is desired, it is recommended that the given Space plugin gets subclassed and provided a new NAME , along with SERIALIZE IDs that do not conflict with other spaces. Such changes would include changing a white point, changing viewing conditions, and even changing the algorithm for color space conversion. Defaults can be provided and configured via an __init__ method, but it is strongly recommended that only superficial things are controlled by such options, like controlling recognized input/output string formats. Additionally, if provided an __init__ , it is required that super().__init__() also gets called. Chromatic Adaptation Chromatic adaptation is usually applied to a color when it is passing from one XYZ color space to another XYZ color space that has a different white point. In ColorAide, any time XYZ D65 is either the target or origin color, and the other color space has a different white point, the XYZ coordinates, will either be adapted to XYZ D65 or XYZ (new white point) respectively. This all happens without The Space plugin needing to do anything additional. White points are specified via the WHITE property, and should contain a tuple of xy coordinates of the white point. Color Normalization In addition to the aforementioned methods, some color spaces, such as cylindrical spaces, have some additional logic that determines when a hue is undefined. During conversion, undefined channels are initially thrown away, but a color may be returned with undefined hues if it is a cylindrical color space and the the color is achromatic, or in some cases, very close to achromatic. The Space.normalize function is not used during conversion, but provides logic for specifically normalizing an exiting color when Color.normalize is called. Logic should generally match whatever occurs during conversion. Usually, for rectangular spaces, normalize simply eliminates undefined channels. For cylindrical spaces, it will also set the hue to \"undefined\" if the color meets the criteria of the color space. This may be when chroma is zero, or maybe even when very close to zero. This can vary from color space to color space. normalize can be specified as an function of the Space plugin. def normalize ( self , coords : Vector ) -> Vector : \"\"\"Normalize color.\"\"\" coords = alg . no_nans ( coords ) if coords [ 1 ] == 0 or coords [ 2 ] in ( 0 , 1 ): coords [ 0 ] = alg . NaN return coords Mix-ins If the color is a cylindrical space, Lab-ish space, or LCh-ish space, you can additionally add in the respective mix-in class: Cylindrical , Labish , or LChish . It should be noted that LChish is subclassed from Cylindrical . Cylindrical Labish LChish class Cylindrical : \"\"\"Cylindrical space.\"\"\" def hue_name ( self ) -> str : \"\"\"Hue channel name.\"\"\" return \"h\" def hue_index ( self ) -> int : # pragma: no cover \"\"\"Get hue index.\"\"\" return cast ( 'Space' , self ) . get_channel_index ( self . hue_name ()) class Labish : \"\"\"Lab-ish color spaces.\"\"\" def labish_names ( self ) -> Tuple [ str , ... ]: \"\"\"Return Lab-ish names in the order L a b.\"\"\" return cast ( 'Space' , self ) . channels [: - 1 ] def labish_indexes ( self ) -> List [ int ]: # pragma: no cover \"\"\"Return the index of the Lab-ish channels.\"\"\" return [ cast ( 'Space' , self ) . get_channel_index ( name ) for name in self . labish_names ()] class LChish ( Cylindrical ): \"\"\"LCh-ish color spaces.\"\"\" def lchish_names ( self ) -> Tuple [ str , ... ]: # pragma: no cover \"\"\"Return LCh-ish names in the order L c h.\"\"\" return cast ( 'Space' , self ) . channels [: - 1 ] def lchish_indexes ( self ) -> List [ int ]: # pragma: no cover \"\"\"Return the index of the Lab-ish channels.\"\"\" return [ cast ( 'Space' , self ) . get_channel_index ( name ) for name in self . lchish_names ()] Mix-in classes are mainly available so that a color space can be inspected to see if it falls into a specific generic color space type in order to allow for some generic handling of the color. For instance, you may not care specifically what color space you are dealing with, but you may want to extract the hue from all cylindrical spaces, or grab the lightness (or lightness equivalent) from all Lab-ish color spaces. The mix-in classes provide methods mainly to extract expected channels on color spaces that may use different names for similar channels or to determine the index of a specific channel type. Occasionally, these methods may need to be overridden for a color space. Below, we can see that both jzazbz and ictcp identify as Lab-ish spaces. If we just care about accessing the equivalent of Lab lightness on these spaces, we can simply can access them with the following logic. >>> from coloraide.spaces import Labish >>> srgb = Color ( 'red' ) >>> jzazbz = srgb . convert ( 'jzazbz' ) >>> ictcp = srgb . convert ( 'ictcp' ) >>> for c in ( srgb , jzazbz , ictcp ): ... if isinstance ( c . _space , Labish ): ... print ( 'color: ' , c ) ... l = c . _space . labish_names ()[ 0 ] ... print ( 'channel: ' , l ) ... print ( 'value: ' , c . get ( l )) ... color: color(--jzazbz 0.13438 0.11789 0.11188 / 1) channel: jz value: 0.13438473104350318 color: color(--ictcp 0.42785 -0.11574 0.2788 / 1) channel: i value: 0.4278524836087273 from coloraide.spaces import Labish srgb = Color('red') jzazbz = srgb.convert('jzazbz') ictcp = srgb.convert('ictcp') for c in (srgb, jzazbz, ictcp): if isinstance(c._space, Labish): print('color: ', c) l = c._space.labish_names()[0] print('channel: ', l) print('value: ', c.get(l)) Edit Share Run Cancel It should be noted that just because a color space identifies in a specific, generic category, it doesn't mean it is precisely that thing. For instance, the color space CIELab is clearly a Lab-ish space, or more precisely, it is a Lab color space. Oklab, DIN99o, and others are very much Lab spaces as well. ICtCp, on the other hand, is very Lab like as its Ct and Cp channels control redness/greenness and blueness/yellowness, but the I channel represents intensity, not lightness which is similar but not precisely the same thing. Adding New Input/Output Formats One common thing that may be desired is altering an existing color space to accept and output a specialized format. While using hex color codes or rgb () formats are fairly common, there are many places were other forms are used to represent colors. It may be beneficial for a user working with colors in some more obscure form to repurpose a color space to handle different input/output formats. The base of every color space is defined to accept and output the color ( space ... ) format. As this is a common input form across all color spaces, it is handled generically for all spaces in one action for performance reasons. Iterating each color space to perform the same match with a different color spaces name is obviously slower. A color can opt out of this input format by simply setting COLOR_FORMAT to False . This only disables input parsing. In order to disable this format during serialization the color space's #py3 to_string() method would need to be overridden. New, per color space matching logic can be achieved by simply by overriding the match () method. If it is desired to also accept the color ( space ... ) format, just keep the COLOR_FORMAT flag enabled; otherwise, disable it. As an example, let's consider the default sRGB space. We wanted to add additional CSS formats in addition to the color ( space ... ) format. While we won't go into the specific parsing logic, the general top-level logic can be seen below. We simply override the match () method and call into our CSS parser. The parser will handle the appropriate syntax for our color spaces. It is not configured to process the color ( space ... ) format as that is already handled more efficiently when with COLOR_FORMAT enabled. Also, notice that match () is expected to return two things: a tuple containing the color channel coordinates and the alpha value, and the end position ( ([ r , g , b ], a ), end ). If the match fails, it simply returns None . from coloraide.spaces import srgb as base from coloraide.css import parse class sRGB ( base . sRGB ): \"\"\"sRGB class.\"\"\" # This color class should opt into the generic `color(space ...)` input format. # This is `True` by default, but shown for demonstration purposes. COLOR_FORMAT : True # If the color format above is not found, continue with our custom match to handle all other formats. def match ( self , string : str , start : int = 0 , fullmatch : bool = True ) -> Optional [ Tuple [ Tuple [ Vector , float ], int ]]: \"\"\"Match a CSS color string.\"\"\" return parse . parse_css ( self , string , start , fullmatch ) Additionally, we control the output formats by overriding the to_string () function. We ensure that it accepts all the parameters we need, in our case we accept the common parameters and later check for our special inputs in kwargs . def to_string ( self , parent : 'Color' , * , alpha : Optional [ bool ] = None , precision : Optional [ int ] = None , fit : Union [ bool , str ] = True , none : bool = False , color : bool = False , hex : bool = False , names : bool = False , comma : bool = False , upper : bool = False , percent : bool = False , compress : bool = False , ** kwargs : Any ) -> str : \"\"\"Convert to CSS.\"\"\" return serialize . serialize_css ( parent , func = 'rgb' , alpha = alpha , precision = precision , fit = fit , none = none , color = color , hexa = hex , name = names , legacy = comma , upper = upper , percent = percent , compress = compress , scale = 255 ) As all ColorAide color spaces are defined as plugins, there should be ample examples to help someone start writing a new color space. .info-container {display: inline-block;}","title":"Color Spaces"},{"location":"plugins/space/#color-space","text":"","title":"Color Space"},{"location":"plugins/space/#description","text":"All color spaces supported by ColorAide are specified via color space plugins. These Space objects specify color channel properties, gamut bounds, input matching/parsing logic, string output logic, conversion to and from a specified base color, etc. Color space plugins are a little more complex compared to Delta E , Fit , and other plugins.","title":"Description"},{"location":"plugins/space/#plugin-class","text":"In general, a color space plugin is created by subclassing from coloraide . spaces . Space . When defining a color space, there are a couple things that must be defined. Using XYZ as an example, we will go over them. from coloraide import cat from coloraide.channels import Channel class XYZD65 ( Space ): \"\"\"XYZ D65 class.\"\"\" # A base color though which a color is converted through. # XYZ is our absolute base, so it doesn't have a real base, # but something like HSL might have a base color of `srgb`. BASE = \"xyz-d65\" # The name of the color space. NAME = \"xyz-d65\" # One or more accepted identifiers that are allowed for the `color(space ...)` format. # For this this specific color space, both `color(xyz x y z / a)` and `color(xyz-d65 x y z / a)` are accepted. # As `xyz` is listed first, `xyz` is the default used when printing in this format. SERIALIZE = ( \"xyz-d65\" , \"xyz\" ) # Specify channel attributes, bounds, etc. of the non-alpha color channels. # Each channel is defined via a `Channel` object # #``` #class Channel(str): # \"\"\"Channel.\"\"\" # # def __new__( # cls, # name: str, # low: float, # high: float, # bound: bool = False, # flags: int = 0, # limit: Tuple[Optional[float], Optional[float]] = (None, None) # ) -> 'Channel': #``` # # - `name`: The name of the channel. # - `low`: Lower limit of the channel, for unbound channels, the value will be arbitrary. # - `high`: Upper limit of the channel, for unbound channels, the value will be arbitrary. # - `bound`: Whether the channel enforces the gamut range. # - `limit`: Optional upper and lower limit. Used to define a hard limit for the channel that is clamped # when the channel is set. This differs from gamut boundaries which can be exceeded until gamut # mapping occurs. For instance, `chroma` often enforces no values below zero as these values # do not naturally occur, not even with normal out of gamut colors. So, we could clamp the lower # bound: `(0, None)`. # - `flags`: Flags used to provide additional context for the channel. # # The following flags are supported: # - FLG_ANGLE: denotes that channel is a angle or degree value. # - FLG_PERCENT: denotes the value is considered a percent input. This is usually used in named CSS functions # like `hsl()` which require string inputs for saturation and lightness to always be in a # percentage format. The CSS `color()` function ignores this flags as no channels are always # required to be percentages. Percentage range will be determined by `high` and `low`. # - FLG_OPT_PERCENT: denotes the value can optionally be considered as a percent. # This is also only used for CSS string input and output. CSS `oklab`, `lab()`, `oklch`, # `lch()`, and `srgb()` allow for channels to be provided as percentages or normal # numbers in certain cases. This tells the parser and serializer which channels allow this. # Percentage range will be determined by `high` and `low`. # - FLG_MIRROR_PERCENT: The channel, when importing or exporting to a percent should mirror the percentage # for negative values. This is used mainly in Lab and Lab like spaces which have `a` # `b` channels that allow for both negative and positive values. If set, `high` and `low` # should fulfill `abs(low) == high`. CHANNELS = ( Channel ( \"x\" , 0.0 , 1.0 ), Channel ( \"y\" , 0.0 , 1.0 ), Channel ( \"z\" , 0.0 , 1.0 ) ) # A dictionary containing a mapping of aliases to `name` attribute of `CHANNELS` found above. CHANNEL_ALIASES = {} # If you'd like this color space to parse as and export a `color(space ...)` format. # If set to `False` the space will not recognize the color format as an input. # This only affects input matching. To override output of the color format, you will also # need to override the `to_string` method. COLOR_FORMAT = True # Specify the white point that the color space uses # White point should be a `tuple` containing the x and y chromaticity points. # Some basic ones are provided in the `cat` module for both 2 degree and 10 degree observer. WHITE = cat . WHITES [ '2deg' ][ 'D65' ] # If `GAMUT_CHECK` is set to a color space name, the provided color space will be used to verify the an \"in gamut\" # check in addition to the current color space's channel ranges. This is often used with color spaces such as: # HSL, HSV, and HWB where `GAMUT_CHECK` will be set to `srgb`. # # Gamut checking: # The specified color space will be checked first followed by the original. Assuming the parent color space fits, # the original should fit as well, but there are some cases when a parent color space that is slightly out of # gamut, when evaluated with a threshold, may appear to be in gamut enough, but when checking the original color # space, the values can be greatly out of specification (looking at you HSL). GAMUT_CHECK = None # When set to `True`, this denotes that the color space has the ability to represent out of gamut in colors in an # extended range. When interpolation is done, if colors are interpolated in a smaller gamut than the colors being # interpolated, and that color is \"bound\" to a gamut, the colors will usually be gamut mapped, but if the # interpolation space happens to support extended ranges, then the colors will not be gamut mapped even if their # gamut is larger than the target interpolation space. EXTENDED_RANGE = False ############################ # To and from conversion functions that transform the color to and from the `BASE` color. ############################ def to_base ( self , coords : Vector ) -> Vector : \"\"\" To XYZ (no change). Any needed chromatic adaptation is handled in the parent Color object. \"\"\" return coords def from_base ( self , coords : Vector ) -> Vector : \"\"\" From XYZ (no change). Any needed chromatic adaptation is handled in the parent Color object. \"\"\" return coords Once registered, colors can be created using the NAME via normal instantiation methods or conversions: Color ( NAME , [ ... ]) Color ( red ) . convert ( NAME ) By default, assuming COLOR_FORMAT is True , color strings will be parsed in the following format, where SERIALIZE is one one of the IDs specified via the SERIALIZE plugin property. Color ( 'color(SERIALIZE ...)' )","title":"Plugin Class"},{"location":"plugins/space/#plugin-defaults","text":"It is important to note that color space plugins are often not isolated. They are convert to from some BASE color and may be a BASE color for some other color space. Essentially, color spaces are chained together via the BASE property to ensure proper conversion to and from the color space. Because of this, it is not advisable to have any configurable defaults that would fundamentally change how the color coordinates are calculated, as such a change could affect not only the targeted color space, but other color spaces up and down the color conversion change. If configuration of a color space's fundamental calculations of coordinates is desired, it is recommended that the given Space plugin gets subclassed and provided a new NAME , along with SERIALIZE IDs that do not conflict with other spaces. Such changes would include changing a white point, changing viewing conditions, and even changing the algorithm for color space conversion. Defaults can be provided and configured via an __init__ method, but it is strongly recommended that only superficial things are controlled by such options, like controlling recognized input/output string formats. Additionally, if provided an __init__ , it is required that super().__init__() also gets called.","title":"Plugin Defaults"},{"location":"plugins/space/#chromatic-adaptation","text":"Chromatic adaptation is usually applied to a color when it is passing from one XYZ color space to another XYZ color space that has a different white point. In ColorAide, any time XYZ D65 is either the target or origin color, and the other color space has a different white point, the XYZ coordinates, will either be adapted to XYZ D65 or XYZ (new white point) respectively. This all happens without The Space plugin needing to do anything additional. White points are specified via the WHITE property, and should contain a tuple of xy coordinates of the white point.","title":"Chromatic Adaptation"},{"location":"plugins/space/#color-normalization","text":"In addition to the aforementioned methods, some color spaces, such as cylindrical spaces, have some additional logic that determines when a hue is undefined. During conversion, undefined channels are initially thrown away, but a color may be returned with undefined hues if it is a cylindrical color space and the the color is achromatic, or in some cases, very close to achromatic. The Space.normalize function is not used during conversion, but provides logic for specifically normalizing an exiting color when Color.normalize is called. Logic should generally match whatever occurs during conversion. Usually, for rectangular spaces, normalize simply eliminates undefined channels. For cylindrical spaces, it will also set the hue to \"undefined\" if the color meets the criteria of the color space. This may be when chroma is zero, or maybe even when very close to zero. This can vary from color space to color space. normalize can be specified as an function of the Space plugin. def normalize ( self , coords : Vector ) -> Vector : \"\"\"Normalize color.\"\"\" coords = alg . no_nans ( coords ) if coords [ 1 ] == 0 or coords [ 2 ] in ( 0 , 1 ): coords [ 0 ] = alg . NaN return coords","title":"Color Normalization"},{"location":"plugins/space/#mix-ins","text":"If the color is a cylindrical space, Lab-ish space, or LCh-ish space, you can additionally add in the respective mix-in class: Cylindrical , Labish , or LChish . It should be noted that LChish is subclassed from Cylindrical . Cylindrical Labish LChish class Cylindrical : \"\"\"Cylindrical space.\"\"\" def hue_name ( self ) -> str : \"\"\"Hue channel name.\"\"\" return \"h\" def hue_index ( self ) -> int : # pragma: no cover \"\"\"Get hue index.\"\"\" return cast ( 'Space' , self ) . get_channel_index ( self . hue_name ()) class Labish : \"\"\"Lab-ish color spaces.\"\"\" def labish_names ( self ) -> Tuple [ str , ... ]: \"\"\"Return Lab-ish names in the order L a b.\"\"\" return cast ( 'Space' , self ) . channels [: - 1 ] def labish_indexes ( self ) -> List [ int ]: # pragma: no cover \"\"\"Return the index of the Lab-ish channels.\"\"\" return [ cast ( 'Space' , self ) . get_channel_index ( name ) for name in self . labish_names ()] class LChish ( Cylindrical ): \"\"\"LCh-ish color spaces.\"\"\" def lchish_names ( self ) -> Tuple [ str , ... ]: # pragma: no cover \"\"\"Return LCh-ish names in the order L c h.\"\"\" return cast ( 'Space' , self ) . channels [: - 1 ] def lchish_indexes ( self ) -> List [ int ]: # pragma: no cover \"\"\"Return the index of the Lab-ish channels.\"\"\" return [ cast ( 'Space' , self ) . get_channel_index ( name ) for name in self . lchish_names ()] Mix-in classes are mainly available so that a color space can be inspected to see if it falls into a specific generic color space type in order to allow for some generic handling of the color. For instance, you may not care specifically what color space you are dealing with, but you may want to extract the hue from all cylindrical spaces, or grab the lightness (or lightness equivalent) from all Lab-ish color spaces. The mix-in classes provide methods mainly to extract expected channels on color spaces that may use different names for similar channels or to determine the index of a specific channel type. Occasionally, these methods may need to be overridden for a color space. Below, we can see that both jzazbz and ictcp identify as Lab-ish spaces. If we just care about accessing the equivalent of Lab lightness on these spaces, we can simply can access them with the following logic. >>> from coloraide.spaces import Labish >>> srgb = Color ( 'red' ) >>> jzazbz = srgb . convert ( 'jzazbz' ) >>> ictcp = srgb . convert ( 'ictcp' ) >>> for c in ( srgb , jzazbz , ictcp ): ... if isinstance ( c . _space , Labish ): ... print ( 'color: ' , c ) ... l = c . _space . labish_names ()[ 0 ] ... print ( 'channel: ' , l ) ... print ( 'value: ' , c . get ( l )) ... color: color(--jzazbz 0.13438 0.11789 0.11188 / 1) channel: jz value: 0.13438473104350318 color: color(--ictcp 0.42785 -0.11574 0.2788 / 1) channel: i value: 0.4278524836087273 from coloraide.spaces import Labish srgb = Color('red') jzazbz = srgb.convert('jzazbz') ictcp = srgb.convert('ictcp') for c in (srgb, jzazbz, ictcp): if isinstance(c._space, Labish): print('color: ', c) l = c._space.labish_names()[0] print('channel: ', l) print('value: ', c.get(l)) Edit Share Run Cancel It should be noted that just because a color space identifies in a specific, generic category, it doesn't mean it is precisely that thing. For instance, the color space CIELab is clearly a Lab-ish space, or more precisely, it is a Lab color space. Oklab, DIN99o, and others are very much Lab spaces as well. ICtCp, on the other hand, is very Lab like as its Ct and Cp channels control redness/greenness and blueness/yellowness, but the I channel represents intensity, not lightness which is similar but not precisely the same thing.","title":"Mix-ins"},{"location":"plugins/space/#adding-new-inputoutput-formats","text":"One common thing that may be desired is altering an existing color space to accept and output a specialized format. While using hex color codes or rgb () formats are fairly common, there are many places were other forms are used to represent colors. It may be beneficial for a user working with colors in some more obscure form to repurpose a color space to handle different input/output formats. The base of every color space is defined to accept and output the color ( space ... ) format. As this is a common input form across all color spaces, it is handled generically for all spaces in one action for performance reasons. Iterating each color space to perform the same match with a different color spaces name is obviously slower. A color can opt out of this input format by simply setting COLOR_FORMAT to False . This only disables input parsing. In order to disable this format during serialization the color space's #py3 to_string() method would need to be overridden. New, per color space matching logic can be achieved by simply by overriding the match () method. If it is desired to also accept the color ( space ... ) format, just keep the COLOR_FORMAT flag enabled; otherwise, disable it. As an example, let's consider the default sRGB space. We wanted to add additional CSS formats in addition to the color ( space ... ) format. While we won't go into the specific parsing logic, the general top-level logic can be seen below. We simply override the match () method and call into our CSS parser. The parser will handle the appropriate syntax for our color spaces. It is not configured to process the color ( space ... ) format as that is already handled more efficiently when with COLOR_FORMAT enabled. Also, notice that match () is expected to return two things: a tuple containing the color channel coordinates and the alpha value, and the end position ( ([ r , g , b ], a ), end ). If the match fails, it simply returns None . from coloraide.spaces import srgb as base from coloraide.css import parse class sRGB ( base . sRGB ): \"\"\"sRGB class.\"\"\" # This color class should opt into the generic `color(space ...)` input format. # This is `True` by default, but shown for demonstration purposes. COLOR_FORMAT : True # If the color format above is not found, continue with our custom match to handle all other formats. def match ( self , string : str , start : int = 0 , fullmatch : bool = True ) -> Optional [ Tuple [ Tuple [ Vector , float ], int ]]: \"\"\"Match a CSS color string.\"\"\" return parse . parse_css ( self , string , start , fullmatch ) Additionally, we control the output formats by overriding the to_string () function. We ensure that it accepts all the parameters we need, in our case we accept the common parameters and later check for our special inputs in kwargs . def to_string ( self , parent : 'Color' , * , alpha : Optional [ bool ] = None , precision : Optional [ int ] = None , fit : Union [ bool , str ] = True , none : bool = False , color : bool = False , hex : bool = False , names : bool = False , comma : bool = False , upper : bool = False , percent : bool = False , compress : bool = False , ** kwargs : Any ) -> str : \"\"\"Convert to CSS.\"\"\" return serialize . serialize_css ( parent , func = 'rgb' , alpha = alpha , precision = precision , fit = fit , none = none , color = color , hexa = hex , name = names , legacy = comma , upper = upper , percent = percent , compress = compress , scale = 255 ) As all ColorAide color spaces are defined as plugins, there should be ample examples to help someone start writing a new color space. .info-container {display: inline-block;}","title":"Adding New Input/Output Formats"}]}