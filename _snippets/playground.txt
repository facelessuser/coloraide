<style>
#playground-inputs {
  -webkit-appearance: textarea;
  position: absolute;
  margin: 0;
  top: 0;
  left: 0;
  display: block;
  width: 100%;
  min-height: 15em;
  border: none;
  padding: .7720588235em 1.1764705882em;
  outline: none;
  cursor: text;
  overflow: auto;
  caret-color: var(--md-code-fg-color);
  color: transparent;
  background-color: transparent;
  font-feature-settings: "kern";
  font-family: var(--md-code-font-family,_),SFMono-Regular,Consolas,Menlo,monospace;
  line-height: 1.4;
  font-size: .85em;
  z-index: 1;
  resize: none;
  word-wrap: unset;
  white-space: pre;
}

#playground-inputs::selection {
  color: var(--md-code-bg-color);
  background: var(--md-code-fg-color);
  font-weight: bold;
}

#playground-code {
  margin-top: 2px;
  width: 100%;
  height: 15em;
  position: relative;
  overlow: hidden;
}

#playground-code .highlight,
#playground-code .highlight code {
  margin: 0;
  height: 15em;
  overflow: hidden;
}

#playground-code pre {
  margin: 0;
  pointer-events: none;
  height: calc(100% + 0.2rem);
}

#playground-results code {
  height: 15em;
}

#playground-results pre {
  margin-bottom: 0;
}

#playground-results .swatch-bar {
  min-height: calc(3em + 4px);
}

#playground-results .color-command {
  margin-bottom: 0;
}

/* Enabling custom scroll bar causes issues with Safari.
   Safari renders `textarea` content in a shadow DOM, and
   the content is smaller than the text area with scrollbar.
   This can cause the overlay text to not be aligned with the
   underlying code highlighted content. */
/*.md-typeset textarea::-webkit-scrollbar {
  width: 0.2rem;
  height: 0.2rem;
}

.md-typeset textarea::-webkit-scrollbar-corner {
  background-color: transparent;
}

.md-typeset textarea::-webkit-scrollbar-thumb {
  background-color: var(--md-default-fg-color--lighter);
}

.md-typeset textarea::-webkit-scrollbar-thumb:hover {
  background-color: var(--md-accent-fg-color);
}

.md-typeset textarea {
  scrollbar-color: var(--md-default-fg-color--lighter) transparent;
  scrollbar-width: thin;
}

.md-typeset textarea:hover {
  scrollbar-color: var(--md-accent-fg-color) transparent;
}*/
</style>

<script type="text/javascript">
// set the Pyodide files URL (packages.json, pyodide.asm.data etc)
window.languagePluginUrl = 'https://cdn.jsdelivr.net/pyodide/v0.17.0a2/full/';
</script>
<script src="https://cdn.jsdelivr.net/pyodide/v0.17.0a2/full/pyodide.js"></script>

<script type="text/javascript">
const inputs = document.getElementById("playground-inputs");
const results = document.getElementById("playground-results");
const pgcode = document.getElementById("playground-code");
let busy = false;
let requests = 0;

function pyexecute(str) {

    let pycode = `
--8<-- "pycode.txt"
`
    languagePluginLoader.then(() => {
      return pyodide.loadPackage(['micropip', 'Pygments']);
    }).then(() => {
      pyodide.globals.set('payload', str + '\n')
      pyodide.runPython(pycode);
      busy = false;
      if (requests) {
        setTimeout(payload, 100);
      }
    });
}

inputs.addEventListener("input", (e) => {
  requests++;
  payload();
});

inputs.addEventListener("scroll", (e) => {
  const code = pgcode.querySelector("code");
  code.scrollLeft = e.target.scrollLeft;
  code.scrollTop = e.target.scrollTop;
});

inputs.addEventListener('touchmove', function(e){
  e.stopPropagation();
});

function payload () {
  // Throttle requests
  if (busy) {
    return;
  }

  // Execute
  if (requests) {
    requests = 0;
    busy = true;
    pyexecute(inputs.value);
  }
};

// Initial first run after load.
inputs.focus();
busy = true;
pyexecute(inputs.value);
</script>
